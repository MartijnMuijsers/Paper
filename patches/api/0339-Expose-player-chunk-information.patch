From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 22 Sep 2021 22:04:47 +0200
Subject: [PATCH] Expose player chunk information


diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index ab268f83b8f557b5d319aa78aa1927e18ac6381d..4b9aae53c8bd0f4fde2e0fe99949102b67003ecb 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -3641,6 +3641,17 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     public void setAllowEntityTrackingBeyondNoTickViewDistance(boolean allow);
     // Martijn in Paper end - entity tracking view distance
+
+    // Martijn in Paper start - expose player chunk information
+    /**
+     * Gets the number of chunks being currently sent to players in this world.
+     * <p>
+     * The number of chunks being currently sent includes only the chunks currently being written to the network socket by Netty: chunks no longer count as being currently sent as soon as this is finished. This number says nothing about whether chunks have been received, or how many chunks are in transit.
+     * </p>
+     * @return The number of chunks being currently sent to players in this world.
+     */
+    public int getConcurrentChunksBeingSent();
+    // Martijn in Paper end - expose player chunk information
     // Paper end - view distance api
     // Spigot start
     public class Spigot {
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 98d8e897af683956f63093183ea751bdb383923e..58a103060bfd4f2ec28fd44b94cf98ef7ec72410 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1,6 +1,7 @@
 package org.bukkit.entity;
 
 import java.net.InetSocketAddress;
+import java.util.List; // Martijn in Paper - expose player chunk information
 import java.util.Set; // Paper
 import java.util.UUID;
 import com.destroystokyo.paper.ClientOption; // Paper
@@ -2000,6 +2001,51 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     public void setTargetChunkSendRate(@Nullable Double chunkSendRate);
     // Martijn in Paper end - per-player chunk send rate
+
+    // Martijn in Paper start - expose player chunk information
+    /**
+     * Gets which chunks (in the world the player is in) are queued to be loaded for the player.
+     *
+     * @return A set of chunk keys, one for each chunk (in the world the player is in) that is queued to be loaded for the player.
+     */
+    public @NotNull Set<@NotNull Long> getUnorderedChunksQueuedToBeLoaded();
+    /**
+     * Gets which chunks (in the world the player is in) are queued to be sent to the player.
+     *
+     * @return A set of chunk keys, one for each chunk (in the world the player is in) that is queued to be sent to the player.
+     */
+    public @NotNull Set<@NotNull Long> getUnorderedChunksQueuedToBeSent();
+
+    /**
+     * Gets which chunks (in the world the player is in) are queued to be loaded for the player.
+     *
+     * @return A list of chunk keys, one for each chunk (in the world the player is in) that is queued to be loaded for the player, in the order they are queued to be loaded.
+     */
+    public @NotNull List<@NotNull Long> getOrderedChunksQueuedToBeLoaded();
+
+    /**
+     * Gets which chunks (in the world the player is in) are queued to be sent to the player.
+     *
+     * @return A list of chunk keys, one for each chunk (in the world the player is in) that is queued to be sent to the player, in the order they are queued to be sent.
+     */
+    public @NotNull List<@NotNull Long> getOrderedChunksQueuedToBeSent();
+
+    /**
+     * Gets which chunks (in the world the player is in) have been sent to this player.
+     *
+     * @return A set of chunk keys, one for each chunk (in the world the player is in) that has been sent to this player.
+     */
+    public @NotNull Set<@NotNull Long> getSentChunks();
+
+    /**
+     * Gets whether the given chunk (in the world the player is in) has been sent to this player.
+     *
+     * @param chunkX The x-coordinate of the chunk
+     * @param chunkZ The z-coordinate of the chunk
+     * @return Whether the given chunk has been sent to this player.
+     */
+    public boolean hasSentChunk(int chunkX, int chunkZ);
+    // Martijn in Paper end - expose player chunk information
     // Paper end
 
     /**
