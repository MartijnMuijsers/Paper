From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Fri, 17 Sep 2021 17:18:40 +0200
Subject: [PATCH] Add per-source enchantability


diff --git a/src/main/java/nl/martijnmuijsers/paper/enchantments/EnchantmentSource.java b/src/main/java/nl/martijnmuijsers/paper/enchantments/EnchantmentSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..3cafc670570c336f8763046f8ad7aaec6e2d7164
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/enchantments/EnchantmentSource.java
@@ -0,0 +1,19 @@
+package nl.martijnmuijsers.paper.enchantments;
+
+/**
+ * The various reasons for which an enchantment can be attempted to be added to an item
+ */
+public enum EnchantmentSource {
+
+    ANVIL,
+    ENCHANTING_TABLE,
+    GENERATED_LOOT,
+    BUKKIT_API,
+    ENCHANT_COMMAND,
+    VILLAGER_TRADE,
+    SPAWNED_SKELETON_TRAP_MAIN_HAND,
+    SPAWNED_SKELETON_TRAP_HELMET,
+    SPAWNED_MOB_MAIN_HAND,
+    SPAWNED_MOB_ARMOR;
+
+}
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index 1e1c5a9d9a769018c4604e6e44fc5ed2312981e9..fa2fcd7204915a199689bfd5150caa8f8b268349 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -2,6 +2,9 @@ package org.bukkit.enchantments;
 
 import java.util.HashMap;
 import java.util.Map;
+import java.util.function.BiPredicate; // Martijn in Bukkit - per-source enchantability
+
+import nl.martijnmuijsers.paper.enchantments.EnchantmentSource; // Martijn in Bukkit - per-source enchantability
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
@@ -279,17 +282,69 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
      */
     public abstract boolean conflictsWith(@NotNull Enchantment other);
 
+    // Martijn in Bukkit start - per-source enchantability
     /**
      * Checks if this Enchantment may be applied to the given {@link
      * ItemStack}.
      * <p>
      * This does not check if it conflicts with any enchantments already
      * applied to the item.
+     * </p>
      *
      * @param item Item to test
      * @return True if the enchantment may be applied, otherwise False
+     *
+     * @deprecated Due to the preferred specific method {@link Enchantment#canEnchantItem(ItemStack, EnchantmentSource)}. This method will defer to {@link Enchantment#canEnchantItemInVanilla(ItemStack)}.
      */
+    @Deprecated
     public abstract boolean canEnchantItem(@NotNull ItemStack item);
+
+    /**
+     * Checks if this Enchantment may be applied to the given {@link
+     * ItemStack} for the given reason.
+     * <p>
+     * This does not check if it conflicts with any enchantments already
+     * applied to the item.
+     * </p>
+     *
+     * @param item Item to test
+     * @param source The reason for enchanting to test
+     * @return True if the enchantment may be applied for the given reason, otherwise False
+     */
+    public abstract boolean canEnchantItem(@NotNull ItemStack item, @NotNull EnchantmentSource source);
+
+    /**
+     * Checks if this Enchantment may be applied to the given {@link
+     * ItemStack} in vanilla.
+     * <p>
+     * This does not check if it conflicts with any enchantments already
+     * applied to the item.
+     * </p>
+     *
+     * @param item Item to test
+     * @return True if the enchantment may be applied in vanilla, otherwise False
+     */
+    public abstract boolean canEnchantItemInVanilla(@NotNull ItemStack item);
+
+    /**
+     * Returns the predicate that determines the output of {@link Enchantment#canEnchantItem(ItemStack, EnchantmentSource)}.
+     * <p>
+     * The returned predicate is a copy, independent of changes in the underlying implementation.
+     * </p>
+     * @return The predicate that determines the output of {@link Enchantment#canEnchantItem(ItemStack, EnchantmentSource)}.
+     */
+    public abstract @NotNull BiPredicate<@NotNull ItemStack, @NotNull EnchantmentSource> getCanEnchantItemPredicate();
+
+    /**
+     * Sets the predicate that determines the output of {@link Enchantment#canEnchantItem(ItemStack, EnchantmentSource)}.
+     * <p>
+     * It is recommended to retrieve the current predicate from {@link Enchantment#getCanEnchantItemPredicate()} first, and include a call to it in the newly given predicate.
+     * </p>
+     * @param predicate The predicate that determines the output of {@link Enchantment#canEnchantItem(ItemStack, EnchantmentSource)}.
+     */
+    public abstract void setCanEnchantItemPredicate(@NotNull BiPredicate<@NotNull ItemStack, @NotNull EnchantmentSource> predicate);
+    // Martijn in Bukkit end - per-source enchantability
+
     // Paper start
     /**
      * Get the name of the enchantment with its applied level.
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
index 5f42a9c0c43ced10b754170d7c83793a99fce81b..72438c2093f40b18ffd88de9d5cac17f89b07090 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
@@ -1,9 +1,12 @@
 package org.bukkit.enchantments;
 
+import nl.martijnmuijsers.paper.enchantments.EnchantmentSource; // Martijn in Bukkit - per-source enchantability
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.function.BiPredicate; // Martijn in Bukkit - per-source enchantability
+
 /**
  * A simple wrapper for ease of selecting {@link Enchantment}s
  */
@@ -38,11 +41,35 @@ public class EnchantmentWrapper extends Enchantment {
         return getEnchantment().getItemTarget();
     }
 
+    // Martijn in Bukkit start - per-source enchantability
     @Override
+    @Deprecated
     public boolean canEnchantItem(@NotNull ItemStack item) {
         return getEnchantment().canEnchantItem(item);
     }
 
+    @Override
+    public boolean canEnchantItem(@NotNull ItemStack item, @NotNull EnchantmentSource source) {
+        return getEnchantment().canEnchantItem(item, source);
+    }
+
+    @Override
+    public boolean canEnchantItemInVanilla(@NotNull ItemStack item) {
+        return getEnchantment().canEnchantItemInVanilla(item);
+    }
+
+    @NotNull
+    @Override
+    public BiPredicate<@NotNull ItemStack, @NotNull EnchantmentSource> getCanEnchantItemPredicate() {
+        return getEnchantment().getCanEnchantItemPredicate();
+    }
+
+    @Override
+    public void setCanEnchantItemPredicate(@NotNull BiPredicate<@NotNull ItemStack, @NotNull EnchantmentSource> predicate) {
+        getEnchantment().setCanEnchantItemPredicate(predicate);
+    }
+    // Martijn in Bukkit end - per-source enchantability
+
     @NotNull
     @Override
     public String getName() {
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 59a026d80b0a0a4890becf98efdbe5325b2c622a..dd5b607db45935594de33194b6b79a4ffc45a9bb 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -5,6 +5,8 @@ import java.util.LinkedHashMap;
 import java.util.List; // Paper
 import java.util.Map;
 import java.util.Set; // Paper
+
+import nl.martijnmuijsers.paper.enchantments.EnchantmentSource; // Martijn in Bukkit - per-source enchantability
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
@@ -394,7 +396,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         Validate.notNull(ench, "Enchantment cannot be null");
         if ((level < ench.getStartLevel()) || (level > ench.getMaxLevel())) {
             throw new IllegalArgumentException("Enchantment level is either too low or too high (given " + level + ", bounds are " + ench.getStartLevel() + " to " + ench.getMaxLevel() + ")");
-        } else if (!ench.canEnchantItem(this)) {
+        } else if (!ench.canEnchantItem(this, EnchantmentSource.BUKKIT_API)) { // Martijn in Bukkit - per-source enchantability
             throw new IllegalArgumentException("Specified enchantment cannot be applied to this itemstack");
         }
 
