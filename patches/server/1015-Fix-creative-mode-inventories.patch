From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sat, 9 Jul 2022 21:19:52 +0200
Subject: [PATCH] Fix creative mode inventories


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 33e0da585eec446a6095b511d137ba79e9c0381a..42e24bd61a63343da80f54ab6519fc3b91969b15 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -171,6 +171,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import nl.martijnmuijsers.paper.item.ItemReplacementRule;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 
@@ -3149,10 +3150,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                     while (objectiterator.hasNext()) {
                         Entry<ItemStack> entry = (Entry) objectiterator.next();
 
-                        this.player.containerMenu.setRemoteSlotNoCopy(entry.getIntKey(), (ItemStack) entry.getValue());
+                        this.player.containerMenu.setRemoteSlotNoCopy(entry.getIntKey(), ItemReplacementRule.reverseReplacement((ItemStack) entry.getValue())); // Martijn - custom blocks and items
                     }
 
-                    this.player.containerMenu.setRemoteCarried(packet.getCarriedItem());
+                    this.player.containerMenu.setRemoteCarried(ItemReplacementRule.reverseReplacement(packet.getCarriedItem())); // Martijn - custom blocks and items
                     this.player.containerMenu.resumeRemoteUpdates();
                     if (flag) {
                         this.player.containerMenu.broadcastFullState();
@@ -3209,7 +3210,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
         if (this.player.gameMode.isCreative()) {
             boolean flag = packet.getSlotNum() < 0;
-            ItemStack itemstack = packet.getItem();
+            // Martijn start - custom blocks and items
+            ItemStack requestedItemStack = ItemReplacementRule.reverseReplacement(packet.getItem());
+            ItemStack itemstack = requestedItemStack;
+            // Martijn end - custom blocks and items
             CompoundTag nbttagcompound = BlockItem.getBlockEntityData(itemstack);
 
             if (!itemstack.isEmpty() && nbttagcompound != null && nbttagcompound.contains("x") && nbttagcompound.contains("y") && nbttagcompound.contains("z") && this.player.getBukkitEntity().hasPermission("minecraft.nbt.copy")) { // Spigot
@@ -3228,10 +3232,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
             boolean flag1 = packet.getSlotNum() >= 1 && packet.getSlotNum() <= 45;
             boolean flag2 = itemstack.isEmpty() || itemstack.getDamageValue() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty();
-            if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(packet.getSlotNum()).getItem(), packet.getItem()))) { // Insist on valid slot
+            if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(packet.getSlotNum()).getItem(), requestedItemStack))) { // Insist on valid slot // Martijn - custom blocks and items
                 // CraftBukkit start - Call click event
                 InventoryView inventory = this.player.inventoryMenu.getBukkitView();
-                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(packet.getItem());
+                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(requestedItemStack); // Martijn - custom blocks and items
 
                 SlotType type = SlotType.QUICKBAR;
                 if (flag) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index fd94774e806ce90ee1b8306622a04f8457aae4bc..0528f9f3a5f4b64212e4e3f2cf6a82572770b0ca 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -1,11 +1,13 @@
 package nl.martijnmuijsers.paper.item;
 
 import com.google.common.collect.Lists;
+import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.ChatFormatting;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.TextColor;
@@ -234,12 +236,15 @@ public interface ItemReplacementRule {
                     clone.setItem(this.getFallback());
                 }
                 replaceItemStackDisplayName(clone, tag, item.getRarity(), this.real.customDisplayNameJSON, this.real.customDisplayNameInLoreJSON);
+                storeOriginalItemInfoInItemStackNBT(clone, tag, item);
                 return clone;
             } else if (this.isBlockHostReplacing(item.getItem()) && hasResourcePack) {
                 @NotNull ItemStack clone = item.copy();
                 clone.setItem(this.getBlockHostReplacingItemReplacement(item.getItem()));
                 var description = Component.translatable(item.getDescriptionId());
-                replaceItemStackDisplayName(clone, null, item.getRarity(), Component.Serializer.toJson(description.withStyle(Style.EMPTY.withColor(clone.getRarity().color).withItalic(false))), Component.Serializer.toJson(description.withStyle(Style.EMPTY.withColor(SuCraftItems.CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR).withItalic(false))));
+                CompoundTag tag = clone.getOrCreateTag();
+                replaceItemStackDisplayName(clone, tag, item.getRarity(), Component.Serializer.toJson(description.withStyle(Style.EMPTY.withColor(clone.getRarity().color).withItalic(false))), Component.Serializer.toJson(description.withStyle(Style.EMPTY.withColor(SuCraftItems.CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR).withItalic(false))));
+                storeOriginalItemInfoInItemStackNBT(clone, tag, item);
                 return clone;
             }
             return null;
@@ -360,4 +365,43 @@ public interface ItemReplacementRule {
         return new SimpleItemReplacementRule.Builder();
     }
 
+    @NotNull String ORIGINAL_ITEM_INFO_ITEM_STACK_KEY = "OriginalItem";
+
+    /**
+     * @param tag Optional, just for convenience in case we already have it to avoid unnecessarily retrieving it twice
+     */
+    static void storeOriginalItemInfoInItemStackNBT(@NotNull ItemStack itemStack, @Nullable CompoundTag tag, @NotNull ItemStack originalItemStack) {
+        if (tag == null) {
+            tag = itemStack.getOrCreateTag();
+        }
+        tag.put(ORIGINAL_ITEM_INFO_ITEM_STACK_KEY, originalItemStack.save(new CompoundTag()));
+    }
+
+    /**
+     * Reverses {@link #replace} for a given ItemStack, assuming that ItemStack originated from the client, which may send packets containing ItemStacks that are the fake versions that we sent it
+     * <br>
+     * Will return null if and only if given null
+     */
+    static @Nullable ItemStack reverseReplacement(@Nullable ItemStack itemStack) {
+        try {
+            if (itemStack == null) {
+                return null;
+            }
+            @Nullable CompoundTag tag = itemStack.getTag();
+            if (tag == null) {
+                return itemStack;
+            }
+            if (!tag.contains(ORIGINAL_ITEM_INFO_ITEM_STACK_KEY, Tag.TAG_COMPOUND)) {
+                return itemStack;
+            }
+            CompoundTag originalNBT = tag.getCompound(ORIGINAL_ITEM_INFO_ITEM_STACK_KEY);
+            ItemStack original = ItemStack.of(originalNBT);
+            // The intended amount is chosen by the client
+            original.setCount(itemStack.getCount());
+            return original;
+        } catch (Throwable e) {
+            return itemStack;
+        }
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index b926b570a95107d9c686357f71abe03b8b48011e..6b628ff76a3a0105fa2037cf0e98f68189a3997d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 51;
+    private static final int currentResourcePackVersion = 52;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
@@ -46,7 +46,7 @@ public final class CreateSuCraftResourcePack {
     public static final String INHERITED_RESOURCE_PACKS_FOLDER_PATH = INPUT_FOLDER_PATH + "/inheritedpacks";
     private static final String VANILLA_RESOURCE_PACK_ARCHIVE_PATH = INHERITED_RESOURCE_PACKS_FOLDER_PATH + "/vanilla_client_1.19_only_assets_minecraft.zip";
 
-    public static final int RESOURCE_PACK_FORMAT = 9;
+    public static final int RESOURCE_PACK_FORMAT = 8;
     private static final String NAME = "SuCraft";
     private static final JsonElement DESCRIPTION = JsonParser.parseString("[{\"text\":\"\\u2764 Made with love\",\"color\":\"gray\"},{\"text\":\"\\n\"},{\"text\":\"~SuCraft\",\"color\":\"gold\"}]");
 
