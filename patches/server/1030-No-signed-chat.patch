From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Fri, 5 Aug 2022 14:39:53 +0200
Subject: [PATCH] No signed chat


diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index 28ddab1121e314e82bf764fd89f36714bd7445f8..6f739de85e0f70e9119baae955dc717020e0b10e 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -313,7 +313,7 @@ public final class ChatProcessor {
 
         private void sendToServer(final ChatType.Bound chatType, final @Nullable Function<Audience, net.minecraft.network.chat.Component> msgFunction) {
             final PlayerChatMessage toConsoleMessage = msgFunction == null ? ChatProcessor.this.message : ChatProcessor.this.message.withUnsignedContent(msgFunction.apply(ChatProcessor.this.server.console));
-            ChatProcessor.this.server.logChatMessage(toConsoleMessage.serverContent(), chatType, ChatProcessor.this.server.getPlayerList().verifyChatTrusted(toConsoleMessage, ChatProcessor.this.player.asChatSender()) ? null : "Not Secure");
+            ChatProcessor.this.server.logChatMessage(toConsoleMessage.serverContent(), chatType, null); // Martijn - no signed chat
         }
 
         record ConstantFunction(net.minecraft.network.chat.Component component) implements Function<Audience, net.minecraft.network.chat.Component> {
diff --git a/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java b/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java
index bd82f0316df85b621c1970ff30bbbec0d2712ccd..85d1a6b2cd21d9c456c37c6025c0fa0326409242 100644
--- a/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java
+++ b/src/main/java/net/minecraft/network/chat/OutgoingPlayerChatMessage.java
@@ -52,7 +52,7 @@ public interface OutgoingPlayerChatMessage {
             if (!playerChatMessage.isFullyFiltered()) {
                 RegistryAccess registryAccess = sender.level.registryAccess();
                 ChatType.BoundNetwork boundNetwork = params.toNetwork(registryAccess);
-                sender.connection.send(new ClientboundPlayerChatPacket(playerChatMessage, boundNetwork));
+                sender.connection.send(ClientboundPlayerChatPacket.createUnsigned(sender, playerChatMessage, boundNetwork)); // Martijn - no signed chat
                 sender.connection.addPendingMessage(playerChatMessage);
             }
 
@@ -91,9 +91,7 @@ public interface OutgoingPlayerChatMessage {
                 this.playersWithFullMessage.add(sender);
                 RegistryAccess registryAccess = sender.level.registryAccess();
                 ChatType.BoundNetwork boundNetwork = params.toNetwork(registryAccess);
-                sender.connection.send(new ClientboundPlayerChatPacket(playerChatMessage, boundNetwork), PacketSendListener.exceptionallySend(() -> {
-                    return new ClientboundPlayerChatHeaderPacket(this.message);
-                }));
+                sender.connection.send(ClientboundPlayerChatPacket.createUnsigned(sender, playerChatMessage, boundNetwork)); // Martijn - no signed chat
                 sender.connection.addPendingMessage(playerChatMessage);
             }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
index 0b818969d74eae05e2d2adfdbc38e513972c61a1..80e1bbe1c8da3271aa1acfd51203f1f9956c6741 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerChatPacket.java
@@ -4,8 +4,11 @@ import java.util.Optional;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.ChatType;
+import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
 
 public record ClientboundPlayerChatPacket(PlayerChatMessage message, ChatType.BoundNetwork chatType) implements Packet<ClientGamePacketListener> {
     public ClientboundPlayerChatPacket(FriendlyByteBuf buf) {
@@ -31,4 +34,22 @@ public record ClientboundPlayerChatPacket(PlayerChatMessage message, ChatType.Bo
     public Optional<ChatType.Bound> resolveChatType(RegistryAccess dynamicRegistryManager) {
         return this.chatType.resolve(dynamicRegistryManager);
     }
+
+    // Martijn start - no signed chat
+
+    public static Packet<ClientGamePacketListener> createUnsigned(ServerPlayer player, PlayerChatMessage message, ChatType.BoundNetwork chatType) {
+        // Based on FreedomChat: ru.bk.oharass.freedomchat.FreedomChat.on(PlayerJoinEvent)
+        final Component content = message.unsignedContent().orElse(message.signedContent().decorated());
+
+        final Optional<ChatType.Bound> ctbo = chatType.resolve(player.level.registryAccess());
+        if (ctbo.isEmpty()) {
+            MinecraftServer.LOGGER.warn("Processing packet with unknown ChatType " + chatType.chatType(), new Throwable());
+            return new ClientboundPlayerChatPacket(message, chatType);
+        }
+        final Component decoratedContent = ctbo.orElseThrow().decorate(content);
+        return new ClientboundSystemChatPacket(decoratedContent, false);
+    }
+
+    // Martijn end - no signed chat
+
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 77c3be9c7a4719f1a45816195aabc0b1ea7074d1..7a1d6cefe885151e5849eaef740bb6ca7412ff37 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2306,10 +2306,11 @@ public class ServerPlayer extends Player {
     }
 
     public void sendChatHeader(SignedMessageHeader header, MessageSignature headerSignature, byte[] bodyDigest) {
-        if (this.acceptsChatMessages()) {
-            this.connection.send(new ClientboundPlayerChatHeaderPacket(header, headerSignature, bodyDigest));
-        }
-
+        // Martijn start - no signed chat
+//        if (this.acceptsChatMessages()) {
+//            this.connection.send(new ClientboundPlayerChatHeaderPacket(header, headerSignature, bodyDigest));
+//        }
+        // Martijn end - no signed chat
     }
 
     public String getIpAddress() {
@@ -2375,7 +2376,7 @@ public class ServerPlayer extends Player {
     }
 
     public void sendServerStatus(ServerStatus metadata) {
-        this.connection.send(new ClientboundServerDataPacket(metadata.getDescription(), metadata.getFavicon(), metadata.previewsChat(), metadata.enforcesSecureChat()));
+        this.connection.send(new ClientboundServerDataPacket(metadata.getDescription(), metadata.getFavicon(), false/*metadata.previewsChat()*/, true/*metadata.enforcesSecureChat()*/)); // Martijn - no signed chat
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 072df10d1488796abff4b2151f838b85ff12f329..06a9b15654fb1abd2dc1bb68b36234e53838a113 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1439,7 +1439,7 @@ public abstract class PlayerList {
         // Paper end
         boolean flag = this.verifyChatTrusted(message, sourceProfile);
 
-        this.server.logChatMessage((unsignedFunction == null ? message : message.withUnsignedContent(unsignedFunction.apply(this.server.console))).serverContent(), params, flag ? null : "Not Secure"); // Paper
+        this.server.logChatMessage((unsignedFunction == null ? message : message.withUnsignedContent(unsignedFunction.apply(this.server.console))).serverContent(), params, null); // Paper // Martijn - no signed chat
         OutgoingPlayerChatMessage outgoingplayerchatmessage = OutgoingPlayerChatMessage.create(message);
         boolean flag1 = message.isFullyFiltered();
         boolean flag2 = false;
