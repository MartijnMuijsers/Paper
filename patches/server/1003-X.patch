From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 3 Jul 2022 21:34:48 +0200
Subject: [PATCH] X


diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index b9be353c61e14d8a231b9ccc827d36b4777ddb65..b2ad92339a76dad0df0f263b866d25b523cf1d9a 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -12,6 +12,7 @@ import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
 import com.mojang.logging.LogUtils;
 import java.util.Iterator;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Predicate;
@@ -23,6 +24,7 @@ import net.minecraft.Util;
 import net.minecraft.commands.synchronization.ArgumentTypeInfos;
 import net.minecraft.commands.synchronization.ArgumentUtils;
 import net.minecraft.commands.synchronization.SuggestionProviders;
+import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.gametest.framework.TestCommand;
 import net.minecraft.network.chat.ClickEvent;
diff --git a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
index d36518504d6524e551abb2ee424b7133508934b2..0a15552af53d89ffae76e8ece84d6e001405d7cd 100644
--- a/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/item/ItemParser.java
@@ -26,7 +26,7 @@ import net.minecraft.world.item.Item;
 
 public class ItemParser {
     private static final SimpleCommandExceptionType ERROR_NO_TAGS_ALLOWED = new SimpleCommandExceptionType(Component.translatable("argument.item.tag.disallowed"));
-    private static final DynamicCommandExceptionType ERROR_UNKNOWN_ITEM = new DynamicCommandExceptionType((id) -> {
+    public static final DynamicCommandExceptionType ERROR_UNKNOWN_ITEM = new DynamicCommandExceptionType((id) -> { // Martijn - custom blocks and items
         return Component.translatable("argument.item.id.invalid", id);
     });
     private static final DynamicCommandExceptionType ERROR_UNKNOWN_TAG = new DynamicCommandExceptionType((tag) -> {
diff --git a/src/main/java/net/minecraft/server/commands/GiveCommand.java b/src/main/java/net/minecraft/server/commands/GiveCommand.java
index 06e3a868e922f1b7a586d0ca28f64a67ae463b68..9159f1ceceb71dd866ac2e6bc64240432d05bbbf 100644
--- a/src/main/java/net/minecraft/server/commands/GiveCommand.java
+++ b/src/main/java/net/minecraft/server/commands/GiveCommand.java
@@ -2,6 +2,7 @@ package net.minecraft.server.commands;
 
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.arguments.IntegerArgumentType;
+import com.mojang.brigadier.builder.ArgumentBuilder;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -19,6 +20,7 @@ import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
+import nl.martijnmuijsers.paper.command.CustomItemArgument;
 
 public class GiveCommand {
 
@@ -27,13 +29,23 @@ public class GiveCommand {
     public GiveCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext commandRegistryAccess) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("give").requires((commandlistenerwrapper) -> {
+        // Martijn start - custom blocks and items
+        var giveCommandWithTargets = ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("give").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
-        })).then(net.minecraft.commands.Commands.argument("targets", EntityArgument.players()).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("item", ItemArgument.item(commandRegistryAccess)).executes((commandcontext) -> {
+        })).then(net.minecraft.commands.Commands.argument("targets", EntityArgument.players()));
+        var vanillaGiveCommand = (LiteralArgumentBuilder) giveCommandWithTargets.then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("item", ItemArgument.item(commandRegistryAccess)).executes((commandcontext) -> {
             return GiveCommand.giveItem((CommandSourceStack) commandcontext.getSource(), ItemArgument.getItem(commandcontext, "item"), EntityArgument.getPlayers(commandcontext, "targets"), 1);
-        })).then(net.minecraft.commands.Commands.argument("count", IntegerArgumentType.integer(1)).executes((commandcontext) -> {
+        }))).then(net.minecraft.commands.Commands.argument("count", IntegerArgumentType.integer(1)).executes((commandcontext) -> {
             return GiveCommand.giveItem((CommandSourceStack) commandcontext.getSource(), ItemArgument.getItem(commandcontext, "item"), EntityArgument.getPlayers(commandcontext, "targets"), IntegerArgumentType.getInteger(commandcontext, "count"));
-        })))));
+        }));
+        var customGiveCommand = (LiteralArgumentBuilder) giveCommandWithTargets.then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("sucraft item", CustomItemArgument.item(commandRegistryAccess))).executes((commandcontext) -> {
+            return GiveCommand.giveItem((CommandSourceStack) commandcontext.getSource(), CustomItemArgument.getItem(commandcontext, "sucraft item"), EntityArgument.getPlayers(commandcontext, "targets"), 1);
+        })).then(net.minecraft.commands.Commands.argument("count", IntegerArgumentType.integer(1)).executes((commandcontext) -> {
+            return GiveCommand.giveItem((CommandSourceStack) commandcontext.getSource(), CustomItemArgument.getItem(commandcontext, "sucraft item"), EntityArgument.getPlayers(commandcontext, "targets"), IntegerArgumentType.getInteger(commandcontext, "count"));
+        }));
+        dispatcher.register(vanillaGiveCommand);
+        dispatcher.register(customGiveCommand);
+        // Martijn end - custom blocks and items
     }
 
     private static int giveItem(CommandSourceStack source, ItemInput item, Collection<ServerPlayer> targets, int count) throws CommandSyntaxException {
diff --git a/src/main/java/nl/martijnmuijsers/paper/command/CustomItemArgument.java b/src/main/java/nl/martijnmuijsers/paper/command/CustomItemArgument.java
new file mode 100644
index 0000000000000000000000000000000000000000..945fc050480b2e28598c393ec7a382d4b77b4161
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/command/CustomItemArgument.java
@@ -0,0 +1,60 @@
+package nl.martijnmuijsers.paper.command;
+
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.arguments.ArgumentType;
+import com.mojang.brigadier.context.CommandContext;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.exceptions.DynamicCommandExceptionType;
+import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import net.minecraft.commands.CommandBuildContext;
+import net.minecraft.commands.arguments.item.ItemArgument;
+import net.minecraft.commands.arguments.item.ItemInput;
+import net.minecraft.commands.arguments.item.ItemParser;
+import net.minecraft.core.HolderLookup;
+import net.minecraft.core.Registry;
+import net.minecraft.network.chat.Component;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.Item;
+import org.apache.commons.lang3.Validate;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.concurrent.CompletableFuture;
+
+public class CustomItemArgument implements ArgumentType<ResourceLocation> {
+
+    private static final Collection<String> EXAMPLES = Arrays.asList("snowy_stone_bricks", "sucraft:snowy_stone_bricks");
+    private final HolderLookup<Item> items;
+
+    public CustomItemArgument(CommandBuildContext commandRegistryAccess) {
+        this.items = commandRegistryAccess.holderLookup(Registry.ITEM_REGISTRY);
+    }
+
+    public static CustomItemArgument item(CommandBuildContext commandRegistryAccess) {
+        return new CustomItemArgument(commandRegistryAccess);
+    }
+
+    public static <S> ItemInput getItem(CommandContext<S> context, String name) {
+        return new ItemInput(Registry.ITEM.getHolderOrThrow(Registry.ITEM.getResourceKey(Registry.ITEM.get(context.getArgument(name, ResourceLocation.class))).get()), null);
+    }
+
+    public ResourceLocation parse(StringReader stringReader) throws CommandSyntaxException {
+        ResourceLocation location = ResourceLocation.read(stringReader);
+        try {
+            Validate.notNull(Registry.ITEM.getHolderOrThrow(Registry.ITEM.getResourceKey(Registry.ITEM.get(location)).get()));
+        } catch (Exception e) {
+            throw ItemParser.ERROR_UNKNOWN_ITEM.createWithContext(stringReader, location);
+        }
+        return location;
+    }
+
+    public <S> CompletableFuture<Suggestions> listSuggestions(CommandContext<S> commandContext, SuggestionsBuilder suggestionsBuilder) {
+        return ItemParser.fillSuggestions(this.items, suggestionsBuilder, false);
+    }
+
+    public Collection<String> getExamples() {
+        return EXAMPLES;
+    }
+
+}
