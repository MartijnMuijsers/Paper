From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 28 Jun 2022 00:40:09 +0200
Subject: [PATCH] X


diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
index 78db7a5c1da164ee0c134d1a1ef50d9e73690578..3cda0b29f3b56188d7b671ed55e9d52bfff1a1f2 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
@@ -27,7 +27,7 @@ public class ChunkPacketBlockController {
         return false;
     }
 
-    public ChunkPacketInfo<BlockState> getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk) {
+    public ChunkPacketInfo<BlockState> getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk, boolean doesPlayerHaveResourcePack) { // Martijn - custom blocks and items
         return null;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
index 13262d4e31d4bfd1a0dbc15b9a10ce0569fabdee..7c689bd7bf81cdd04b516ff31d6e92dcca3965e5 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
@@ -8,12 +8,16 @@ import nl.martijnmuijsers.paper.antixray.ChunkPacketBlockControllerModifier;
 
 public final class ChunkPacketInfoAntiXray extends ChunkPacketInfo<BlockState> implements Runnable {
 
-    private final ChunkPacketBlockControllerModifier chunkPacketBlockControllerAntiXray; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private final ChunkPacketBlockControllerModifier chunkPacketBlockControllerAntiXray;
+    private final boolean doesPlayerHaveResourcePack;
+    // Martijn end - custom blocks and items
     private LevelChunk[] nearbyChunks;
 
-    public ChunkPacketInfoAntiXray(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk, ChunkPacketBlockControllerModifier chunkPacketBlockControllerAntiXray) { // Martijn - custom blocks and items
+    public ChunkPacketInfoAntiXray(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk, ChunkPacketBlockControllerModifier chunkPacketBlockControllerAntiXray, boolean doesPlayerHaveResourcePack) { // Martijn - custom blocks and items
         super(chunkPacket, chunk);
         this.chunkPacketBlockControllerAntiXray = chunkPacketBlockControllerAntiXray;
+        this.doesPlayerHaveResourcePack = doesPlayerHaveResourcePack;
     }
 
     public LevelChunk[] getNearbyChunks() {
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 2e8b6073bcc80a0927da8a6bd906e11b5ffdd144..6ca8e0fc698870b88eef889337586c0f2b518a8c 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -338,11 +338,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         if (player == null) {
             return false;
         }
-        var bukkitPlayer = player.getBukkitEntity();
-        if (bukkitPlayer == null) {
-            return false;
-        }
-        return bukkitPlayer.hasSuCraftResourcePack();
+        return player.hasSuCraftResourcePack();
     }
 
     // Martijn end - custom blocks and items
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index 9423375fb5a7adb40cdff5558bc8bfab9b554d9f..4ee273f57b77c1f9eb1b6e8464ff51b3e7677d30 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -193,4 +193,18 @@ public class ClientboundLevelChunkPacketData {
         void accept(BlockPos pos, BlockEntityType<?> type, @Nullable CompoundTag nbt);
     }
 
+    // Martijn start - custom blocks and items
+
+//    /**
+//     * Replaces any custom blocks or items in this packet will their intended replacement, based
+//     * on whether a player has accepted the resource pack.
+//     *
+//     * The replacement is performed in-place.
+//     */
+//    default void replaceCustomContent(boolean hasResourcePack) {
+//
+//    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
index 294d03d788dd325735104ad38a2f309731c558b2..3accc8b96e41e711946419f0e966040d53b60382 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
@@ -28,9 +28,11 @@ public class ClientboundLevelChunkWithLightPacket implements Packet<ClientGamePa
     // Paper end
 
     // Paper start - Anti-Xray - Add chunk packet info
-    @Deprecated public ClientboundLevelChunkWithLightPacket(LevelChunk chunk, LevelLightEngine lightProvider, @Nullable BitSet skyBits, @Nullable BitSet blockBits, boolean nonEdge) { this(chunk, lightProvider, skyBits, blockBits, nonEdge, true); } // Notice for updates: Please make sure this constructor isn't used anywhere
-    public ClientboundLevelChunkWithLightPacket(LevelChunk chunk, LevelLightEngine lightProvider, @Nullable BitSet skyBits, @Nullable BitSet blockBits, boolean nonEdge, boolean modifyBlocks) {
-        com.destroystokyo.paper.antixray.ChunkPacketInfo<net.minecraft.world.level.block.state.BlockState> chunkPacketInfo = modifyBlocks ? chunk.getLevel().chunkPacketBlockController.getChunkPacketInfo(this, chunk) : null;
+    // Martijn start - custom blocks and items
+    @Deprecated public ClientboundLevelChunkWithLightPacket(LevelChunk chunk, LevelLightEngine lightProvider, @Nullable BitSet skyBits, @Nullable BitSet blockBits, boolean nonEdge, boolean doesPlayerHaveResourcePack) { this(chunk, lightProvider, skyBits, blockBits, nonEdge, true, doesPlayerHaveResourcePack); } // Notice for updates: Please make sure this constructor isn't used anywhere
+    public ClientboundLevelChunkWithLightPacket(LevelChunk chunk, LevelLightEngine lightProvider, @Nullable BitSet skyBits, @Nullable BitSet blockBits, boolean nonEdge, boolean modifyBlocks, boolean doesPlayerHaveResourcePack) {
+        com.destroystokyo.paper.antixray.ChunkPacketInfo<net.minecraft.world.level.block.state.BlockState> chunkPacketInfo = modifyBlocks ? chunk.getLevel().chunkPacketBlockController.getChunkPacketInfo(this, chunk, doesPlayerHaveResourcePack) : null;
+        // Martijn end - custom blocks and items
         ChunkPos chunkPos = chunk.getPos();
         this.x = chunkPos.x;
         this.z = chunkPos.z;
@@ -83,4 +85,14 @@ public class ClientboundLevelChunkWithLightPacket implements Packet<ClientGamePa
     }
     // Paper end
 
+    // Martijn start - custom blocks and items
+
+//    @Override
+//    public @NotNull ClientboundLevelChunkWithLightPacket replaceCustomContent(boolean hasResourcePack) {
+//        chunkData.replaceCustomContent(hasResourcePack);
+//        return this;
+//    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 94a96e5f85334b46261e2960ca2fec6c8c4bdd43..959af26e523eec92fbe3c4d1d71eb7fb97e16d8e 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -107,6 +107,7 @@ import net.minecraft.world.level.storage.LevelStorageSource;
 import it.unimi.dsi.fastutil.objects.ObjectRBTreeSet; // Paper
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
 import org.bukkit.entity.Player;
@@ -1699,7 +1700,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
     // Paper end - replace player loader system
 
-    public void updateChunkTracking(ServerPlayer player, ChunkPos pos, MutableObject<java.util.Map<Object, ClientboundLevelChunkWithLightPacket>> packet, boolean oldWithinViewDistance, boolean newWithinViewDistance, boolean concernsTracking) { // Paper - Anti-Xray - Bypass // Paper - public // Martijn - per-player track and see view distance
+    public void updateChunkTracking(ServerPlayer player, ChunkPos pos, MutableObject<java.util.Map<ImmutablePair<Boolean, Boolean>, ClientboundLevelChunkWithLightPacket>> packet, boolean oldWithinViewDistance, boolean newWithinViewDistance, boolean concernsTracking) { // Paper - Anti-Xray - Bypass // Paper - public // Martijn - per-player track and see view distance // Martijn - custom blocks and items
         if (player.level == this.level) {
             if (newWithinViewDistance && !oldWithinViewDistance) {
                 ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos.toLong());
@@ -2250,14 +2251,17 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     // Paper start - Anti-Xray - Bypass
-    private void playerLoadedChunk(ServerPlayer player, MutableObject<java.util.Map<Object, ClientboundLevelChunkWithLightPacket>> cachedDataPackets, LevelChunk chunk, boolean concernsTracking) { // Martijn - per-player track and see view distance
+    private void playerLoadedChunk(ServerPlayer player, MutableObject<java.util.Map<ImmutablePair<Boolean, Boolean>, ClientboundLevelChunkWithLightPacket>> cachedDataPackets, LevelChunk chunk, boolean concernsTracking) { // Martijn - per-player track and see view distance // Martijn - custom blocks and items
         if (cachedDataPackets.getValue() == null) {
             cachedDataPackets.setValue(new java.util.HashMap<>());
         }
 
         Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
-        player.trackChunk(chunk.getPos(), cachedDataPackets.getValue().computeIfAbsent(shouldModify, (s) -> {
-            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, true, (Boolean) s);
+        // Martijn start - custom blocks and items
+        boolean hasResourcePack = player.hasSuCraftResourcePack();
+        player.trackChunk(chunk.getPos(), cachedDataPackets.getValue().computeIfAbsent(new ImmutablePair<>(shouldModify, hasResourcePack), (s) -> {
+            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, true, s.left, s.right);
+            // Martijn end - custom blocks and items
         }), concernsTracking);
         // Paper end
         DebugPackets.sendPoiPacketsForChunk(this.level, chunk.getPos());
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index cebf8782b35bdaadae3d7feef1ffd8faf169b23a..3c8c0cc28ab28acc5700fffb9ebd57f898940083 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2914,4 +2914,17 @@ public class ServerPlayer extends Player {
     // CraftBukkit end
 
     public final int getViewDistance() { throw new UnsupportedOperationException("Use PlayerChunkLoader"); } // Paper - placeholder
+
+    // Martijn start - custom blocks and items
+
+    public boolean hasSuCraftResourcePack() {
+        var bukkitPlayer = getBukkitEntity();
+        if (bukkitPlayer == null) {
+            return false;
+        }
+        return bukkitPlayer.hasSuCraftResourcePack();
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index def57a2f44bf20c06b161f144e1122ad0ba4b705..be387aaca1e88bf4506ea1fea6cda9dd1b00bddd 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -427,7 +427,7 @@ public abstract class PlayerList {
                 .getHolderOrThrow(net.minecraft.world.level.biome.Biomes.PLAINS);
             player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket(
                 new net.minecraft.world.level.chunk.EmptyLevelChunk(worldserver1, player.chunkPosition(), plains),
-                worldserver1.getLightEngine(), null, null, true, false)
+                worldserver1.getLightEngine(), null, null, true, false, player.hasSuCraftResourcePack()) // Martijn - custom blocks and items
             );
         }
         // Paper end
diff --git a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java
index f61d1988fe97941aa53fc62a58776af21e0a3773..a999977bca8485e400745423c4288f092f980ace 100644
--- a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java
+++ b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java
@@ -27,10 +27,13 @@ import net.minecraft.world.level.block.EntityBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.EmptyLevelChunk;
 import net.minecraft.world.level.chunk.GlobalPalette;
+import net.minecraft.world.level.chunk.HashMapPalette;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
+import net.minecraft.world.level.chunk.LinearPalette;
 import net.minecraft.world.level.chunk.MissingPaletteEntryException;
 import net.minecraft.world.level.chunk.Palette;
+import net.minecraft.world.level.chunk.SingleValuePalette;
 import org.bukkit.Bukkit;
 import org.spongepowered.configurate.serialize.ScalarSerializer;
 import org.spongepowered.configurate.serialize.SerializationException;
@@ -63,6 +66,19 @@ public final class ChunkPacketBlockControllerCustom extends ChunkPacketBlockCont
         replaceCustom(chunkPacketInfoAntiXray);
     }
 
+    // Temporary only
+    static int replacementFor(int stateRegistryId) {
+        BlockState state = Block.BLOCK_STATE_REGISTRY.byId(stateRegistryId);
+        if (state.is(Blocks.STONE)) {
+            return Block.BLOCK_STATE_REGISTRY.getId(Blocks.DIRT.defaultBlockState());
+        } else if (state.is(Blocks.DIRT)) {
+            return Block.BLOCK_STATE_REGISTRY.getId(Blocks.OAK_LOG.defaultBlockState());
+        } else if (state.is(Blocks.ACACIA_LEAVES)) {
+            return Block.BLOCK_STATE_REGISTRY.getId(Blocks.RED_WOOL.defaultBlockState())
+        }
+        return stateRegistryId;
+    }
+
     public static void replaceCustom(ChunkPacketInfoAntiXray chunkPacketInfoAntiXray) {
         // bitStorageReader, bitStorageWriter and nearbyChunkSections could also be reused (with ThreadLocal if necessary) but it's not worth it
         BitStorageReader bitStorageReader = new BitStorageReader();
@@ -75,29 +91,45 @@ public final class ChunkPacketBlockControllerCustom extends ChunkPacketBlockCont
         bitStorageWriter.setBuffer(chunkPacketInfoAntiXray.getBuffer());
 
         for (int chunkSectionIndex = 0; chunkSectionIndex < sectionsCount; chunkSectionIndex++) {
-            MinecraftServer.LOGGER.info(chunkPacketInfoAntiXray.isWritten(chunkSectionIndex) + " --- " + (chunkPacketInfoAntiXray.getPresetValues(chunkSectionIndex) != null));
             if (chunkPacketInfoAntiXray.isWritten(chunkSectionIndex)) {
 
-                bitStorageReader.setBits(chunkPacketInfoAntiXray.getBits(chunkSectionIndex));
-                bitStorageReader.setIndex(chunkPacketInfoAntiXray.getIndex(chunkSectionIndex));
-                bitStorageWriter.setBits(chunkPacketInfoAntiXray.getBits(chunkSectionIndex));
-                bitStorageWriter.setIndex(chunkPacketInfoAntiXray.getIndex(chunkSectionIndex));
-
-                // Modify all layers of the current chunk section
-                for (int y = 0; y < 16; y++) {
-                    for (int x = 0; x < 16; x++) {
-                        for (int z = 0; z < 16; z++) {
-                            int bits = bitStorageReader.read();
-                            // TODO change
-                            // temporary test
-                            if (bits != 0) {
-                                bits = 1;
-                            }
-                            bitStorageWriter.write(bits);
+                var palette = chunkPacketInfoAntiXray.getPalette(chunkSectionIndex);
+                if (palette instanceof GlobalPalette<BlockState>) {
+                    throw new IllegalStateException("Palette is not allowed to be GlobalPalette, because it contains custom blocks");
+                } else if (palette instanceof LinearPalette<BlockState> linearPalette) {
+
+                } else if (palette instanceof HashMapPalette<BlockState> hashMapPalette) {
+                    hashMapPalette.getEntries()
+                } else if (palette instanceof SingleValuePalette<BlockState> singleValuePalette) {
+                    int value = Block.BLOCK_STATE_REGISTRY.getId(singleValuePalette.valueFor(0));
+                    int replacementValue = replacementFor(value);
+                    if (value != replacementValue) {
+                        chunkPacketInfoAntiXray.setPalette(chunkSectionIndex, SingleValuePalette.create(singleValuePalette.getSize()))
+                    }
+                } else {
+                    throw new IllegalStateException("Unknown palette type: " + palette.getClass().getName());
+                }
+
+                replacementsNeeded = false;
+
+                if (replacementsNeeded) {
+                    bitStorageReader.setBits(chunkPacketInfoAntiXray.getBits(chunkSectionIndex));
+                    bitStorageReader.setIndex(chunkPacketInfoAntiXray.getIndex(chunkSectionIndex));
+                    bitStorageWriter.setBits(chunkPacketInfoAntiXray.getBits(chunkSectionIndex));
+                    bitStorageWriter.setIndex(chunkPacketInfoAntiXray.getIndex(chunkSectionIndex));
+
+                    // Modify all layers of the current chunk section
+                    for (int xyz = 0; xyz < 4096/* = 16*16*16 */; xyz++) {
+                        int bits = bitStorageReader.read();
+                        // TODO change
+                        // temporary test
+                        if (bits != 0) {
+                            bits = 1;
                         }
+                        bitStorageWriter.write(bits);
                     }
+                    bitStorageWriter.flush();
                 }
-                bitStorageWriter.flush();
             }
         }
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java
index d74ce7ebb85a2bcac532f5b00468f507c0a2cc56..4c35a3e8ff7eb63018b173e495f3cb5022cc2c4b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java
+++ b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java
@@ -67,9 +67,9 @@ public abstract class ChunkPacketBlockControllerModifierBase extends ChunkPacket
     public abstract void obfuscateInternal(ChunkPacketInfoAntiXray chunkPacketInfoAntiXray);
 
     @Override
-    public ChunkPacketInfoAntiXray getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk) {
+    public ChunkPacketInfoAntiXray getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk, boolean doesPlayerHaveResourcePack) {
         // Return a new instance to collect data and objects in the right state while creating the chunk packet for thread safe access later
-        return new ChunkPacketInfoAntiXray(chunkPacket, chunk, this);
+        return new ChunkPacketInfoAntiXray(chunkPacket, chunk, this, doesPlayerHaveResourcePack);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 50d8c6d75e3ab4d1109e591091438f01e7ae64af..9bb7fc289e4992d0f7f44f4992b179f321eee3db 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -6,6 +6,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import io.papermc.paper.configuration.GlobalConfiguration;
 import io.papermc.paper.world.structure.ConfiguredStructure;
+import it.unimi.dsi.fastutil.Pair;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -67,6 +68,7 @@ import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import nl.martijnmuijsers.paper.structure.WorldStructure;
 import org.apache.commons.lang.Validate;
+import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.bukkit.BlockChangeDelegate;
 import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
@@ -539,13 +541,16 @@ public class CraftWorld extends CraftRegionAccessor implements World {
                 if (playersInRange.isEmpty()) return;
 
                 // Paper start - Anti-Xray - Bypass
-                Map<Object, ClientboundLevelChunkWithLightPacket> refreshPackets = new HashMap<>();
+                Map<ImmutablePair<Boolean, Boolean>, ClientboundLevelChunkWithLightPacket> refreshPackets = new HashMap<>(); // Martijn - custom blocks and items
                 for (ServerPlayer player : playersInRange) {
                     if (player.connection == null) continue;
 
                     Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
-                    player.connection.send(refreshPackets.computeIfAbsent(shouldModify, s -> { // Use connection to prevent creating firing event
-                        return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, true, (Boolean) s);
+                    // Martijn start - custom blocks and items
+                    boolean hasResourcePack = player.hasSuCraftResourcePack();
+                    player.connection.send(refreshPackets.computeIfAbsent(new ImmutablePair<>(shouldModify, hasResourcePack), s -> { // Use connection to prevent creating firing event
+                        return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, true, s.left, s.right);
+                        // Martijn end - custom blocks and items
                     }));
                     // Paper end
                 }
