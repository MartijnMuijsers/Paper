From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 29 Jun 2022 12:35:40 +0200
Subject: [PATCH] Item translation works


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 6ca8e0fc698870b88eef889337586c0f2b518a8c..8e6acb8d6abd5ecfed6b0a72e68ea6320e08fc17 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -40,6 +40,7 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.network.ServerLoginPacketListenerImpl;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
index 6934b789294d50721caa9aa870c83d16a5ca2a98..9c365f5e2690d4550aa5d9c74e3e2773b5584424 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
@@ -7,11 +7,14 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import javax.annotation.Nullable;
+
 public class ClientboundContainerSetContentPacket implements Packet<ClientGamePacketListener> {
     private final int containerId;
     private final int stateId;
     private final List<ItemStack> items;
-    private ItemStack carriedItem; // Martijn - custom blocks and items
+    private final ItemStack carriedItem;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundContainerSetContentPacket(int syncId, int revision, NonNullList<ItemStack> contents, ItemStack cursorStack) {
         this.containerId = syncId;
@@ -75,20 +78,15 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
 
     @Override
     public @NotNull ClientboundContainerSetContentPacket replaceCustomContent(boolean hasResourcePack) {
-        for (int i = 0; i < this.items.size(); i++) {
-            ItemStack item = this.items.get(i);
-            var replacementRule = item.getItem().replacementRule;
-            if (replacementRule != null) {
-                this.items.set(i, replacementRule.replace(item, hasResourcePack));
-            }
-        }
-        var replacementRule = this.carriedItem.getItem().replacementRule;
-        if (replacementRule != null) {
-            this.carriedItem = replacementRule.replace(this.carriedItem, hasResourcePack);
-        }
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
         return this;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
index 4bea38905db11f4fd49a48926a65d7dc5ed8abf9..ae5f670d7ef1f1a482a6e3429f2213dff2270be8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
@@ -5,13 +5,16 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import javax.annotation.Nullable;
+
 public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacketListener> {
     public static final int CARRIED_ITEM = -1;
     public static final int PLAYER_INVENTORY = -2;
     private final int containerId;
     private final int stateId;
     private final int slot;
-    private ItemStack itemStack; // Martijn - custom blocks and items
+    private final ItemStack itemStack;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundContainerSetSlotPacket(int syncId, int revision, int slot, ItemStack stack) {
         this.containerId = syncId;
@@ -60,13 +63,15 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
 
     @Override
     public @NotNull ClientboundContainerSetSlotPacket replaceCustomContent(boolean hasResourcePack) {
-        var replacementRule = this.itemStack.getItem().replacementRule;
-        if (replacementRule != null) {
-            this.itemStack = replacementRule.replace(this.itemStack, hasResourcePack);
-        }
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
         return this;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
index dc31aa80ead5765e0b8cc63aa890966ab0bf94a4..e9a0730ad565fb00cdfa82f5a5cd7fdebfcfed9e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
@@ -3,6 +3,9 @@ package net.minecraft.network.protocol.game;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.item.trading.MerchantOffers;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
 
 public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketListener> {
     private final int containerId;
@@ -11,6 +14,7 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     private final int villagerXp;
     private final boolean showProgress;
     private final boolean canRestock;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundMerchantOffersPacket(int syncId, MerchantOffers recipes, int levelProgress, int experience, boolean leveled, boolean refreshable) {
         this.containerId = syncId;
@@ -68,4 +72,20 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     public boolean canRestock() {
         return this.canRestock;
     }
+
+    // Martijn start - custom blocks and items
+
+    @Override
+    public @NotNull ClientboundMerchantOffersPacket replaceCustomContent(boolean hasResourcePack) {
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        return this;
+    }
+
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 3e17f6131bf590d7c4a16b79c1c145cb4f565bc9..bcb7128942e4c21ae86d38ded369b5a54644f6e2 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -5,11 +5,13 @@ import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.syncher.SynchedEntityData;
+import org.jetbrains.annotations.NotNull;
 
 public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketListener> {
     private final int id;
     @Nullable
     private final List<SynchedEntityData.DataItem<?>> packedItems;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundSetEntityDataPacket(int id, SynchedEntityData tracker, boolean forceUpdateAll) {
         this.id = id;
@@ -46,4 +48,20 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
     public int getId() {
         return this.id;
     }
+
+    // Martijn start - custom blocks and items
+
+    @Override
+    public @NotNull ClientboundSetEntityDataPacket replaceCustomContent(boolean hasResourcePack) {
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        return this;
+    }
+
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
index 5a8f850b447fc3a4bd0eb0c505bbdfc8be7115e8..ee192354da1d257407f6f1131a1b4a0a56bb0bcc 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
@@ -7,11 +7,15 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.item.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
 
 public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketListener> {
     private static final byte CONTINUE_MASK = -128;
     private final int entity;
     private final List<Pair<EquipmentSlot, ItemStack>> slots;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundSetEquipmentPacket(int id, List<Pair<EquipmentSlot, ItemStack>> equipmentList) {
         this.entity = id;
@@ -61,4 +65,20 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
     public List<Pair<EquipmentSlot, ItemStack>> getSlots() {
         return this.slots;
     }
+
+    // Martijn start - custom blocks and items
+
+    @Override
+    public @NotNull ClientboundSetEquipmentPacket replaceCustomContent(boolean hasResourcePack) {
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        return this;
+    }
+
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
index 053a66d714168f5e8a7cc5ff532190e80de887ca..3b9f109f8fe1e8d00113ccb9234b6e0d81b448d1 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
@@ -11,12 +11,16 @@ import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
 
 public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePacketListener> {
     private final boolean reset;
     private final Map<ResourceLocation, Advancement.Builder> added;
     private final Set<ResourceLocation> removed;
     private final Map<ResourceLocation, AdvancementProgress> progress;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundUpdateAdvancementsPacket(boolean clearCurrent, Collection<Advancement> toEarn, Set<ResourceLocation> toRemove, Map<ResourceLocation, AdvancementProgress> toSetProgress) {
         this.reset = clearCurrent;
@@ -70,4 +74,20 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     public boolean shouldReset() {
         return this.reset;
     }
+
+    // Martijn start - custom blocks and items
+
+    @Override
+    public @NotNull ClientboundUpdateAdvancementsPacket replaceCustomContent(boolean hasResourcePack) {
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        return this;
+    }
+
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index 18400a160cb3ba4f9e4734913c253e023c815bca..f2b46382b2414735e4c42a85ba4e5fb582311404 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -9,9 +9,13 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeSerializer;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
 
 public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketListener> {
     private final List<Recipe<?>> recipes;
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
 
     public ClientboundUpdateRecipesPacket(Collection<Recipe<?>> recipes) {
         this.recipes = Lists.newArrayList(recipes);
@@ -52,14 +56,16 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundContainerSetSlotPacket replaceCustomContent(boolean hasResourcePack) {
-        var replacementRule = this.itemStack.getItem().replacementRule;
-        if (replacementRule != null) {
-            this.itemStack = replacementRule.replace(this.itemStack, hasResourcePack);
-        }
+    public @NotNull ClientboundUpdateRecipesPacket replaceCustomContent(boolean hasResourcePack) {
+        this.doesNetworkTargetHaveResourcePack = hasResourcePack;
         return this;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack() {
+        return this.doesNetworkTargetHaveResourcePack;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index 77a94f54fae6c11584de5425bb4d9d0ffe217bb5..3ced1c6b1b0d66432f402dc12f5ea3c3ae3993bb 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -39,6 +39,7 @@ public class SuCraftBlocks {
     }
 
     public static Block bootstrap() {
+        SNOWY_STONE_BRICKS.toString();
         return SNOWY_STONE_BRICKS;
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index 15e9bd86c9a91f110c322ec2e3947d75c864cb4b..adeb08b1302798643b55b4f5ab5ed187de0f203b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -3,6 +3,7 @@ package nl.martijnmuijsers.paper.item;
 import it.unimi.dsi.fastutil.objects.Object2IntFunction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.StringTag;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -102,7 +103,7 @@ public interface ItemReplacementRule {
 
         @Override
         public @Nullable ItemStack replace(@NotNull ItemStack item, boolean hasResourcePack) {
-            if (item.is(this.real)) {
+            if (item.is(this.getReal())) {
                 @NotNull ItemStack clone = item.copy();
                 CompoundTag tag = clone.getOrCreateTag();
                 if (hasResourcePack) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 7c0165cce8cbe56ec5c35796af2b8543885c2bd3..7de706a5c4c6c8e7951b3ea8365e193bb0591f18 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -2,11 +2,16 @@
 
 package nl.martijnmuijsers.paper.item;
 
+import io.papermc.paper.adventure.PaperAdventure;
+import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.TextDecoration;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.kyori.examination.Examinable;
 import net.minecraft.core.Registry;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.item.Items;
 import nl.martijnmuijsers.paper.block.SuCraftBlocks;
@@ -25,13 +30,13 @@ public class SuCraftItems {
         Item registeredItem = Items.registerBlock(block, group);
         registeredItem.isVanilla = false;
         registeredItem.replacementRule = ItemReplacementRule.simple().withReal(registeredItem).forBlock(block).build();
-        registeredItem.customDisplayName = net.kyori.adventure.text.Component.text(displayName).decoration(TextDecoration.ITALIC, false);
-        registeredItem.customDisplayNameJSON = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(registeredItem.customDisplayName);
+        registeredItem.customDisplayName = Component.text(displayName, PaperAdventure.asAdventure(registeredItem.rarity.color)).decoration(TextDecoration.ITALIC, false);
+        registeredItem.customDisplayNameJSON = GsonComponentSerializer.gson().serialize(registeredItem.customDisplayName);
         return registeredItem;
     }
 
     public static Item bootstrap() {
-        return SNOWY_STONE_BRICKS;
+        return SNOWY_STONE_BRICKS.asItem();
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftJustInTimeItemTranslation.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftJustInTimeItemTranslation.java
deleted file mode 100644
index 36d4e3080afc150b589ff87c2a7b32ec9e7f7fa7..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftJustInTimeItemTranslation.java
+++ /dev/null
@@ -1,9 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.item;
-
-public class SuCraftJustInTimeItemTranslation {
-
-
-
-}
