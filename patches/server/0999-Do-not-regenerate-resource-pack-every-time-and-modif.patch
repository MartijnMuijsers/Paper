From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 3 Jul 2022 00:48:47 +0200
Subject: [PATCH] Do not regenerate resource pack every time, and modify
 resource pack name


diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 2dcff263b8f6733c48ee5f632b39e50c2e5b3c3b..a922cefe157d505cb3aab090e885291c9428e639 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -18,9 +18,16 @@ import nl.martijnmuijsers.paper.resourcepack.readfromarchive.ReadFromArchiveReso
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
 import java.nio.file.Path;
+import java.util.Random;
 
 /**
  * Utility class to create and write the server resource pack.
@@ -29,6 +36,8 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
+    private static final int currentResourcePackVersion = 1;
+
     public static final int RESOURCE_PACK_FORMAT = 9;
 
     public static final String INPUT_TEXTURES_FOLDER_PATH = "resourcepack/input/textures";
@@ -40,15 +49,51 @@ public final class CreateSuCraftResourcePack {
 
     private static final String OUTPUT_FOLDER_PATH = "resourcepack/output";
 
+    private static final String LAST_RESOURCE_PACK_VERSION_FILE_PATH = OUTPUT_FOLDER_PATH + "/last_resource_pack_version.txt";
+
+    /**
+     * Only null while not initialized
+     */
+    private static @Nullable String outputFilePath;
+
     public static @NotNull File getOutputFile() throws IOException {
-        @NotNull File folder = new File(OUTPUT_FOLDER_PATH);
-        if (!folder.isDirectory()) {
-            throw new IOException("CreateSuCraftResourcePack.OUTPUT_FOLDER_PATH does not point to a folder");
+        if (outputFilePath == null) {
+            @NotNull File folder = new File(OUTPUT_FOLDER_PATH);
+            if (!folder.isDirectory()) {
+                throw new IOException("CreateSuCraftResourcePack.OUTPUT_FOLDER_PATH does not point to a folder");
+            }
+            StringBuilder randomSuffix = new StringBuilder();
+            Random random = new Random(currentResourcePackVersion * 17 + currentResourcePackVersion * currentResourcePackVersion + 13371 + 17922347);
+            for (int i = 0; i < 10; i++) {
+                int randomCharacter = random.nextInt(62);
+                if (randomCharacter < 26) {
+                    randomSuffix.append((char) (randomCharacter + 'a'));
+                } else if (randomCharacter < 52) {
+                    randomSuffix.append((char) (randomCharacter - 26 + 'A'));
+                } else {
+                    randomSuffix.append((char) (randomCharacter - 52 + '0'));
+                }
+            }
+            outputFilePath = Path.of(OUTPUT_FOLDER_PATH, NAME + "-" + randomSuffix + ".zip").toString();
         }
-        return Path.of(OUTPUT_FOLDER_PATH, NAME + ".zip").toFile();
+        return new File(outputFilePath);
     }
 
     public static void createAndWrite() {
+        File lastResourcePackVersionFile = new File(LAST_RESOURCE_PACK_VERSION_FILE_PATH);
+        if (lastResourcePackVersionFile.exists()) {
+            try (FileInputStream fileInputStream = new FileInputStream(lastResourcePackVersionFile)) {
+                try (BufferedReader reader = new BufferedReader(new InputStreamReader(fileInputStream))) {
+                    int lastResourcePackVersion = Integer.parseInt(reader.readLine());
+                    if (lastResourcePackVersion == currentResourcePackVersion) {
+                        MinecraftServer.LOGGER.info("Skipping creating server resource pack because it is up-to-date (version " + currentResourcePackVersion + ")");
+                        return;
+                    }
+                }
+            } catch (Exception e) {
+                throw new RuntimeException("Exception occurred while checking last resource pack version", e);
+            }
+        }
         MinecraftServer.LOGGER.info("Creating server resource pack...");
         try {
 
@@ -81,9 +126,25 @@ public final class CreateSuCraftResourcePack {
                     }
                 }
 
+                // Delete old resource pack files
+                for (File file : new File(OUTPUT_FOLDER_PATH).listFiles()) {
+                    if (file.getName().endsWith(".zip")) {
+                        file.delete();
+                    }
+                }
+
                 // Write the resource pack to the output file
                 resourcePack.writeToFile(getOutputFile());
 
+                // Write the resource pack version to the file
+                try (FileOutputStream fileOutputStream = new FileOutputStream(LAST_RESOURCE_PACK_VERSION_FILE_PATH)) {
+                    try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(fileOutputStream))) {
+                        writer.write(currentResourcePackVersion + "\n");
+                    }
+                } catch (Exception e) {
+                    throw new RuntimeException("Exception occurred while writing new resource pack version to file", e);
+                }
+
             } finally {
 
                 // Close all opened inherited resource packs
