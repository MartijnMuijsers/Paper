From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Fri, 8 Jul 2022 00:59:30 +0200
Subject: [PATCH] Add pillars


diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index dc6678d8df73bce6a7b33b95324af2a3886a982a..51301215bbfe36c5171d3d2a266d2d8655af8a69 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -4,10 +4,12 @@ package nl.martijnmuijsers.paper.block;
 
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.InfestedBlock;
+import net.minecraft.world.level.block.RotatedPillarBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.material.Material;
@@ -46,22 +48,22 @@ public class SuCraftBlocks {
     public static final Block WARPED_BOOKSHELF = registerBookshelf("warped");
     public static final Block CRIMSON_BOOKSHELF = registerBookshelf("crimson");
 //    public static final Block MANGROVE_BOOKSHELF = registerBookshelf("mangrove");
-    public static final Block BLACK_PLANKS = registerPlanks("black", Blocks.DARK_OAK_PLANKS);
-    public static final Block BLUE_PLANKS = registerPlanks("blue", Blocks.WARPED_PLANKS);
-    public static final Block BROWN_PLANKS = registerPlanks("brown", Blocks.SPRUCE_PLANKS);
-    public static final Block CYAN_PLANKS = registerPlanks("cyan", Blocks.WARPED_PLANKS);
-    public static final Block GRAY_PLANKS = registerPlanks("gray", Blocks.SPRUCE_PLANKS);
-    public static final Block GREEN_PLANKS = registerPlanks("green", Blocks.WARPED_PLANKS);
-    public static final Block LIGHT_BLUE_PLANKS = registerPlanks("light_blue", Blocks.WARPED_PLANKS);
-    public static final Block LIGHT_GRAY_PLANKS = registerPlanks("light_gray", Blocks.OAK_PLANKS);
-    public static final Block LIME_PLANKS = registerPlanks("lime", Blocks.WARPED_PLANKS);
-    public static final Block MAGENTA_PLANKS = registerPlanks("magenta", Blocks.CRIMSON_PLANKS);
-    public static final Block ORANGE_PLANKS = registerPlanks("orange", Blocks.ACACIA_PLANKS);
-    public static final Block PINK_PLANKS = registerPlanks("pink", Blocks.JUNGLE_PLANKS);
-    public static final Block PURPLE_PLANKS = registerPlanks("purple", Blocks.CRIMSON_PLANKS);
-    public static final Block RED_PLANKS = registerPlanks("red", Blocks.MANGROVE_PLANKS);
-    public static final Block WHITE_PLANKS = registerPlanks("white", Blocks.BIRCH_PLANKS);
-    public static final Block YELLOW_PLANKS = registerPlanks("yellow", Blocks.BIRCH_PLANKS);
+    public static final Block BLACK_PLANKS = registerPlanks("black", Blocks.DARK_OAK_PLANKS, DyeColor.BLACK.getMaterialColor());
+    public static final Block BLUE_PLANKS = registerPlanks("blue", Blocks.WARPED_PLANKS, DyeColor.BLUE.getMaterialColor());
+    public static final Block BROWN_PLANKS = registerPlanks("brown", Blocks.SPRUCE_PLANKS, DyeColor.BROWN.getMaterialColor());
+    public static final Block CYAN_PLANKS = registerPlanks("cyan", Blocks.WARPED_PLANKS, DyeColor.CYAN.getMaterialColor());
+    public static final Block GRAY_PLANKS = registerPlanks("gray", Blocks.SPRUCE_PLANKS, DyeColor.GRAY.getMaterialColor());
+    public static final Block GREEN_PLANKS = registerPlanks("green", Blocks.WARPED_PLANKS, DyeColor.GREEN.getMaterialColor());
+    public static final Block LIGHT_BLUE_PLANKS = registerPlanks("light_blue", Blocks.WARPED_PLANKS, DyeColor.LIGHT_BLUE.getMaterialColor());
+    public static final Block LIGHT_GRAY_PLANKS = registerPlanks("light_gray", Blocks.OAK_PLANKS, DyeColor.LIGHT_GRAY.getMaterialColor());
+    public static final Block LIME_PLANKS = registerPlanks("lime", Blocks.WARPED_PLANKS, DyeColor.LIME.getMaterialColor());
+    public static final Block MAGENTA_PLANKS = registerPlanks("magenta", Blocks.CRIMSON_PLANKS, DyeColor.MAGENTA.getMaterialColor());
+    public static final Block ORANGE_PLANKS = registerPlanks("orange", Blocks.ACACIA_PLANKS, DyeColor.ORANGE.getMaterialColor());
+    public static final Block PINK_PLANKS = registerPlanks("pink", Blocks.JUNGLE_PLANKS, DyeColor.PINK.getMaterialColor());
+    public static final Block PURPLE_PLANKS = registerPlanks("purple", Blocks.CRIMSON_PLANKS, DyeColor.PURPLE.getMaterialColor());
+    public static final Block RED_PLANKS = registerPlanks("red", Blocks.MANGROVE_PLANKS, DyeColor.RED.getMaterialColor());
+    public static final Block WHITE_PLANKS = registerPlanks("white", Blocks.BIRCH_PLANKS, DyeColor.WHITE.getMaterialColor());
+    public static final Block YELLOW_PLANKS = registerPlanks("yellow", Blocks.BIRCH_PLANKS, DyeColor.YELLOW.getMaterialColor());
 
     /**
      * Based on {@link Blocks#DIRT}
@@ -70,29 +72,28 @@ public class SuCraftBlocks {
         "dirt_bricks",
         new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
-            .withFallback(Blocks.MUD_BRICKS)
-            .withModelCreation(Model.OneTextureCube.defaultCreation())
-            .withFullBlockBoundingBoxItem()
-            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
+            .withFallback(Blocks.DIRT)
+            .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+            .withFullBlockBoundingBoxItem(),
         new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F, 1.0F).sound(SoundType.GRAVEL)),
         SuCraftBlockLoot::dropSelf
     );
 
-    public static final Block POLISHED_CALCITE = registerPolished("calcite", Blocks.CALCITE);
-    public static final Block POLISHED_DRIPSTONE = registerPolished("dripstone", Blocks.DRIPSTONE_BLOCK);
-    public static final Block POLISHED_TUFF = registerPolished("tuff", Blocks.TUFF);
-    public static final Block ANDESITE_BRICKS = registerBricks("andesite", Blocks.POLISHED_ANDESITE);
-    public static final Block CALCITE_BRICKS = registerBricks("calcite", Blocks.CALCITE);
-    public static final Block DIORITE_BRICKS = registerBricks("diorite", Blocks.POLISHED_DIORITE);
-    public static final Block DRIPSTONE_BRICKS = registerBricks("dripstone", Blocks.DRIPSTONE_BLOCK);
-    public static final Block GRANITE_BRICKS = registerBricks("granite", Blocks.POLISHED_GRANITE);
-    public static final Block TUFF_BRICKS = registerBricks("tuff", Blocks.TUFF);
-    public static final Block CHISELED_ANDESITE_BRICKS = registerChiseledBricks("andesite", Blocks.POLISHED_ANDESITE);
-    public static final Block CHISELED_CALCITE_BRICKS = registerChiseledBricks("calcite", Blocks.CALCITE);
-    public static final Block CHISELED_DIORITE_BRICKS = registerChiseledBricks("diorite", Blocks.POLISHED_DIORITE);
-    public static final Block CHISELED_DRIPSTONE_BRICKS = registerChiseledBricks("dripstone", Blocks.DRIPSTONE_BLOCK);
-    public static final Block CHISELED_GRANITE_BRICKS = registerChiseledBricks("granite", Blocks.POLISHED_GRANITE);
-    public static final Block CHISELED_TUFF_BRICKS = registerChiseledBricks("tuff", Blocks.TUFF);
+    public static final Block POLISHED_CALCITE = registerPolished("calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
+    public static final Block POLISHED_DRIPSTONE = registerPolished("dripstone", Blocks.DRIPSTONE_BLOCK, MaterialColor.TERRACOTTA_BROWN);
+    public static final Block POLISHED_TUFF = registerPolished("tuff", Blocks.TUFF, MaterialColor.TERRACOTTA_GRAY);
+    public static final Block ANDESITE_BRICKS = registerBricks("andesite", Blocks.POLISHED_ANDESITE, MaterialColor.STONE);
+    public static final Block CALCITE_BRICKS = registerBricks("calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
+    public static final Block DIORITE_BRICKS = registerBricks("diorite", Blocks.POLISHED_DIORITE, MaterialColor.QUARTZ);
+    public static final Block DRIPSTONE_BRICKS = registerBricks("dripstone", Blocks.DRIPSTONE_BLOCK, MaterialColor.TERRACOTTA_BROWN);
+    public static final Block GRANITE_BRICKS = registerBricks("granite", Blocks.POLISHED_GRANITE, MaterialColor.DIRT);
+    public static final Block TUFF_BRICKS = registerBricks("tuff", Blocks.TUFF, MaterialColor.TERRACOTTA_GRAY);
+    public static final Block CHISELED_ANDESITE_BRICKS = registerChiseledBricks("andesite", Blocks.POLISHED_ANDESITE, MaterialColor.STONE);
+    public static final Block CHISELED_CALCITE_BRICKS = registerChiseledBricks("calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
+    public static final Block CHISELED_DIORITE_BRICKS = registerChiseledBricks("diorite", Blocks.POLISHED_DIORITE, MaterialColor.QUARTZ);
+    public static final Block CHISELED_DRIPSTONE_BRICKS = registerChiseledBricks("dripstone", Blocks.DRIPSTONE_BLOCK, MaterialColor.TERRACOTTA_BROWN);
+    public static final Block CHISELED_GRANITE_BRICKS = registerChiseledBricks("granite", Blocks.POLISHED_GRANITE, MaterialColor.DIRT);
+    public static final Block CHISELED_TUFF_BRICKS = registerChiseledBricks("tuff", Blocks.TUFF, MaterialColor.TERRACOTTA_GRAY);
 
     /**
      * Based on {@link Blocks#SANDSTONE} and {@link Blocks#SOUL_SAND}
@@ -102,19 +103,18 @@ public class SuCraftBlocks {
         new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
             .withFallback(Blocks.SOUL_SAND)
-            .withModelCreation(Model.BottomTopPillarCube.defaultCreation())
-            .withFullBlockBoundingBoxItem()
-            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
+            .withModelCreation(Model.BottomTopPillarCube.defaultCreation().withNoParameters())
+            .withFullBlockBoundingBoxItem(),
         new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F, 0.8F)),
         SuCraftBlockLoot::dropSelf
     );
 
-    public static final Block SANDSTONE_BRICKS = registerBricks("sandstone", Blocks.SANDSTONE);
-    public static final Block RED_SANDSTONE_BRICKS = registerBricks("red_sandstone", Blocks.RED_SANDSTONE);
-    public static final Block SOUL_SANDSTONE_BRICKS = registerBricks("soul_sandstone", Blocks.SOUL_SAND);
-    public static final Block ANDESITE_COBBLESTONE = registerCobblestone("andesite", Blocks.ANDESITE);
-    public static final Block DIORITE_COBBLESTONE = registerCobblestone("diorite", Blocks.DIORITE);
-    public static final Block GRANITE_COBBLESTONE = registerCobblestone("granite", Blocks.GRANITE);
+    public static final Block SANDSTONE_BRICKS = registerBricks("sandstone", Blocks.SANDSTONE, MaterialColor.SAND);
+    public static final Block RED_SANDSTONE_BRICKS = registerBricks("red_sandstone", Blocks.RED_SANDSTONE, MaterialColor.COLOR_ORANGE);
+    public static final Block SOUL_SANDSTONE_BRICKS = registerBricks("soul_sandstone", Blocks.SOUL_SAND, MaterialColor.COLOR_BROWN);
+    public static final Block ANDESITE_COBBLESTONE = registerCobblestone("andesite", Blocks.ANDESITE, MaterialColor.STONE);
+    public static final Block DIORITE_COBBLESTONE = registerCobblestone("diorite", Blocks.DIORITE, MaterialColor.QUARTZ);
+    public static final Block GRANITE_COBBLESTONE = registerCobblestone("granite", Blocks.GRANITE, MaterialColor.DIRT);
 
     /**
      * Based on {@link Blocks#CHISELED_SANDSTONE} and {@link Blocks#SOUL_SAND}
@@ -124,9 +124,8 @@ public class SuCraftBlocks {
         new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
             .withFallback(Blocks.SOUL_SAND)
-            .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())))
-            .withFullBlockBoundingBoxItem()
-            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
+            .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())).withNoParameters())
+            .withFullBlockBoundingBoxItem(),
         new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
         SuCraftBlockLoot::dropSelf
     );
@@ -139,13 +138,18 @@ public class SuCraftBlocks {
         new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
             .withFallback(Blocks.SOUL_SAND)
-            .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())))
-            .withFullBlockBoundingBoxItem()
-            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
+            .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())).withNoParameters())
+            .withFullBlockBoundingBoxItem(),
         new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
         SuCraftBlockLoot::dropSelf
     );
-    public static final Block CHISELED_PRISMARINE_BRICKS = registerChiseledBricks("prismarine", Blocks.PRISMARINE_BRICKS);
+    public static final Block CHISELED_PRISMARINE_BRICKS = registerChiseledBricks("prismarine", Blocks.PRISMARINE_BRICKS, MaterialColor.DIAMOND);
+    public static final Block ANDESITE_PILLAR = registerStonePillar("andesite", Blocks.POLISHED_ANDESITE, MaterialColor.STONE);
+    public static final Block CALCITE_PILLAR = registerStonePillar("calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
+    public static final Block DIORITE_PILLAR = registerStonePillar("diorite", Blocks.POLISHED_DIORITE, MaterialColor.QUARTZ);
+    public static final Block DRIPSTONE_PILLAR = registerStonePillar("dripstone", Blocks.DRIPSTONE_BLOCK, MaterialColor.TERRACOTTA_BROWN);
+    public static final Block GRANITE_PILLAR = registerStonePillar("granite", Blocks.POLISHED_GRANITE, MaterialColor.DIRT);
+    public static final Block TUFF_PILLAR = registerStonePillar("tuff", Blocks.TUFF, MaterialColor.TERRACOTTA_GRAY);
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
@@ -173,7 +177,7 @@ public class SuCraftBlocks {
                 .withHost(host)
                 .withHostReplacement(hostReplacement)
                 .withFallback(fallback)
-                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem()
                 .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
@@ -220,9 +224,8 @@ public class SuCraftBlocks {
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
                 .withFallback(Blocks.BOOKSHELF)
-                .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft(idWoodType + "_planks"), TextureContent.Existing.getInstance())))
-                .withFullBlockBoundingBoxItem()
-                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
+                .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft(idWoodType + "_planks"), TextureContent.Existing.getInstance())).withNoParameters())
+                .withFullBlockBoundingBoxItem(),
             new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.WOOD)),
             block -> SuCraftBlockLoot.dropSingleItemAndSingleItemWhenSilkTouch(Items.BOOK, ConstantValue.exactly(3.0F), block)
         );
@@ -231,16 +234,15 @@ public class SuCraftBlocks {
     /**
      * Based on {@link Blocks#OAK_PLANKS}
      */
-    private static @NotNull Block registerPlanks(@NotNull String description, @NotNull Block fallback) {
+    private static @NotNull Block registerPlanks(@NotNull String description, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
         return register(
             description + "_planks",
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
                 .withFallback(fallback)
-                .withModelCreation(Model.OneTextureCube.defaultCreation())
-                .withFullBlockBoundingBoxItem()
-                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)),
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+                .withFullBlockBoundingBoxItem(),
+            new Block(BlockBehaviour.Properties.of(Material.WOOD, materialColor).strength(2.0F, 3.0F).sound(SoundType.WOOD)),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -248,16 +250,15 @@ public class SuCraftBlocks {
     /**
      * Based on {@link Blocks#POLISHED_ANDESITE}
      */
-    private static @NotNull Block registerPolished(@NotNull String unpolished, @NotNull Block fallback) {
+    private static @NotNull Block registerPolished(@NotNull String unpolished, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
         return register(
             "polished_" + unpolished,
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
                 .withFallback(fallback)
-                .withModelCreation(Model.OneTextureCube.defaultCreation())
-                .withFullBlockBoundingBoxItem()
-                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+                .withFullBlockBoundingBoxItem(),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -265,16 +266,15 @@ public class SuCraftBlocks {
     /**
      * Based on {@link Blocks#STONE_BRICKS}
      */
-    private static @NotNull Block registerBricks(@NotNull String type, @NotNull Block fallback) {
+    private static @NotNull Block registerBricks(@NotNull String type, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
         return register(
             type + "_bricks",
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
                 .withFallback(fallback)
-                .withModelCreation(Model.OneTextureCube.defaultCreation())
-                .withFullBlockBoundingBoxItem()
-                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+                .withFullBlockBoundingBoxItem(),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -282,16 +282,15 @@ public class SuCraftBlocks {
     /**
      * Based on {@link Blocks#CHISELED_STONE_BRICKS}
      */
-    private static @NotNull Block registerChiseledBricks(@NotNull String type, @NotNull Block fallback) {
+    private static @NotNull Block registerChiseledBricks(@NotNull String type, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
         return register(
             "chiseled_" + type + "_bricks",
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
                 .withFallback(fallback)
-                .withModelCreation(Model.OneTextureCube.defaultCreation())
-                .withFullBlockBoundingBoxItem()
-                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+                .withFullBlockBoundingBoxItem(),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -299,16 +298,31 @@ public class SuCraftBlocks {
     /**
      * Based on {@link Blocks#COBBLESTONE}
      */
-    private static @NotNull Block registerCobblestone(@NotNull String type, @NotNull Block fallback) {
+    private static @NotNull Block registerCobblestone(@NotNull String type, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
         return register(
             type + "_cobblestone",
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
                 .withFallback(fallback)
-                .withModelCreation(Model.OneTextureCube.defaultCreation())
-                .withFullBlockBoundingBoxItem()
-                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(2.0F, 6.0F)),
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+                .withFullBlockBoundingBoxItem(),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(2.0F, 6.0F)),
+            SuCraftBlockLoot::dropSelf
+        );
+    }
+
+    /**
+     * Based on {@link Blocks#QUARTZ_PILLAR}
+     */
+    private static @NotNull Block registerStonePillar(@NotNull String stoneType, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
+        return register(
+            stoneType + "_pillar",
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
+                .withNoteBlockHosts()
+                .withFallback(fallback)
+                .withDefaultModelCreationsForRotatedPillarBlock()
+                .withFullBlockBoundingBoxItem(),
+            new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
index f29058d4186dbd9d664eff4bdb372089728d8744..b5e08221a8a35104c501894a47eaed49d4b754de 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -14,6 +14,8 @@ import nl.martijnmuijsers.paper.block.UsedHostBlockStates;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
@@ -151,7 +153,7 @@ public interface BlockReplacementRule {
     /**
      * This method will assume (not verify) that the given state is in fact a host of this rule
      */
-    @NotNull Model getModel(@NotNull BlockState host);
+    @NotNull ModelWithParameters getModel(@NotNull BlockState host);
 
     @Nullable RealItemReplacementRule getRealItemRule();
 
@@ -190,14 +192,14 @@ public interface BlockReplacementRule {
      * Returns null or an arbitrary meaning less value if the real block does not have a corresponding block item
      */
     default @Nullable Model getRealItemModel() {
-        return this.getModel(this.getHost(this.getRepresentativeRealState())).getReference(ResourcePackAssetIntention.ITEM);
+        return this.getModel(this.getHost(this.getRepresentativeRealState())).model().getReference(ResourcePackAssetIntention.ITEM);
     }
 
     default void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
         for (@NotNull BlockState host : this.getHosts()) {
             @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(host.getBlock())).withEmptyIntention();
             @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
-            @NotNull Model model = this.getModel(host);
+            @NotNull ModelWithParameters model = this.getModel(host);
             if (host.getBlock().getStateDefinition().getPossibleStates().size() == 1) {
                 minecraftBlockStates.setNoVariantModel(model, resourcePack, false);
             } else {
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
index 7513e9efebc118f21c3ab0496a17d570786cb0df..ddd107d81f50d466004538c4eeecd9565d2f0123 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
@@ -7,13 +7,20 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import nl.martijnmuijsers.paper.block.UsedHostBlockStates;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreationWithParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.IdentityHashMap;
 import java.util.List;
+import java.util.Map;
+import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 
@@ -85,7 +92,7 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
     }
 
     /**
-     * Sets the host and host replacement based automatically on the next unused state of the given block
+     * Sets a single host and host replacement based automatically on the next unused state of the given block
      */
     default @NotNull B withNextUnusedStateOfHostBlock(@NotNull Block hostBlock) {
         @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(hostBlock);
@@ -94,12 +101,42 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
     }
 
     /**
-     * Sets the host and host replacement based automatically on the next unused note block state
+     * Sets a single host and host replacement based automatically on the next unused note block state
      */
     default @NotNull B withNoteBlockHost() {
         return this.withNextUnusedStateOfHostBlock(Blocks.NOTE_BLOCK);
     }
 
+    /**
+     * Sets a host and host replacement for each real block state based automatically on the next unused state of the given block
+     */
+    default @NotNull B withNextUnusedStatesOfHostBlock(@NotNull Block hostBlock) {
+        @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostByRealState = new IdentityHashMap<>();
+        @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementByHost = new IdentityHashMap<>();
+        return this.withHostForRealState(realState -> {
+            if (hostByRealState.isEmpty()) {
+                for (@NotNull BlockState someRealState : realState.getBlock().getStateDefinition().getPossibleStates()) {
+                    @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(hostBlock);
+                    hostByRealState.put(someRealState, hostAndHostReplacement.left());
+                    hostReplacementByHost.put(hostAndHostReplacement.left(), hostAndHostReplacement.right());
+                }
+            }
+            return hostByRealState.get(realState);
+        }).withHostReplacementForHost(host -> {
+            if (hostReplacementByHost.isEmpty()) {
+                throw new IllegalStateException("Host for real state function should be called before host replacement for host function, when using automatically generated unused state of a host block for a multi-state real block");
+            }
+            return hostReplacementByHost.get(host);
+        });
+    }
+
+    /**
+     * Sets a host and host replacement for each real block state based automatically on the next unused note block state
+     */
+    default @NotNull B withNoteBlockHosts() {
+        return this.withNextUnusedStatesOfHostBlock(Blocks.NOTE_BLOCK);
+    }
+
     /**
      * One fallback for all real block states
      */
@@ -128,34 +165,62 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
     }
 
     /**
-     * One host overriding model for all hosts
+     * One host overriding model for all real states
      */
-    @NotNull B withModel(@NotNull Model hostOverridingModel);
+    @NotNull B withModel(@NotNull ModelWithParameters model);
 
     /**
-     * Sets the output of the given function as the host overriding model for a given host,
-     * but takes the host overriding model for that host already existing in this builder if the function returns null
+     * Sets the output of the given function as the host overriding model for a given real state,
+     * but takes the host overriding model for that real state already existing in this builder if the function returns null
      */
-    @NotNull B withModelForHost(@NotNull Function<@NotNull BlockState, @Nullable Model> hostOverridingModelForHost);
+    @NotNull B withModelForRealState(@NotNull Function<@NotNull BlockState, @Nullable ModelWithParameters> modelForRealState);
 
     /**
-     * One host overriding model for all hosts
+     * One host overriding model for all real states
      */
-    @NotNull B withModelCreation(@NotNull ModelCreation hostOverridingModelCreation);
+    @NotNull B withModelCreation(@NotNull ModelCreationWithParameters modelCreation);
 
     /**
-     * Sets the output of the given function as the host overriding model for a given host,
-     * but takes the host overriding model for that host already existing in this builder if the function returns null
+     * Sets the output of the given function as the host overriding model for a given real state,
+     * but takes the host overriding model for that real state already existing in this builder if the function returns null
      */
-    @NotNull B withModelCreationForHost(@NotNull Function<@NotNull BlockState, @Nullable ModelCreation> hostOverridingModelCreationForHost);
+    @NotNull B withModelCreationForRealState(@NotNull Function<@NotNull BlockState, @Nullable ModelCreationWithParameters> modelCreationForRealState);
 
     /**
-     * One host overriding model for all hosts: the same one as the given rule
+     * One host overriding model for all real states: the same one as the given rule
      */
     default @NotNull B withModelSameAs(@NotNull SingleStateRealBlockReplacementRule singleStateReplacementRule) {
         return this.withModel(singleStateReplacementRule.getModel());
     }
 
+    /**
+     * Sets the host overriding models to a model with parameters specifically for a rotated pillar block, using the default texture names
+     */
+    default @NotNull B withDefaultModelCreationsForRotatedPillarBlock() {
+        @NotNull ModelCreation vertical = Model.YPillarCube.defaultCreation();
+        @NotNull ModelCreation horizontal = Model.HorizontalYPillarCube.defaultCreation();
+        @NotNull ModelCreationWithParameters xAxisModel = horizontal.withParameters(new ModelParameters(json -> {
+            json.addProperty("x", 90);
+            json.addProperty("y", 90);
+        }));
+        @NotNull ModelCreationWithParameters yAxisModel = vertical.withNoParameters();
+        @NotNull ModelCreationWithParameters zAxisModel = horizontal.withParameters(new ModelParameters(json -> json.addProperty("x", 90)));
+        return this.withModelCreationForRealState(realState -> {
+            switch (realState.getValue(BlockStateProperties.AXIS)) {
+                case X -> {
+                    return xAxisModel;
+                }
+                case Y -> {
+                    return yAxisModel;
+                }
+                case Z -> {
+                    return zAxisModel;
+                }
+            }
+            return null;
+        });
+    }
+
     /**
      * Sets the given real item rule as the real item rule of this builder
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
index f0299e1595170320fc2db30031c946c631a95714..34bbf1173a3e6f3aff1fb2e84c491b61613d46a9 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
@@ -7,6 +7,7 @@ import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -43,11 +44,12 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
      */
     private final @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> potentialBlockReplacementPairs;
 
-    private final @NotNull Map<@NotNull BlockState, @NotNull Model> modelPerHost;
+    private final @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost;
 
-    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull Set<@NotNull BlockState> hostSet, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull Model> hostOverridingModelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules) {
+    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull Set<@NotNull BlockState> hostSet, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules) {
         super(real, realItemRule, hostItemRules);
-        this.hostSet = Collections.newSetFromMap(new IdentityHashMap<>(hostSet.stream().collect(Collectors.toMap(Function.identity(), $ -> true))));
+        this.hostSet = Collections.newSetFromMap(new IdentityHashMap<>());
+        this.hostSet.addAll(hostSet);
         this.hostList = List.copyOf(this.hostSet);
         this.hostPerRealState = new IdentityHashMap<>(hostPerRealState);
         this.hostReplacementPerHost = new IdentityHashMap<>(hostReplacementPerHost);
@@ -59,7 +61,7 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
             .filter(pair -> !pair.left().equals(pair.right()))
             .distinct()
             .toList();
-        this.modelPerHost = new IdentityHashMap<>(hostOverridingModelPerHost);
+        this.modelPerHost = new IdentityHashMap<>(modelPerHost);
     }
 
     @Override
@@ -103,7 +105,7 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
     }
 
     @Override
-    public @NotNull Model getModel(@NotNull BlockState host) {
+    public @NotNull ModelWithParameters getModel(@NotNull BlockState host) {
         return this.modelPerHost.get(host);
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
index 627e35f0d3a681d6b58d60618344c8dd33f2f915..2247f0003a6b37229ab31c2bad2370af860d1a8e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
@@ -8,6 +8,8 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreationWithParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
 import org.apache.commons.lang3.Validate;
 import org.jetbrains.annotations.NotNull;
@@ -32,7 +34,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
     private @NotNull Function<@NotNull BlockState, @Nullable BlockState> hostForRealState = $ -> null;
     private @NotNull Function<@NotNull BlockState, @Nullable BlockState> hostReplacementForHost = $ -> null;
     private @NotNull Function<@NotNull BlockState, @Nullable BlockState> fallbackForRealState = $ -> null;
-    private @NotNull Function<@NotNull BlockState, @Nullable Model> modelForHost = $ -> null;
+    private @NotNull Function<@NotNull BlockState, @Nullable ModelWithParameters> modelForRealState = $ -> null;
     private @NotNull List<@NotNull Supplier<@NotNull HostItemReplacementRule>> justInTimeHostItemRuleSuppliers = new ArrayList<>(0);
 
     public SingleMultiStateRealBlockReplacementRuleBuilder() {}
@@ -92,31 +94,31 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
     }
 
     @Override
-    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModel(@NotNull Model model) {
-        this.modelForHost = $ -> model;
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModel(@NotNull ModelWithParameters model) {
+        this.modelForRealState = $ -> model;
         return this;
     }
 
     @Override
-    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelForHost(@NotNull Function<@NotNull BlockState, @Nullable Model> modelForHost) {
-        @NotNull Function<@NotNull BlockState, @Nullable Model> existingHostOverridingModelForHost = this.modelForHost;
-        this.modelForHost = host -> {
-            @Nullable Model hostOverridingModel = modelForHost.apply(host);
-            return hostOverridingModel != null ? hostOverridingModel : existingHostOverridingModelForHost.apply(host);
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelForRealState(@NotNull Function<@NotNull BlockState, @Nullable ModelWithParameters> modelForRealState) {
+        @NotNull Function<@NotNull BlockState, @Nullable ModelWithParameters> existingModelForRealState = this.modelForRealState;
+        this.modelForRealState = realState -> {
+            @Nullable ModelWithParameters model = modelForRealState.apply(realState);
+            return model != null ? model : existingModelForRealState.apply(realState);
         };
         return this;
     }
 
     @Override
-    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelCreation(@NotNull ModelCreation modelCreation) {
-        this.modelForHost = $ -> modelCreation.create(ResourcePackAssetIntention.BLOCK, Registry.BLOCK.getKey(this.real));
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelCreation(@NotNull ModelCreationWithParameters modelCreation) {
+        this.modelForRealState = $ -> modelCreation.create(ResourcePackAssetIntention.BLOCK, Registry.BLOCK.getKey(this.real));
         return this;
     }
 
     @Override
-    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelCreationForHost(@NotNull Function<@NotNull BlockState, @Nullable ModelCreation> modelCreationForHost) {
-        return this.withModelForHost(host -> {
-            @Nullable ModelCreation modelCreation = modelCreationForHost.apply(host);
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelCreationForRealState(@NotNull Function<@NotNull BlockState, @Nullable ModelCreationWithParameters> modelCreationForRealState) {
+        return this.withModelForRealState(realState -> {
+            @Nullable ModelCreationWithParameters modelCreation = modelCreationForRealState.apply(realState);
             return modelCreation == null ? null : modelCreation.create(ResourcePackAssetIntention.BLOCK, Registry.BLOCK.getKey(this.real));
         });
     }
@@ -180,7 +182,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
             @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(realState));
             @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
             @NotNull BlockState fallback = Validate.notNull(this.fallbackForRealState.apply(realState));
-            @NotNull Model model = Validate.notNull(this.modelForHost.apply(host));
+            @NotNull ModelWithParameters model = Validate.notNull(this.modelForRealState.apply(realState));
             return new SingleStateRealBlockReplacementRule(
                 this.real,
                 realItemRule,
@@ -195,19 +197,21 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
         @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState = new IdentityHashMap<>(0);
         @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost = new IdentityHashMap<>(0);
         @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState = new IdentityHashMap<>(0);
-        @NotNull Map<@NotNull BlockState, @NotNull Model> modelPerHost = new IdentityHashMap<>(0);
+        @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost = new IdentityHashMap<>(0);
         for (@NotNull BlockState realState : realStates) {
             @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(realState));
             hostPerRealState.put(realState, host);
             hosts.add(host);
             @NotNull BlockState fallback = Validate.notNull(this.fallbackForRealState.apply(realState));
             fallbackPerRealState.put(realState, fallback);
+            if (!modelPerHost.containsKey(host)) {
+                @NotNull ModelWithParameters model = Validate.notNull(this.modelForRealState.apply(realState));
+                modelPerHost.put(host, model);
+            }
         }
         for (@NotNull BlockState host : hosts) {
             @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
             hostReplacementPerHost.put(host, hostReplacement);
-            @NotNull Model model = Validate.notNull(this.modelForHost.apply(host));
-            modelPerHost.put(host, model);
         }
         return new MultiStateRealBlockReplacementRule(
             this.real,
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
index 96fc14feeeca9909a18fc806eb6b54048bb662cd..3ceff3edfb756654a1e5135ac018c02e2ddb9653 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
@@ -7,6 +7,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
@@ -50,9 +51,9 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
      */
     private final @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> potentialBlockReplacementPairs;
 
-    private final @NotNull Model model;
+    private final @NotNull ModelWithParameters model;
 
-    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull Model model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
+    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
         super(real, realItemRule, hostItemRules);
         this.host = host;
         this.hosts = Collections.singletonList(this.host);
@@ -121,11 +122,11 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
     }
 
     @Override
-    public @NotNull Model getModel(@NotNull BlockState host) {
+    public @NotNull ModelWithParameters getModel(@NotNull BlockState host) {
         return this.model;
     }
 
-    public @NotNull Model getModel() {
+    public @NotNull ModelWithParameters getModel() {
         return this.model;
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
index cd2c49809030ae3eddfdd887479e90dc6c5a434b..e5ac8db1a3969c0c58438d18a02ffae9e1dfc484 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
@@ -26,6 +26,14 @@ public class Model extends ResourcePackIntentionedAssetDataByContent<ModelConten
        super(intention, key, content);
     }
 
+    public @NotNull ModelWithParameters withParameters(@NotNull ModelParameters parameters) {
+        return new ModelWithParameters(this, parameters);
+    }
+
+    public @NotNull ModelWithParameters withNoParameters() {
+        return new ModelWithParameters(this, null);
+    }
+
     public @NotNull Model getReference(@NotNull ResourcePackAssetIntention newIntention) {
         return new Model(newIntention, this.key, new ModelContent.Reference(this));
     }
@@ -97,6 +105,29 @@ public class Model extends ResourcePackIntentionedAssetDataByContent<ModelConten
 
     }
 
+    /**
+     * @see ModelContent.HorizontalYPillarCube
+     */
+    public static final class HorizontalYPillarCube {
+
+        private HorizontalYPillarCube() {}
+
+        private static final @NotNull ModelCreation DEFAULT_CREATION = creation(ModelContent.HorizontalYPillarCube.defaultCreation());
+
+        public static @NotNull ModelCreation defaultCreation() {
+            return DEFAULT_CREATION;
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeEnd(@NotNull Texture endTexture) {
+            return creation(ModelContent.HorizontalYPillarCube.defaultCreationWithAlternativeEnd(endTexture));
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeEnd(@NotNull TextureCreation endTexture) {
+            return creation(ModelContent.HorizontalYPillarCube.defaultCreationWithAlternativeEnd(endTexture));
+        }
+
+    }
+
     /**
      * @see ModelContent.BottomTopPillarCube
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index 975ac03b3b6925ad66b4ee6def2ee47e45ea1a3c..b8649f2d45979d2810caa233b23d23b675c618c6 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -130,6 +130,58 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
 
     }
 
+    /**
+     * A form of {@link ModelContent}: similar tp {@link YPillarCube}, but oriented horizontally
+     */
+    public static final class HorizontalYPillarCube extends ModelContent {
+
+        private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("cube_column_horizontal"), Existing.getInstance());
+
+        private final @NotNull Texture endTexture;
+        private final @NotNull Texture sideTexture;
+
+        public HorizontalYPillarCube(@NotNull Texture endTexture, @NotNull Texture sideTexture) {
+            super();
+            this.endTexture = endTexture;
+            this.sideTexture = sideTexture;
+        }
+
+        @Override
+        void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
+            resourcePackModel.setParent(parent);
+            resourcePackModel.setColumnTextures(this.endTexture, this.sideTexture);
+            this.endTexture.addToResourcePack(resourcePack, false);
+            this.sideTexture.addToResourcePack(resourcePack, false);
+        }
+
+        public static @NotNull HorizontalYPillarCube create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key, @NotNull TextureCreation endTexture, @NotNull TextureCreation sideTexture) {
+            return new HorizontalYPillarCube(endTexture.create(intention, key), sideTexture.create(intention, key));
+        }
+
+        public static @NotNull ModelContentCreation creation(@NotNull Texture endTexture, @NotNull Texture sideTexture) {
+            return (intention, key) -> new YPillarCube(endTexture, sideTexture);
+        }
+
+        public static @NotNull ModelContentCreation creation(@NotNull TextureCreation endTexture, @NotNull TextureCreation sideTexture) {
+            return (intention, key) -> create(intention, key, endTexture, sideTexture);
+        }
+
+        private static final @NotNull ModelContentCreation DEFAULT_CREATION = creation(Texture.defaultEndCreation(), Texture.defaultCreation());
+
+        public static @NotNull ModelContentCreation defaultCreation() {
+            return DEFAULT_CREATION;
+        }
+
+        public static @NotNull ModelContentCreation defaultCreationWithAlternativeEnd(@NotNull Texture endTexture) {
+            return defaultCreationWithAlternativeEnd((intention, key) -> endTexture);
+        }
+
+        public static @NotNull ModelContentCreation defaultCreationWithAlternativeEnd(@NotNull TextureCreation endTexture) {
+            return (intention, key) -> create(intention, key, endTexture, Texture.defaultCreation());
+        }
+
+    }
+
     /**
      * A form of {@link ModelContent}: a full cube with one texture for the bottom, one textures for the x- and z-oriented sides, and one texture for the top
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreation.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreation.java
index f3273d800a50c6bd95d14180f9a3212e7a386a9b..f5f95e2387db67cf1aa8c3e1a5da8ee7066c7514 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreation.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreation.java
@@ -10,4 +10,12 @@ public interface ModelCreation {
 
     @NotNull Model create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key);
 
+    default @NotNull ModelCreationWithParameters withParameters(@NotNull ModelParameters parameters) {
+        return new ModelCreationWithParameters(this, parameters);
+    }
+
+    default @NotNull ModelCreationWithParameters withNoParameters() {
+        return new ModelCreationWithParameters(this, null);
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreationWithParameters.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreationWithParameters.java
new file mode 100644
index 0000000000000000000000000000000000000000..066ca7dfc0eedf8bbb2283be3dabc578f7b025f4
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelCreationWithParameters.java
@@ -0,0 +1,19 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import net.minecraft.resources.ResourceLocation;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A {@link ModelCreation}, optionally with accompanying {@link ModelParameters}
+ */
+public record ModelCreationWithParameters(@NotNull ModelCreation modelCreation, @Nullable ModelParameters parameters) {
+
+    public @NotNull ModelWithParameters create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key) {
+        return new ModelWithParameters(modelCreation.create(intention, key), parameters);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelParameters.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelParameters.java
new file mode 100644
index 0000000000000000000000000000000000000000..6a2bc73c958e5c4116fe49fd447ac5072808183a
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelParameters.java
@@ -0,0 +1,26 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Map;
+import java.util.function.Consumer;
+
+/**
+ * Parameters that do not belong to a model, but go with it when setting the model as the model of a block state variant.
+ */
+public final class ModelParameters {
+
+    private final @NotNull JsonObject json = new JsonObject();
+
+    public ModelParameters(@NotNull Consumer<@NotNull JsonObject> jsonInitialization) {
+        jsonInitialization.accept(json);
+    }
+
+    public @NotNull JsonObject getJson() {
+        return this.json;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelWithParameters.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelWithParameters.java
new file mode 100644
index 0000000000000000000000000000000000000000..737300e26856d5efdaf8efcb17c3838850f5c45a
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelWithParameters.java
@@ -0,0 +1,11 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A {@link Model}, optionally with accompanying {@link ModelParameters}
+ */
+public record ModelWithParameters(@NotNull Model model, @Nullable ModelParameters parameters) {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 5ffab7362b7cd659ec3224ed881fae579bbb8558..83888787e8ee505f2a22500d096672de2af9d7d7 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -96,6 +96,12 @@ public class SuCraftItems {
     public static final Item DIORITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.DIORITE_COBBLESTONE, "Diorite", () -> Items.DIORITE);
     public static final Item GRANITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.GRANITE_COBBLESTONE, "Granite", () -> Items.GRANITE);
     public static final Item CHISELED_PRISMARINE_BRICKS = registerChiseledBricks(SuCraftBlocks.CHISELED_PRISMARINE_BRICKS, "Prismarine", () -> Items.PRISMARINE_BRICKS);
+    public static final Item ANDESITE_PILLAR = registerPillar(SuCraftBlocks.ANDESITE_PILLAR, "Andesite", () -> Items.POLISHED_ANDESITE);
+    public static final Item CALCITE_PILLAR = registerPillar(SuCraftBlocks.CALCITE_PILLAR, "Calcite", () -> Items.CALCITE);
+    public static final Item DIORITE_PILLAR = registerPillar(SuCraftBlocks.DIORITE_PILLAR, "Diorite", () -> Items.POLISHED_DIORITE);
+    public static final Item DRIPSTONE_PILLAR = registerPillar(SuCraftBlocks.DRIPSTONE_PILLAR, "Dripstone", () -> Items.DRIPSTONE_BLOCK);
+    public static final Item GRANITE_PILLAR = registerPillar(SuCraftBlocks.GRANITE_PILLAR, "Granite", () -> Items.POLISHED_GRANITE);
+    public static final Item TUFF_PILLAR = registerPillar(SuCraftBlocks.TUFF_PILLAR, "Tuff", () -> Items.TUFF);
 
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
@@ -174,6 +180,13 @@ public class SuCraftItems {
         return registerBlock(block, typeDisplayName + " Cobblestone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
+    /**
+     * Based on {@link Items#QUARTZ_PILLAR}
+     */
+    private static @NotNull Item registerPillar(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, typeDisplayName + " Pillar", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
+    }
+
     public static Item bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         // Make sure that the item replacement rule for block items for which the block has some hosts that are potentially placed by vanilla items is registered with those vanilla items
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
index 5b4f0819710cd501707ec66e3e8a2ad141629839..75a8c56d0c68f05b964491e270a8b371ba51037a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
@@ -2,13 +2,19 @@
 
 package nl.martijnmuijsers.paper.resourcepack.asset.blockstates;
 
+import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
 import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.asset.json.SimpleJsonResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Map;
 
 /**
  * Concrete implementation of {@link MutableResourcePackBlockStates}
@@ -44,7 +50,7 @@ public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset
     }
 
     @Override
-    public void setModel(@NotNull String variant, @NotNull Model model) {
+    public void setModel(@NotNull String variant, @NotNull ModelWithParameters model) {
         @NotNull JsonObject variantsJson = this.getOrCreateVariantsJson();
         @NotNull JsonObject variantJson;
         if (variantsJson.has(variant)) {
@@ -53,7 +59,12 @@ public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset
             variantJson = new JsonObject();
             variantsJson.add(variant, variantJson);
         }
-        variantJson.addProperty(KeyConstants.model, model.getKeyWithIntention().toString());
+        variantJson.addProperty(KeyConstants.model, model.model().getKeyWithIntention().toString());
+        if (model.parameters() != null) {
+            for (Map.Entry<String, JsonElement> parameter : model.parameters().getJson().entrySet()) {
+                variantJson.add(parameter.getKey(), parameter.getValue());
+            }
+        }
         if (!variant.equals(KeyConstants.noVariant)) {
             variantsJson.remove(KeyConstants.noVariant);
         }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
index 27941cffc1f0f2b6e06ac51c7e873ffb48cd0d4d..0033be49aa1e07438a50b1c062283b9a1dee5389 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
@@ -4,6 +4,7 @@ package nl.martijnmuijsers.paper.resourcepack.asset.blockstates;
 
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
 import nl.martijnmuijsers.paper.resourcepack.asset.json.MutableJsonResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
@@ -22,9 +23,9 @@ public interface MutableResourcePackBlockStates extends MutableJsonResourcePackA
      * @param pack Because this instance is not aware of the resource pack it is in, this pack must be provided to automatically add the given model to the resource pack
      * @param overwriteExistingModel Whether to overwrite an existing model in the resource pack (this has to do with the model, not with this {@link MutableResourcePackBlockStates} instance: this instance's model property is always overwritten by this method)
      */
-    default void setModel(@NotNull String variant, @NotNull Model model, @NotNull MutableResourcePack pack, boolean overwriteExistingModel) {
+    default void setModel(@NotNull String variant, @NotNull ModelWithParameters model, @NotNull MutableResourcePack pack, boolean overwriteExistingModel) {
         this.setModel(variant, model);
-        model.addToResourcePack(pack, overwriteExistingModel);
+        model.model().addToResourcePack(pack, overwriteExistingModel);
     }
 
     /**
@@ -32,21 +33,21 @@ public interface MutableResourcePackBlockStates extends MutableJsonResourcePackA
      *
      * If the variant is not {@link KeyConstants#noVariant}, any existing empty variant will be removed
      */
-    void setModel(@NotNull String variant, @NotNull Model model);
+    void setModel(@NotNull String variant, @NotNull ModelWithParameters model);
 
-    default void setModel(@NotNull BlockState variant, @NotNull Model model, @NotNull MutableResourcePack pack, boolean overwriteExistingModel) {
+    default void setModel(@NotNull BlockState variant, @NotNull ModelWithParameters model, @NotNull MutableResourcePack pack, boolean overwriteExistingModel) {
         this.setModel(variant.toVariantString(), model, pack, overwriteExistingModel);
     }
 
-    default void setModel(@NotNull BlockState variant, @NotNull Model model) {
+    default void setModel(@NotNull BlockState variant, @NotNull ModelWithParameters model) {
         this.setModel(variant.toVariantString(), model);
     }
 
-    default void setNoVariantModel(@NotNull Model model, @NotNull MutableResourcePack pack, boolean overwriteExistingModel) {
+    default void setNoVariantModel(@NotNull ModelWithParameters model, @NotNull MutableResourcePack pack, boolean overwriteExistingModel) {
         this.setModel(KeyConstants.noVariant, model, pack, overwriteExistingModel);
     }
 
-    default void setNoVariantModel(@NotNull Model model) {
+    default void setNoVariantModel(@NotNull ModelWithParameters model) {
         this.setModel(KeyConstants.noVariant, model);
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 48914b2de1bd90a6934acba269c8d3ab32fdd711..d3e9311c85fcb62a60e573a1111df65235a82bb3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 37;
+    private static final int currentResourcePackVersion = 43;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
