From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 12 Jul 2022 20:39:51 +0200
Subject: [PATCH] Fix known issues with fake slabs


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 5cc3bd7cd71a13c88be0c1795cd481110a7b2fb0..4685b04026406d1dea033de7ef6f6d106c7268c9 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -29,10 +29,8 @@ import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
-import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Collections;
-import java.util.List;
 import java.util.Queue;
 import java.util.UUID;
 import java.util.concurrent.RejectedExecutionException;
@@ -62,11 +60,9 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
-import net.minecraft.network.protocol.game.ClientboundMoveEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
 import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
 import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
-import net.minecraft.network.protocol.game.ClientboundTeleportEntityPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.MinecraftServer;
@@ -79,11 +75,12 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.decoration.ArmorStand;
-import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
-import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.phys.Vec3;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelPosition;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelProximity;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelVisualProperties;
 import nl.martijnmuijsers.paper.resourcepack.asset.model.ResourcePackModel;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem;
@@ -152,7 +149,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
      */
     private final @NotNull Long2ObjectMap<SentBlockEntityInformation> sentBlockEntityInformationByBlockPosKey = new Long2ObjectOpenHashMap<>(0);
 
-    private static record SentBlockEntityInformation(@NotNull BlockState blockState, boolean onPositiveXZCorner, boolean closebyModel) {}
+    private record SentBlockEntityInformation(@NotNull BlockState blockState, @NotNull BlockEntityModelVisualProperties properties) {}
 
     /**
      * Stores the block positions (represented by a block key ({@link CoordinateUtils#getBlockKey})) at the given chunk section position (represented by a chunk section key ({@link CoordinateUtils#getChunkSectionKey}))
@@ -192,8 +189,8 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     private void sendSetEquipmentPacket(int entityId, @NotNull SentBlockEntityInformation blockEntityInformationToSend) {
-//        MinecraftServer.LOGGER.info("TEMP DEBUG - Sending " + entityId + " equipment: " + blockEntityInformationToSend.blockState + " , " + blockEntityInformationToSend.onPositiveXZCorner + " , " + blockEntityInformationToSend.closebyModel + " = " + blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemStack(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.onPositiveXZCorner, blockEntityInformationToSend.closebyModel).getTag().getInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT) + " ( " + blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemModel(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.onPositiveXZCorner, blockEntityInformationToSend.closebyModel).getKeyWithIntention() + " using custom model data " + blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemCustomModelData(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.onPositiveXZCorner, blockEntityInformationToSend.closebyModel) + " )");
-        this.send(new ClientboundSetEquipmentPacket(entityId, Collections.singletonList(new Pair<>(EquipmentSlot.HEAD, blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemStack(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.onPositiveXZCorner, blockEntityInformationToSend.closebyModel)))));
+//        MinecraftServer.LOGGER.info("TEMP DEBUG - Sending " + entityId + " equipment: " + blockEntityInformationToSend.blockState + " , " + blockEntityInformationToSend.properties.position() + " , " + blockEntityInformationToSend.properties.proximity() + " = " + blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemStack(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.properties).getTag().getInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT) + " ( " + blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemModel(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.properties).getKeyWithIntention() + " using custom model data " + blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemCustomModelData(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.properties) + " )");
+        this.send(new ClientboundSetEquipmentPacket(entityId, Collections.singletonList(new Pair<>(EquipmentSlot.HEAD, blockEntityInformationToSend.blockState().getBlock().replacementRule.getBlockEntityItemStack(blockEntityInformationToSend.blockState(), blockEntityInformationToSend.properties)))));
     }
 
     private void spawnBlockEntity(@NotNull BlockPos blockPos, @NotNull SentBlockEntityInformation blockEntityInformationToSend) {
@@ -211,9 +208,9 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         this.send(new ClientboundAddEntityPacket(
             entityId,
             entityUUID,
-            blockPos.getX() + 0.5F + (blockEntityInformationToSend.onPositiveXZCorner ? ResourcePackModel.BLOCK_ENTITY_ARMOR_STAND_DXZ : -ResourcePackModel.BLOCK_ENTITY_ARMOR_STAND_DXZ),
+            blockPos.getX() + 0.5F + blockEntityInformationToSend.properties.position().armorStandPhysicalTranslationX,
             blockPos.getY() + ResourcePackModel.BLOCK_ENTITY_ARMOR_STAND_DY,
-            blockPos.getZ() + 0.5F + (blockEntityInformationToSend.onPositiveXZCorner ? ResourcePackModel.BLOCK_ENTITY_ARMOR_STAND_DXZ : -ResourcePackModel.BLOCK_ENTITY_ARMOR_STAND_DXZ),
+            blockPos.getZ() + 0.5F + blockEntityInformationToSend.properties.position().armorStandPhysicalTranslationZ,
             0F,
             0F,
             EntityType.ARMOR_STAND,
@@ -273,12 +270,12 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         long blockKey = blockPos.asLong();
         @Nullable SentBlockEntityInformation existingSentBlockEntityInformation = this.sentBlockEntityInformationByBlockPosKey.get(blockKey);
         tryUpdateExistingBlockEntity: if (existingSentBlockEntityInformation != null) {
-            if (existingSentBlockEntityInformation.onPositiveXZCorner != blockEntityInformationToSend.onPositiveXZCorner) {
+            if (existingSentBlockEntityInformation.properties.position() != blockEntityInformationToSend.properties.position()) {
                 this.despawnBlockEntity(blockPos, true);
                 break tryUpdateExistingBlockEntity;
             }
             boolean updated = false;
-            if (!existingSentBlockEntityInformation.blockState.equals(blockEntityInformationToSend.blockState) || existingSentBlockEntityInformation.onPositiveXZCorner != blockEntityInformationToSend.onPositiveXZCorner || existingSentBlockEntityInformation.closebyModel != (blockEntityInformationToSend.closebyModel)) {
+            if (!existingSentBlockEntityInformation.blockState.equals(blockEntityInformationToSend.blockState) || existingSentBlockEntityInformation.properties.proximity() != blockEntityInformationToSend.properties.proximity()) {
                 int entityId = this.blockEntityEntityIdByBlockPosKey.get(blockKey);
                 // Send a set equipment packet to change the observed block state
                 sendSetEquipmentPacket(entityId, blockEntityInformationToSend);
@@ -311,24 +308,23 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             }
             return;
         }
-        boolean onPositiveXZCorner = true;
-        // Check if the block, the block above and the block below are opaque: because if one of them is transparent we don't need to do anything
-        if (state.isOpaque() && level.getBlockState(blockPos.above()).isOpaque() && level.getBlockState(blockPos.below()).isOpaque()) {
+        @NotNull BlockEntityModelPosition position;
+        // Check if one of the block, the block above and the block below is transparent: because then we can just use the center
+        if (!state.isOpaque() || !level.getBlockState(blockPos.above()).isOpaque() || !level.getBlockState(blockPos.below()).isOpaque()) {
+            position = BlockEntityModelPosition.CENTER;
+        } else {
             // If all three vertical blocks on the positive X, positive Z and positive XZ side are opaque, only then do we assume the negative XZ is a better position
             BlockPos positiveXRelative = blockPos.relative(Direction.Axis.X, 1);
             BlockPos positiveZRelative = blockPos.relative(Direction.Axis.Z, 1);
             BlockPos positiveXZRelative = positiveXRelative.relative(Direction.Axis.Z, 1);
             if (level.getBlockState(positiveXRelative).isOpaque() && level.getBlockState(positiveXRelative.above()).isOpaque() && level.getBlockState(positiveXRelative.below()).isOpaque() && level.getBlockState(positiveZRelative).isOpaque() && level.getBlockState(positiveZRelative.above()).isOpaque() && level.getBlockState(positiveZRelative.below()).isOpaque() && level.getBlockState(positiveXZRelative).isOpaque() && level.getBlockState(positiveXZRelative.above()).isOpaque() && level.getBlockState(positiveXZRelative.below()).isOpaque()) {
-                onPositiveXZCorner = false;
+                position = BlockEntityModelPosition.NEGATIVE_XZ;
+            } else {
+                position = BlockEntityModelPosition.POSITIVE_XZ;
             }
         }
-        SectionPos sectionPos = SectionPos.of(blockPos);
-        SectionPos playerSectionPos = SectionPos.of(player);
-        int sectionDX = sectionPos.x() - playerSectionPos.x();
-        int sectionDY = sectionPos.y() - playerSectionPos.y();
-        int sectionDZ = sectionPos.z() - playerSectionPos.z();
-        boolean closebyModel = sectionDX >= -1 && sectionDX <= 1 && sectionDY >= -1 && sectionDY <= 1 && sectionDZ >= -1 && sectionDZ <= 1;
-        this.updateBlockEntityOrSpawnIfNotSent(blockPos, new SentBlockEntityInformation(state, onPositiveXZCorner, closebyModel));
+        @NotNull BlockEntityModelProximity proximity = this.computeNewProximity(blockKey, SectionPos.of(player), player.blockPosition);
+        this.updateBlockEntityOrSpawnIfNotSent(blockPos, new SentBlockEntityInformation(state, new BlockEntityModelVisualProperties(position, proximity)));
     }
 
     private ReentrantLock scheduleUpdatePotentialBlockEntitiesInSectionSpawnNewLock = new ReentrantLock();
@@ -500,34 +496,91 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         });
     }
 
-    public boolean hasUpdatedBlockEntitiesClosebyModel = false;
+    public boolean hasUpdatedBlockEntitiesClosebyModelForSections = false;
+
+    private static @NotNull BlockEntityModelProximity getProximityForSections(@NotNull SectionPos sectionPos, @NotNull SectionPos playerSectionPos) {
+        int sectionDX = sectionPos.x() - playerSectionPos.x();
+        int sectionDY = sectionPos.y() - playerSectionPos.y();
+        int sectionDZ = sectionPos.z() - playerSectionPos.z();
+        if (sectionDX == 0 && sectionDY == 0 && sectionDZ == 0) {
+            return BlockEntityModelProximity.SAME_CHUNK;
+        } else if (sectionDX >= -1 && sectionDX <= 1 && sectionDY >= -1 && sectionDY <= 1 && sectionDZ >= -1 && sectionDZ <= 1) {
+            return BlockEntityModelProximity.NEIGHBOR_CHUNK;
+        } else {
+            return BlockEntityModelProximity.FAR;
+        }
+    }
+
+    private static @Nullable BlockEntityModelProximity getProximityForBlocks(@NotNull BlockPos blockPos, @NotNull BlockPos playerBlockPos, @Nullable BlockEntityModelProximity defaultValue) {
+        int dx = blockPos.getX() - playerBlockPos.getX();
+        if (dx >= -1 && dx <= 1) {
+            int dy = blockPos.getY() - playerBlockPos.getY();
+            if (dy >= -1 && dy <= 1) {
+                int dz = blockPos.getZ() - playerBlockPos.getZ();
+                if (dz >= -1 && dz <= 1) {
+                    return BlockEntityModelProximity.NEIGHBOR_BLOCK;
+                }
+            }
+        }
+        return defaultValue;
+    }
+
+    private @NotNull SentBlockEntityInformation sendUpdateBlockEntityClosebyModelIfNeeded(long blockKey, @NotNull SentBlockEntityInformation existingSentBlockEntityInformation, @NotNull BlockEntityModelProximity newProximity) {
+        if (existingSentBlockEntityInformation.properties.proximity() == newProximity) {
+            return existingSentBlockEntityInformation;
+        }
+        int entityId = this.blockEntityEntityIdByBlockPosKey.get(blockKey);
+        var newBlockEntityInformation = new SentBlockEntityInformation(existingSentBlockEntityInformation.blockState, new BlockEntityModelVisualProperties(existingSentBlockEntityInformation.properties.position(), newProximity));
+        this.sendSetEquipmentPacket(entityId, newBlockEntityInformation);
+        return newBlockEntityInformation;
+    }
 
     /**
      * To be called for every chunk section that the player enters or leaves, or any chunk section right next to a chunk section (at most chunk section chessboard distance 1) the player enters or leaves
      */
-    public void updateBlockEntitiesClosebyModelInChunkSection(long chunkSectionKey, @NotNull SectionPos upToDatePlayerSectionPos) {
+    public void updateBlockEntitiesClosebyModelInChunkSection(long chunkSectionKey, @NotNull SectionPos upToDatePlayerSectionPos, @NotNull BlockPos upToDatePlayerBlockPos) {
         LongSet blockKeys = this.blockEntityBlockPosKeysPerChunkSectionKey.get(chunkSectionKey);
         if (blockKeys == null) {
             return;
         }
 //        MinecraftServer.LOGGER.info("TEMP DEBUG - Updating closeby model for all in section " + SectionPos.x(chunkSectionKey) + ", " + SectionPos.y(chunkSectionKey) + ", " + SectionPos.z(chunkSectionKey));
-        int sectionDX = SectionPos.x(chunkSectionKey) - upToDatePlayerSectionPos.x();
-        int sectionDY = SectionPos.y(chunkSectionKey) - upToDatePlayerSectionPos.y();
-        int sectionDZ = SectionPos.z(chunkSectionKey) - upToDatePlayerSectionPos.z();
-        boolean closebyModel = sectionDX >= -1 && sectionDX <= 1 && sectionDY >= -1 && sectionDY <= 1 && sectionDZ >= -1 && sectionDZ <= 1;
+        SectionPos sectionPos = SectionPos.of(chunkSectionKey);
+        @NotNull BlockEntityModelProximity globalSectionProximity = getProximityForSections(sectionPos, upToDatePlayerSectionPos);
+        boolean needToCheckForBlockProximity;
+        if (upToDatePlayerSectionPos.asLong() == chunkSectionKey) {
+            needToCheckForBlockProximity = true;
+        } else {
+            needToCheckForBlockProximity = upToDatePlayerBlockPos.getX() >= sectionPos.minBlockX() - 1 && upToDatePlayerBlockPos.getX() <= sectionPos.maxBlockX() + 1 && upToDatePlayerBlockPos.getY() >= sectionPos.minBlockY() - 1 && upToDatePlayerBlockPos.getY() <= sectionPos.maxBlockY() + 1 && upToDatePlayerBlockPos.getZ() >= sectionPos.minBlockZ() - 1 && upToDatePlayerBlockPos.getZ() <= sectionPos.maxBlockZ() + 1;
+        }
         for (long blockKey : blockKeys) {
             this.sentBlockEntityInformationByBlockPosKey.computeIfPresent(blockKey, ($, existingSentBlockEntityInformation) -> {
-                if (existingSentBlockEntityInformation.closebyModel == closebyModel) {
-                    return existingSentBlockEntityInformation;
+                @NotNull BlockEntityModelProximity newProximity = globalSectionProximity;
+                if (needToCheckForBlockProximity) {
+                    BlockPos blockPos = BlockPos.of(blockKey);
+                    newProximity = getProximityForBlocks(blockPos, upToDatePlayerBlockPos, newProximity);
                 }
-                int entityId = this.blockEntityEntityIdByBlockPosKey.get(blockKey);
-                var newBlockEntityInformation = new SentBlockEntityInformation(existingSentBlockEntityInformation.blockState, existingSentBlockEntityInformation.onPositiveXZCorner, closebyModel);
-                this.sendSetEquipmentPacket(entityId, newBlockEntityInformation);
-                return newBlockEntityInformation;
+                return sendUpdateBlockEntityClosebyModelIfNeeded(blockKey, existingSentBlockEntityInformation, newProximity);
             });
         }
     }
 
+    private @NotNull BlockEntityModelProximity computeNewProximity(long blockKey, @NotNull SectionPos upToDatePlayerSectionPos, @NotNull BlockPos upToDatePlayerBlockPos) {
+        BlockPos blockPos = BlockPos.of(blockKey);
+        @Nullable BlockEntityModelProximity newProximity = getProximityForBlocks(blockPos, upToDatePlayerBlockPos, null);
+        if (newProximity == null) {
+            SectionPos sectionPos = SectionPos.of(blockPos);
+            newProximity = getProximityForSections(sectionPos, upToDatePlayerSectionPos);
+        }
+        return newProximity;
+    }
+
+    public void updateBlockEntitiesClosebyModelForBlock(long blockKey, @NotNull SectionPos upToDatePlayerSectionPos, @NotNull BlockPos upToDatePlayerBlockPos) {
+        this.sentBlockEntityInformationByBlockPosKey.computeIfPresent(blockKey, ($, existingSentBlockEntityInformation) -> {
+            @Nullable BlockEntityModelProximity newProximity = computeNewProximity(blockKey, upToDatePlayerSectionPos, upToDatePlayerBlockPos);
+            return sendUpdateBlockEntityClosebyModelIfNeeded(blockKey, existingSentBlockEntityInformation, newProximity);
+        });
+    }
+
     // Martijn end - custom blocks and items
 
     // Paper start - NetworkClient implementation
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index cac165d14a92b728a7fe6b5e36e1402cfd78cf63..43c92ee279ff53271aec5513ed02ba76c609e94b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -11,7 +11,6 @@ import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.JsonOps;
-import io.papermc.paper.util.CoordinateUtils;
 import it.unimi.dsi.fastutil.Pair;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
@@ -32,7 +31,6 @@ import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.BitSet;
 import java.util.Comparator;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
@@ -65,7 +63,6 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.core.SectionPos;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
 import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
@@ -114,7 +111,6 @@ import org.apache.commons.lang3.mutable.MutableObject;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
-import org.bukkit.entity.Player;
 // CraftBukkit end
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet; // Paper
 
@@ -2013,13 +2009,14 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         SectionPos sectionposition = player.getLastSectionPos();
         SectionPos sectionposition1 = SectionPos.of((EntityAccess) player);
         // Martijn start - custom blocks and items
+        BlockPos newBlockPos = player.blockPosition;
         var connection = player.connection;
         if (connection != null) {
             if (!connection.isDisconnected()) {
                 var connection2 = connection.connection;
                 if (connection2 != null && connection2.isConnected()) {
-                    if (!sectionposition.equals(sectionposition1) || !connection2.hasUpdatedBlockEntitiesClosebyModel) {
-                        connection2.hasUpdatedBlockEntitiesClosebyModel = true;
+                    if (!sectionposition.equals(sectionposition1) || !connection2.hasUpdatedBlockEntitiesClosebyModelForSections) {
+                        connection2.hasUpdatedBlockEntitiesClosebyModelForSections = true;
                         LongSet fromAndToSectionsAndChessboardNeighbors = new LongOpenHashSet(108); // (3*3*3) * 2 * 2
                         for (SectionPos oldOrNewSectionPos : new SectionPos[]{sectionposition, sectionposition1}) {
                             for (int dx = -1; dx <= 1; dx++) {
@@ -2031,18 +2028,45 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                                         if (ny >= level.getMinSection() && ny <= level.getMaxSection()) {
                                             SectionPos neighbor = SectionPos.of(nx, ny, nz);
                                             if (level.isLoadedAndInBounds(new BlockPos(neighbor.minBlockX(), neighbor.minBlockY(), neighbor.minBlockZ()))) {
-                                                fromAndToSectionsAndChessboardNeighbors.add(neighbor.asLong());
+                                                long neighborKey = neighbor.asLong();
+                                                if (fromAndToSectionsAndChessboardNeighbors.add(neighborKey)) {
+                                                    connection2.updateBlockEntitiesClosebyModelInChunkSection(neighborKey, sectionposition1, newBlockPos);
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    } else if (player.lastBlockPos == null || !player.lastBlockPos.equals(newBlockPos)) {
+                        LongSet fromAndToBlocksAndChessboardNeighbors = new LongOpenHashSet(108); // (3*3*3) * 2 * 2
+                        for (BlockPos oldOrNewBlockPos : new BlockPos[]{player.lastBlockPos, newBlockPos}) {
+                            if (oldOrNewBlockPos != null) {
+                                for (int dx = -1; dx <= 1; dx++) {
+                                    for (int dy = -1; dy <= 1; dy++) {
+                                        for (int dz = -1; dz <= 1; dz++) {
+                                            int nx = oldOrNewBlockPos.getX() + dx;
+                                            int ny = oldOrNewBlockPos.getY() + dy;
+                                            int nz = oldOrNewBlockPos.getZ() + dz;
+                                            if (ny >= level.getMinBuildHeight() && ny <= level.getMaxBuildHeight()) {
+                                                BlockPos neighbor = new BlockPos(nx, ny, nz);
+                                                if (level.isLoadedAndInBounds(neighbor)) {
+                                                    long neighborKey = neighbor.asLong();
+                                                    if (fromAndToBlocksAndChessboardNeighbors.add(neighborKey)) {
+                                                        connection2.updateBlockEntitiesClosebyModelForBlock(neighborKey, sectionposition1, newBlockPos);
+                                                    }
+                                                }
                                             }
                                         }
                                     }
                                 }
                             }
                         }
-                        fromAndToSectionsAndChessboardNeighbors.forEach(toCheck -> connection2.updateBlockEntitiesClosebyModelInChunkSection(toCheck, sectionposition1));
                     }
                 }
             }
         }
+        player.lastBlockPos = newBlockPos;
         // Martijn end - custom blocks and items
         long k = sectionposition.chunk().toLong();
         long l = sectionposition1.chunk().toLong();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 5586ba09d3c8aa11b4a03d5fd3b222c17f5226a6..a901d4c272b0b48b4e354270b20f286e220a98ed 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -509,6 +509,7 @@ public class ServerPlayer extends Player {
     @Nullable
     private Vec3 enteredLavaOnVehiclePosition;
     private SectionPos lastSectionPos;
+    public @Nullable BlockPos lastBlockPos; // Martijn - custom blocks and items
     private ResourceKey<Level> respawnDimension;
     @Nullable
     private BlockPos respawnPosition;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
index 5acf96a72f606423d9f305402e0298e6ee2ef387..76f4fc6492b9fc1b3704792af215525b8a0c98f2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -12,6 +12,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.block.UsedHostBlockStates;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelVisualProperties;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
@@ -28,12 +29,14 @@ import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.BiFunction;
+import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -222,9 +225,9 @@ public interface BlockReplacementRule {
      * <br>
      * This method will assume (not verify) that the given state is in fact a state of this rule's real block
      */
-    default @Nullable Model getBlockEntityItemModel(@NotNull BlockState realState, boolean onPositiveXZCorner, boolean closebyModel) {
+    default @Nullable Model getBlockEntityItemModel(@NotNull BlockState realState, @NotNull BlockEntityModelVisualProperties properties) {
         Model[] models = this.getBlockEntityItemModels(realState);
-        return models[(onPositiveXZCorner ? 1 : 0) + (closebyModel ? 2 : 0)];
+        return models[properties.getIndex()];
     }
 
     /**
@@ -244,13 +247,7 @@ public interface BlockReplacementRule {
         if (base == null) {
             return null;
         }
-        Model[] models = new Model[4];
-        for (boolean onPositiveXZCorner : new boolean[] {false, true}) {
-            for (boolean closebyModel : new boolean[] {false, true}) {
-                models[(onPositiveXZCorner ? 1 : 0) + (closebyModel ? 2 : 0)] = base.getBlockEntityVersion(onPositiveXZCorner, closebyModel);
-            }
-        }
-        return models;
+        return Arrays.stream(BlockEntityModelVisualProperties.values).map(base::getBlockEntityVersion).toArray(Model[]::new);
     }
 
     /**
@@ -265,12 +262,12 @@ public interface BlockReplacementRule {
      * <br>
      * This method will assume (not verify) that the given state is in fact a state of this rule's real block
      */
-    default @Nullable Integer getBlockEntityItemCustomModelData(@NotNull BlockState realState, boolean onPositiveXZCorner, boolean closebyModel) {
+    default @Nullable Integer getBlockEntityItemCustomModelData(@NotNull BlockState realState, @NotNull BlockEntityModelVisualProperties properties) {
         int[] customModelData = this.getBlockEntityItemCustomModelData(realState);
         if (customModelData == null) {
             return null;
         }
-        return customModelData[(onPositiveXZCorner ? 1 : 0) + (closebyModel ? 2 : 0)];
+        return customModelData[properties.getIndex()];
     }
 
     /**
@@ -285,43 +282,38 @@ public interface BlockReplacementRule {
      * <br>
      * This method will assume (not verify) that the given state is in fact a state of this rule's real block
      */
-    default @Nullable ItemStack getBlockEntityItemStack(@NotNull BlockState realState, boolean onPositiveXZCorner, boolean closebyModel) {
+    default @Nullable ItemStack getBlockEntityItemStack(@NotNull BlockState realState, @NotNull BlockEntityModelVisualProperties properties) {
         var itemStack = this.getBlockEntityItemStack(realState);
         if (itemStack == null) {
             return null;
         }
-        return itemStack.getForContext(onPositiveXZCorner, closebyModel);
+        return itemStack.getForContext(properties);
     }
 
     class BlockEntityItemStack {
 
-        private final @NotNull BiFunction<@NotNull Boolean, @NotNull Boolean, @NotNull ItemStack> forContextFunction;
+        private final @NotNull Function<@NotNull BlockEntityModelVisualProperties, @NotNull ItemStack> forContextFunction;
 
         /**
          * Only null while not initialized yet
          */
         private @NotNull ItemStack @Nullable [] forContext;
 
-        public @NotNull ItemStack getForContext(boolean onPositiveXZCorner, boolean closebyModel) {
+        public @NotNull ItemStack getForContext(@NotNull BlockEntityModelVisualProperties properties) {
             if (this.forContext == null) {
-                this.forContext = new ItemStack[4];
-                for (boolean contextOnPositiveXZCorner : new boolean[] {false, true}) {
-                    for (boolean contextClosebyModel : new boolean[] {false, true}) {
-                        this.forContext[(contextOnPositiveXZCorner ? 1 : 0) + (contextClosebyModel ? 2 : 0)] = this.forContextFunction.apply(contextOnPositiveXZCorner, contextClosebyModel);
-                    }
-                }
+                this.forContext = Arrays.stream(BlockEntityModelVisualProperties.values).map(this.forContextFunction).toArray(ItemStack[]::new);
             }
-            return this.forContext[(onPositiveXZCorner ? 1 : 0) + (closebyModel ? 2 : 0)];
+            return this.forContext[properties.getIndex()];
         }
 
-        public BlockEntityItemStack(@NotNull BiFunction<@NotNull Boolean, @NotNull Boolean, @NotNull ItemStack> forContextFunction) {
+        public BlockEntityItemStack(@NotNull Function<@NotNull BlockEntityModelVisualProperties, @NotNull ItemStack> forContextFunction) {
             this.forContextFunction = forContextFunction;
         }
 
-        public BlockEntityItemStack(@NotNull Supplier<@NotNull Item> itemSupplier, @NotNull BiFunction<@NotNull Boolean, @NotNull Boolean, @NotNull Integer> customModelDataForContextFunction) {
-            this((onPositiveXZCorner, closebyModel) -> {
+        public BlockEntityItemStack(@NotNull Supplier<@NotNull Item> itemSupplier, @NotNull Function<@NotNull BlockEntityModelVisualProperties, @NotNull Integer> customModelDataForContextFunction) {
+            this(properties -> {
                 ItemStack itemStack = new ItemStack(itemSupplier.get(), 1);
-                itemStack.getOrCreateTag().putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, customModelDataForContextFunction.apply(onPositiveXZCorner, closebyModel));
+                itemStack.getOrCreateTag().putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, customModelDataForContextFunction.apply(properties));
                 return itemStack;
             });
         }
@@ -343,10 +335,8 @@ public interface BlockReplacementRule {
         @NotNull NamespacedKeyWithoutIntention itemHostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(itemHost));
         @NotNull MutableResourcePackModel itemHostKeyMinecraftItemModel = resourcePack.getModel(ResourcePackAssetIntention.ITEM, itemHostKey);
         for (@NotNull BlockState realState : this.getReal().getStateDefinition().getPossibleStates()) {
-            for (boolean onPositiveXZCorner : new boolean[] {false, true}) {
-                for (boolean closebyModel : new boolean[] {false, true}) {
-                    itemHostKeyMinecraftItemModel.addModelOverride(Validate.notNull(this.getBlockEntityItemCustomModelData(realState, onPositiveXZCorner, closebyModel)), Validate.notNull(this.getBlockEntityItemModel(realState, onPositiveXZCorner, closebyModel)), resourcePack, false);
-                }
+            for (@NotNull BlockEntityModelVisualProperties properties : BlockEntityModelVisualProperties.values) {
+                itemHostKeyMinecraftItemModel.addModelOverride(Validate.notNull(this.getBlockEntityItemCustomModelData(realState, properties)), Validate.notNull(this.getBlockEntityItemModel(realState, properties)), resourcePack, false);
             }
         }
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
index fc2dc43c0c2941f2325cb170f9c187f7e21da8d5..0646a6d092902dd2fd1982bb858e8047cba7f2c0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
@@ -3,11 +3,9 @@
 package nl.martijnmuijsers.paper.block.replacementrule;
 
 import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import org.apache.commons.lang3.Validate;
-import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -102,7 +100,7 @@ public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
 
     protected @NotNull BlockEntityItemStack computeBlockEntityItemStack(@NotNull BlockState realState) {
         @NotNull Item item = Validate.notNull(this.getHost(this.real.defaultBlockState()).getBlock().asItem());
-        return new BlockEntityItemStack(() -> item, (onPositiveXZCorner, closebyModel) -> this.getBlockEntityItemCustomModelData(realState, onPositiveXZCorner, closebyModel));
+        return new BlockEntityItemStack(() -> item, properties -> this.getBlockEntityItemCustomModelData(realState, properties));
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
index 3b5c3b2068196e0d078bfe32422bd096a01ebfc2..7e5a96ebc359971305e6b146052d3029e75accb3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
@@ -8,6 +8,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelVisualProperties;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.item.UsedHostCustomModelData;
@@ -163,7 +164,7 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
                 this.blockEntityItemCustomModelDataPerRealState = new IdentityHashMap<>(0);
                 @NotNull Item item = Validate.notNull(hostPerRealState.get(this.real.defaultBlockState()).getBlock().asItem());
                 for (@NotNull BlockState possibleRealState : this.getReal().getStateDefinition().getPossibleStates()) {
-                    int[] customModelData = new int[4];
+                    int[] customModelData = new int[BlockEntityModelVisualProperties.values.length];
                     for (int i = 0; i < customModelData.length; i++) {
                         customModelData[i] = UsedHostCustomModelData.generateUnusedHostCustomModelData(item);
                     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
index 136c92d780e0869a24c19a971ad0374f74e2eafe..a166a464b73fb6c2143c7519320450ef33d708f2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
@@ -8,6 +8,7 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelVisualProperties;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.item.UsedHostCustomModelData;
@@ -178,7 +179,7 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
         if (this.blockEntityItemCustomModelData == null) {
             if (this.rendersAsEntity) {
                 @NotNull Item item = Validate.notNull(this.host.getBlock().asItem());
-                this.blockEntityItemCustomModelData = new int[4];
+                this.blockEntityItemCustomModelData = new int[BlockEntityModelVisualProperties.values.length];
                 for (int i = 0; i < blockEntityItemCustomModelData.length; i++) {
                     this.blockEntityItemCustomModelData[i] = UsedHostCustomModelData.generateUnusedHostCustomModelData(item);
                 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelPosition.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelPosition.java
new file mode 100644
index 0000000000000000000000000000000000000000..94aee86ff714ac334b42c874a2ec4d25f5d03ad1
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelPosition.java
@@ -0,0 +1,29 @@
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import org.jetbrains.annotations.NotNull;
+
+public enum BlockEntityModelPosition {
+
+    POSITIVE_XZ("p", 1.6F * 16 / 2, 0.5F),
+    CENTER("c", 0, 0),
+    NEGATIVE_XZ("n", -POSITIVE_XZ.displayTranslationX, -POSITIVE_XZ.armorStandPhysicalTranslationX);
+
+    public final @NotNull String blockEntityModelFileSuffix;
+    public final float displayTranslationX;
+    public final float displayTranslationZ;
+    public final float armorStandPhysicalTranslationX;
+    public final float armorStandPhysicalTranslationZ;
+
+    BlockEntityModelPosition(@NotNull String blockEntityModelFileSuffix, float displayTranslationX, float displayTranslationZ, float armorStandPhysicalTranslationX, float armorStandPhysicalTranslationZ) {
+        this.blockEntityModelFileSuffix = blockEntityModelFileSuffix;
+        this.displayTranslationX = displayTranslationX;
+        this.displayTranslationZ = displayTranslationZ;
+        this.armorStandPhysicalTranslationX = armorStandPhysicalTranslationX;
+        this.armorStandPhysicalTranslationZ = armorStandPhysicalTranslationZ;
+    }
+
+    BlockEntityModelPosition(@NotNull String blockEntityModelFileSuffix, float displayTranslationXZ, float armorStandPhysicalTranslationXZ) {
+        this(blockEntityModelFileSuffix, displayTranslationXZ, displayTranslationXZ, armorStandPhysicalTranslationXZ, armorStandPhysicalTranslationXZ);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelProximity.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelProximity.java
new file mode 100644
index 0000000000000000000000000000000000000000..038b30bc991f81e5c56f22733fd55d7e00457396
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelProximity.java
@@ -0,0 +1,20 @@
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import org.jetbrains.annotations.NotNull;
+
+public enum BlockEntityModelProximity {
+
+    NEIGHBOR_BLOCK("b", 0.005F),
+    SAME_CHUNK("s", 0.01F),
+    NEIGHBOR_CHUNK("n", 0.03F),
+    FAR("f", 0.1F);
+
+    public final @NotNull String blockEntityModelFileSuffix;
+    public final float outwardExpandedElementDistance;
+
+    BlockEntityModelProximity(@NotNull String blockEntityModelFileSuffix, float outwardExpandedElementDistance) {
+        this.blockEntityModelFileSuffix = blockEntityModelFileSuffix;
+        this.outwardExpandedElementDistance = outwardExpandedElementDistance;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelVisualProperties.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelVisualProperties.java
new file mode 100644
index 0000000000000000000000000000000000000000..94b6c82758378c081996502059426b54819cc151
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/BlockEntityModelVisualProperties.java
@@ -0,0 +1,26 @@
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import org.jetbrains.annotations.NotNull;
+
+public record BlockEntityModelVisualProperties(@NotNull BlockEntityModelPosition position, @NotNull BlockEntityModelProximity proximity) {
+
+    public @NotNull String getBlockEntityModelFileSuffix() {
+        return this.position.blockEntityModelFileSuffix + this.proximity.blockEntityModelFileSuffix;
+    }
+
+    public int getIndex() {
+        return this.position.ordinal() + this.proximity.ordinal() * BlockEntityModelPosition.values().length;
+    }
+
+    public static BlockEntityModelVisualProperties[] values;
+    static {
+        values = new BlockEntityModelVisualProperties[BlockEntityModelPosition.values().length * BlockEntityModelProximity.values().length];
+        for (BlockEntityModelPosition position : BlockEntityModelPosition.values()) {
+            for (BlockEntityModelProximity proximity : BlockEntityModelProximity.values()) {
+                BlockEntityModelVisualProperties properties = new BlockEntityModelVisualProperties(position, proximity);
+                values[properties.getIndex()] = properties;
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
index 521af9d296d063b7e706be332801c21a3e5a90d5..47ebb61c2ab6759f2d903d40c78370f91bafecdd 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
@@ -38,8 +38,8 @@ public class Model extends ResourcePackIntentionedAssetDataByContent<ModelConten
         return new Model(newIntention, this.key, new ModelContent.Reference(this));
     }
 
-    public @NotNull Model getBlockEntityVersion(boolean onPositiveXZCorner, boolean closebyModel) {
-        return new Model(ResourcePackAssetIntention.ITEM, new NamespacedKeyWithoutIntention(this.key.namespace(), this.key.keyWithoutIntention() + "_ent_" + (onPositiveXZCorner ? "pos" : "neg") + "_" + (closebyModel ? "clo" : "far")), this.content.getBlockEntityVersion(this, onPositiveXZCorner, closebyModel));
+    public @NotNull Model getBlockEntityVersion(@NotNull BlockEntityModelVisualProperties properties) {
+        return new Model(ResourcePackAssetIntention.ITEM, new NamespacedKeyWithoutIntention(this.key.namespace(), this.key.keyWithoutIntention() + "_e" + properties.getBlockEntityModelFileSuffix()), this.content.getBlockEntityVersion(this, properties));
     }
 
     public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index 999d3202cd2ed1d2ee4775a2adc542974a76909c..7399e1f7bb64b8ddf0f5a6ab57dfe27970d9249a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -29,13 +29,6 @@ import java.util.function.Supplier;
  */
 public abstract class ModelContent implements ResourcePackAssetDataContent {
 
-    // TODO Use
-    private static final float OUTWARD_EXPANDED_ELEMENT_DISTANCE_NEIGHBOR_BLOCK = 0.005F;
-    private static final float OUTWARD_EXPANDED_ELEMENT_DISTANCE_SAME_CHUNK = 0.015F;
-    private static final float OUTWARD_EXPANDED_ELEMENT_DISTANCE_NEIGHBOR_CHUNK = 0.04F;
-    private static final float OUTWARD_EXPANDED_ELEMENT_DISTANCE_CLOSE = 0.01F; // TODO remove this one
-    private static final float OUTWARD_EXPANDED_ELEMENT_DISTANCE_FAR = 0.1F;
-
     protected ModelContent() {}
 
     public @NotNull Model asModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
@@ -47,8 +40,8 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
      */
     abstract void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack);
 
-    public @NotNull ModelContent getBlockEntityVersion(@NotNull Model myOwningModel, boolean onPositiveXZCorner, boolean closebyModel) throws UnsupportedOperationException {
-        return new ModelContent.AsBlockEntityReference(myOwningModel, onPositiveXZCorner, this.getOutwardExpandedElements(closebyModel ? OUTWARD_EXPANDED_ELEMENT_DISTANCE_CLOSE : OUTWARD_EXPANDED_ELEMENT_DISTANCE_FAR));
+    public @NotNull ModelContent getBlockEntityVersion(@NotNull Model myOwningModel, @NotNull BlockEntityModelVisualProperties properties) throws UnsupportedOperationException {
+        return new ModelContent.AsBlockEntityReference(myOwningModel, properties.position(), this.getOutwardExpandedElements(properties.proximity().outwardExpandedElementDistance));
     }
 
     abstract @NotNull JsonArray getOutwardExpandedElements(float outwardDistance) throws UnsupportedOperationException;
@@ -492,22 +485,22 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
     public static final class AsBlockEntityReference extends ModelContent {
 
         private final @NotNull Model parent;
-        private final boolean onPositiveXZCorner;
+        private final @NotNull BlockEntityModelPosition position;
         private final @NotNull JsonArray outwardExpandedElements;
 
-        public AsBlockEntityReference(@NotNull Model parent, boolean onPositiveXZCorner, @NotNull JsonArray outwardExpandedElements) {
+        public AsBlockEntityReference(@NotNull Model parent, @NotNull BlockEntityModelPosition position, @NotNull JsonArray outwardExpandedElements) {
             super();
             this.parent = parent;
-            this.onPositiveXZCorner = onPositiveXZCorner;
+            this.position = position;
             this.outwardExpandedElements = outwardExpandedElements;
         }
 
         @Override
         void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
-            resourcePackModel.setParent(parent);
-            resourcePackModel.setBlockEntityHeadDisplay(onPositiveXZCorner);
+            resourcePackModel.setParent(this.parent);
+            resourcePackModel.setBlockEntityHeadDisplay(this.position);
             resourcePackModel.setBlockEntityElements(this.outwardExpandedElements);
-            parent.addToResourcePack(resourcePack, false);
+            this.parent.addToResourcePack(resourcePack, false);
         }
 
         @Override
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
index 08f7adf8cb0af97fcb3d830d6dae1dc52484708e..100603887928b31d43dc5a99e7d43dee76b30a6b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
@@ -7,6 +7,7 @@ import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import net.minecraft.network.Connection;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelPosition;
 import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
 import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
@@ -50,7 +51,7 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
     }
 
     @Override
-    public void setBlockEntityHeadDisplay(boolean onPositiveXZCorner) {
+    public void setBlockEntityHeadDisplay(@NotNull BlockEntityModelPosition position) {
         @NotNull JsonObject displayJson;
         if (this.json.has(KeyConstants.display)) {
             displayJson = this.json.getAsJsonObject(KeyConstants.display);
@@ -90,15 +91,9 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
 //        for (int i = 0; i < 3; i++) {
 //            scaleJson.add(1.6F);
 //        }
-        float translationX = BLOCK_ENTITY_ARMOR_STAND_DXZ * (1.6F * 16);
-        float translationZ = BLOCK_ENTITY_ARMOR_STAND_DXZ * (1.6F * 16);
-        if (!onPositiveXZCorner) {
-            translationX = -translationX;
-            translationZ = -translationZ;
-        }
-        translationJson.add(translationX);
+        translationJson.add(position.displayTranslationX);
         translationJson.add(-30.42555F - BLOCK_ENTITY_ARMOR_STAND_DY * (1.6F * 16));
-        translationJson.add(translationZ);
+        translationJson.add(position.displayTranslationZ);
         for (int i = 0; i < 3; i++) {
             scaleJson.add(1.6F);
         }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
index 13438ad3ac1cb4083bdc44ef25f6e840d433d61a..17326d55c72bf6e98b8e9068ffd92588c5e5a928 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
@@ -4,6 +4,7 @@ package nl.martijnmuijsers.paper.resourcepack.asset.model;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.blockanditemdata.model.BlockEntityModelPosition;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
@@ -21,7 +22,7 @@ public interface MutableResourcePackModel extends MutableJsonResourcePackAsset,
 
     void setParent(@NotNull Model parent);
 
-    void setBlockEntityHeadDisplay(boolean onPositiveXZCorner);
+    void setBlockEntityHeadDisplay(@NotNull BlockEntityModelPosition position);
 
     void setBlockEntityElements(@NotNull JsonArray elementsJson);
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java
index 5cec2099235cb119be9bd01e5f6e875f4daef399..acd5a19f1396c3b1c5404dc9cea4d04349055e05 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java
@@ -16,7 +16,6 @@ public interface ResourcePackModel extends JsonResourcePackAsset {
     @NotNull ResourcePackModel merge(@NotNull ResourcePackAsset other);
 
     float BLOCK_ENTITY_ARMOR_STAND_DY = -0.01F;
-    float BLOCK_ENTITY_ARMOR_STAND_DXZ = 0.5F;
-    short DOUBLE_BLOCK_ENTITY_ARMOR_STAND_DXZ_AS_POS_MOVE_SHORT = 32 * 128;
+//    short DOUBLE_BLOCK_ENTITY_ARMOR_STAND_DXZ_AS_POS_MOVE_SHORT = 32 * 128;
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 64ccd895a3a5a3aaaa36192127280a72a4b92ac9..c49abde304b211039fd113ea89a0d1692603fda0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 94;
+    private static final int currentResourcePackVersion = 98;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
