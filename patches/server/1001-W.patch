From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 30 Jun 2022 02:35:55 +0200
Subject: [PATCH] W


diff --git a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
index 7febcb64b8d335e8219e4c196792cbe48dac1f92..1fee493568658dee18ac7300ead8ce93852c47a1 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
@@ -3,17 +3,17 @@
 package nl.martijnmuijsers.paper.block;
 
 import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
-import nl.martijnmuijsers.paper.resourcepack.PathConstants;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.model.Model;
+import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
+import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.NamespacedKey;
-import org.checkerframework.checker.units.qual.N;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -37,7 +37,7 @@ public interface BlockReplacementRule {
 
     @Nullable Item getFallbackItem();
 
-    @Nullable BlockModel getModelForStatePlacedByItem();
+    @Nullable Model getModelForStatePlacedByItem();
 
     void writeToStateIdReplacementArrays();
 
@@ -70,7 +70,7 @@ public interface BlockReplacementRule {
             private @Nullable BlockState hostReplacement;
             private @Nullable BlockState fallback;
             private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
-            private @Nullable BlockModel model;
+            private @Nullable Supplier<@NotNull Model> modelSupplier;
 
             @Override
             public @NotNull StatelessBlockReplacementRule.Builder withReal(@NotNull Block real) {
@@ -120,8 +120,16 @@ public interface BlockReplacementRule {
                 return this.withFallbackItem(() -> this.fallback.getBlock().asItem());
             }
 
-            public @NotNull StatelessBlockReplacementRule.Builder withModel(@NotNull BlockModel model) {
-                this.model = model;
+            public @NotNull StatelessBlockReplacementRule.Builder withModel(@NotNull Model model) {
+                this.modelSupplier = () -> model;
+                return this;
+            }
+
+            public @NotNull StatelessBlockReplacementRule.Builder withModelContent(@NotNull ModelContent modelContent) {
+                this.modelSupplier = () -> {
+                    Validate.notNull(this.real);
+                    return modelContent.asModel(ModelType.BLOCK, Registry.BLOCK.getKey(this.real).asBukkit());
+                };
                 return this;
             }
 
@@ -131,8 +139,8 @@ public interface BlockReplacementRule {
                 Validate.notNull(this.host);
                 Validate.notNull(this.hostReplacement);
                 Validate.notNull(this.fallback);
-                Validate.notNull(this.model);
-                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.fallback, this.fallbackItemSupplier, this.model);
+                Validate.notNull(this.modelSupplier);
+                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.fallback, this.fallbackItemSupplier, this.modelSupplier.get());
             }
 
         }
@@ -148,7 +156,7 @@ public interface BlockReplacementRule {
          */
         private @Nullable Item fallbackItem = null;
 
-        private final @NotNull BlockModel model;
+        private final @NotNull Model model;
 
         /**
          * This is used to get the fallback item the first time it is needed: this is to ensure no calls to the Items class are made before the blocks have finished initializing, otherwise we cannot refer to the blocks when we wish to create items for them
@@ -158,12 +166,14 @@ public interface BlockReplacementRule {
          */
         private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
 
-        private StatelessBlockReplacementRule(@NotNull Block real, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @Nullable Supplier<@NotNull Item> fallbackItemSupplier) {
+        private StatelessBlockReplacementRule(@NotNull Block real, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @Nullable Supplier<@NotNull Item> fallbackItemSupplier, @NotNull Model model) {
             this.real = real;
             this.host = host;
             this.hostReplacement = hostReplacement;
             this.fallback = fallback;
             this.fallbackItemSupplier = fallbackItemSupplier;
+            this.model = model;
+            Validate.isTrue(this.model.getType() == ModelType.BLOCK);
         }
 
         @Override
@@ -194,7 +204,7 @@ public interface BlockReplacementRule {
         }
 
         @Override
-        public @Nullable BlockModel getModelForStatePlacedByItem() {
+        public @Nullable Model getModelForStatePlacedByItem() {
             return this.model;
         }
 
@@ -232,16 +242,11 @@ public interface BlockReplacementRule {
 
         @Override
         public void addToResourcePack(@NotNull MemoryResourcePack resourcePack) {
-            @NotNull NamespacedKey hostKey = Registry.BLOCK.getResourceKey(this.host.getBlock()).get().asBukkit();
-            @NotNull NamespacedKey realKey =  Registry.BLOCK.getResourceKey(this.real).get().asBukkit();
-            @NotNull NamespacedKey realBlockKey = PathConstants.getBlockModel(realKey);
-            @NotNull ResourcePackBlockStates minecraftBlockStates = resourcePack.getAsset(ResourcePackAssetType.BLOCK_STATES, hostKey);
-            minecraftBlockStates.setNoVariantModel(realBlockKey);
-            @NotNull ResourcePackBlockModel blockModel = resourcePack.getAsset(ResourcePackAssetType.BLOCK_MODEL, realBlockKey);
-            blockModel.set(this.model);
-            this.model.addToResourcePack(resourcePack);
-            //TODO
-            return null;
+            @NotNull NamespacedKey hostKey = Registry.BLOCK.getKey(this.host.getBlock()).asBukkit();
+            @NotNull NamespacedKey realKey =  Registry.BLOCK.getKey(this.real).asBukkit();
+            @NotNull MutableResourcePackBlockStates<?, ?> minecraftBlockStates = resourcePack.getMutableAsset(ResourcePackAssetType.BLOCK_STATES, hostKey);
+            minecraftBlockStates.setNoVariantModel(this.model);
+            this.model.addToResourcePack(resourcePack, false);
         }
 
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index 3ced1c6b1b0d66432f402dc12f5ea3c3ae3993bb..a2989d009e73d07a4948d2881d4826a0e0dd77ef 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -10,6 +10,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Material;
+import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
 
 /**
  * Based on {@link net.minecraft.world.level.block.Blocks}
@@ -25,7 +26,8 @@ public class SuCraftBlocks {
             .withHost(Blocks.INFESTED_STONE_BRICKS)
             .withHostReplacement(Blocks.STONE_BRICKS)
             .withFallback(Blocks.STONE_BRICKS)
-            .withFallbackBlockAsItem(),
+            .withFallbackBlockAsItem()
+            .withModelContent(ModelContent.cube(TODOFilePathToImage)),
         new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F))
     );
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index 59d22a886fe25660fb8655002a340df8da6eea10..5b515c2c1c971f521263b78a3200a0a13e1381f0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -1,6 +1,7 @@
 package nl.martijnmuijsers.paper.item;
 
 import it.unimi.dsi.fastutil.objects.Object2IntFunction;
+import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.server.MinecraftServer;
@@ -11,6 +12,9 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.block.BlockReplacementRule;
 import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.model.Model;
+import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
+import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
@@ -34,7 +38,7 @@ public interface ItemReplacementRule {
 
     @NotNull Item getReal();
 
-    @NotNull ItemModel getModel();
+    @NotNull Model getModel();
 
     void addToResourcePack(@NotNull MemoryResourcePack resourcePack);
 
@@ -46,7 +50,7 @@ public interface ItemReplacementRule {
             private @Nullable Supplier<@NotNull Item> hostSupplier;
             private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
             private @Nullable Supplier<@NotNull Item> fallbackSupplier;
-            private @Nullable ItemModel model;
+            private @Nullable Supplier<@NotNull Model> modelSupplier;
 
             @Override
             public @NotNull SimpleItemReplacementRule.Builder withReal(@NotNull Item real) {
@@ -74,8 +78,16 @@ public interface ItemReplacementRule {
                 return this;
             }
 
-            public @NotNull SimpleItemReplacementRule.Builder withModel(@NotNull ItemModel model) {
-                this.model = model;
+            public @NotNull SimpleItemReplacementRule.Builder withModel(@NotNull Model model) {
+                this.modelSupplier = () -> model;
+                return this;
+            }
+
+            public @NotNull SimpleItemReplacementRule.Builder withModelContent(@NotNull ModelContent modelContent) {
+                this.modelSupplier = () -> {
+                    Validate.notNull(this.real);
+                    return modelContent.asModel(ModelType.ITEM, Registry.ITEM.getKey(this.real).asBukkit());
+                };
                 return this;
             }
 
@@ -93,8 +105,8 @@ public interface ItemReplacementRule {
                 Validate.notNull(this.hostSupplier);
                 Validate.notNull(this.computeHostCustomModelData);
                 Validate.notNull(this.fallbackSupplier);
-                Validate.notNull(this.model);
-                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier, this.model);
+                Validate.notNull(this.modelSupplier);
+                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier, this.modelSupplier.get());
             }
 
         }
@@ -106,14 +118,15 @@ public interface ItemReplacementRule {
         private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
         private @Nullable Item fallback = null;
         private @Nullable Supplier<@NotNull Item> fallbackSupplier;
-        private @NotNull ItemModel model;
+        private @NotNull Model model;
 
-        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull ItemModel model) {
+        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull Model model) {
             this.real = real;
             this.hostSupplier = hostSupplier;
             this.computeHostCustomModelData = computeHostCustomModelData;
             this.fallbackSupplier = fallbackSupplier;
             this.model = model;
+            Validate.isTrue(this.model.getType() == ModelType.ITEM);
         }
 
         @Override
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
index ace0ae80ea5ee8c280b128c1724bd8a9637f3717..73960a8760fd18a58ab1f8085c9ea6574e7a168a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
@@ -3,19 +3,31 @@
 package nl.martijnmuijsers.paper.resourcepack;
 
 import com.google.gson.JsonObject;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * Concrete implementation of {@link MutableResourcePackBlockStates}
  */
-public class ConcreteResourcePackBlockStates extends JsonResourcePackAsset<ConcreteResourcePackBlockStates> implements MutableResourcePackBlockStates {
+public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset<ConcreteResourcePackBlockStates, ResourcePackBlockStates<?>> implements MutableResourcePackBlockStates<ConcreteResourcePackBlockStates, ConcreteResourcePackBlockStates> {
 
-    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull String namespace, @NotNull String key) {
-        super(ConcreteResourcePackBlockStates::new, json, namespace, key);
+    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull NamespacedKey key) {
+        super(ConcreteResourcePackBlockStates::new, json, key);
     }
 
-    public ConcreteResourcePackBlockStates(@NotNull ResourcePackBlockStates reference) {
-        this(reference.getJson().deepCopy(), reference.getNamespace(), reference.getKey());
+    public ConcreteResourcePackBlockStates(@NotNull ResourcePackBlockStates<?> reference) {
+        this(reference.getJson(), reference.getKey());
+    }
+
+
+    @Override
+    public @NotNull ResourcePackAssetType<? extends ResourcePackBlockStates<?>, ? extends MutableResourcePackBlockStates<?, ?>> getType() {
+        return ResourcePackAssetType.BLOCK_STATES;
+    }
+
+    @Override
+    public @NotNull ConcreteResourcePackBlockStates mergeToMutable(@NotNull ConcreteResourcePackBlockStates other) {
+        return this.mergeToMutable((ResourcePackBlockStates<?>) other);
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..09a59bfb3bc1a5a2148613a37da68d8950142fd5
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackModel.java
@@ -0,0 +1,32 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Concrete implementation of {@link MutableResourcePackModel}
+ */
+public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<ConcreteResourcePackModel, ResourcePackModel<?>> implements MutableResourcePackModel<ConcreteResourcePackModel, ConcreteResourcePackModel> {
+
+    public ConcreteResourcePackModel(@NotNull JsonObject json, @NotNull NamespacedKey key) {
+        super(ConcreteResourcePackModel::new, json, key);
+    }
+
+    public ConcreteResourcePackModel(@NotNull ResourcePackModel<?> reference) {
+        this(reference.getJson(), reference.getKey());
+    }
+
+    @Override
+    public @NotNull ResourcePackAssetType<? extends ResourcePackModel<?>, ? extends MutableResourcePackModel<?, ?>> getType() {
+        return ResourcePackAssetType.MODEL;
+    }
+
+    @Override
+    public @NotNull ConcreteResourcePackModel mergeToMutable(@NotNull ConcreteResourcePackModel other) {
+        return this.mergeToMutable((ResourcePackModel<?>) other);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
index f698967df5518819a4657e1c695e37845a9be201..85ecadeb38c735001ed15352cf7b297a3a3968f3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
@@ -7,10 +7,10 @@ import org.jetbrains.annotations.NotNull;
 /**
  * A {@link ResourcePackAssetType} that can be initialized to some empty state
  */
-public class InitializableResourcePackAssetType<T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> extends ResourcePackAssetType<T, MT> {
+public class InitializableResourcePackAssetType<T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> extends ResourcePackAssetType<T, MT> {
 
-    protected InitializableResourcePackAssetType(@NotNull String folderName) {
-        super(folderName);
+    protected InitializableResourcePackAssetType(@NotNull String folderPathInNamespaceFolder) {
+        super(folderPathInNamespaceFolder);
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
index 056a472e22f9f6446e4b803c7321445c9da937f2..c6739b6e20b731d107464a36bfcd62415dc3c119 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
@@ -6,28 +6,10 @@ import com.google.gson.JsonObject;
 import org.jetbrains.annotations.NotNull;
 
 /**
- * Base implementation of {@link MutableResourcePackAsset} for JSON assets
+ * A {@link ResourcePackAsset} with JSON data
  */
-public abstract class JsonResourcePackAsset<T extends JsonResourcePackAsset<T>> extends SimpleResourcePackAsset<T> {
+public interface JsonResourcePackAsset<T> extends ResourcePackAsset<T> {
 
-    protected interface JsonResourcePackAssetConstructor<T extends JsonResourcePackAsset<T>> {
-
-        @NotNull T construct(@NotNull JsonObject json, @NotNull String namespace, @NotNull String key);
-
-    }
-
-    private final @NotNull JsonResourcePackAssetConstructor<T> constructor;
-    protected final @NotNull JsonObject json;
-
-    protected JsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T> constructor, @NotNull JsonObject json, @NotNull String namespace, @NotNull String key) {
-        super(namespace, key);
-        this.constructor = constructor;
-        this.json = json;
-    }
-
-    @Override
-    public @NotNull T mergeToMutable(@NotNull T other) {
-        return this.constructor.construct(JsonMerging.merge(this.json, other.json), this.getNamespace(), this.getKey());
-    }
+    @NotNull JsonObject getJson();
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
index e8fd6c2dd80d6ba1550efdd3e5dd8b34d8363e26..09e637a375a341ff1c76f887bf2fddb5f3f3a1a7 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
@@ -15,33 +15,21 @@ public interface MutableResourcePack extends ResourcePack {
     @NotNull ResourcePackSettings getSettings();
 
     @Override
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException {
+    default <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
         //noinspection unchecked
-        return (T) this.getMutableAsset(type, namespace, key);
+        return (T) this.getMutableAsset(type, key);
     }
 
-    <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException;
+    <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException;
 
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable MT getOptionalMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) {
+    default <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @Nullable MT getOptionalMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) {
         try {
-            return this.getMutableAsset(type, namespace, key);
+            return this.getMutableAsset(type, key);
         } catch (Exception e) {
             return null;
         }
     }
 
-    <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException;
-
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
-        return this.getMutableAsset(type, key.getNamespace(), key.getKey());
-    }
-
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable MT getOptionalMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) {
-        return this.getOptionalMutableAsset(type, key.getNamespace(), key.getKey());
-    }
-
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
-        return this.getOrCreateAsset(type, key.getNamespace(), key.getKey());
-    }
+    <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException;
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
index 79e97f62e3e15c7d0f38d5d560d0d6c0bf236d0e..40c3d92c92da72dfc2f95bd0af2d668c636a12b7 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * A mutable {@link ResourcePackAsset}
  */
-public interface MutableResourcePackAsset<T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> extends ResourcePackAsset<T> {
+public interface MutableResourcePackAsset<T, MT> extends ResourcePackAsset<T> {
 
     @Override
     default @NotNull T merge(@NotNull T other) {
@@ -22,4 +22,9 @@ public interface MutableResourcePackAsset<T extends ResourcePackAsset<T>, MT ext
      */
     @NotNull MT mergeToMutable(@NotNull T other);
 
+    default @NotNull MT mergeToMutableUntyped(@NotNull Object other) {
+        //noinspection unchecked
+        return this.mergeToMutable((T) other);
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
index 5b665378bb8be1106ba3282edf5daff1bb16e910..dca54daec3c485b2b129ac2e21cbd3c89746d89d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
@@ -2,7 +2,13 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
+import org.jetbrains.annotations.NotNull;
+
 /**
  * A mutable {@link ResourcePackBlockStates}
  */
-public interface MutableResourcePackBlockStates extends MutableResourcePackAsset<ResourcePackBlockStates, MutableResourcePackBlockStates>, ResourcePackBlockStates {}
+public interface MutableResourcePackBlockStates<T, MT> extends MutableResourcePackAsset<T, MT>, ResourcePackBlockStates<T> {
+
+    @NotNull MT mergeToMutable(@NotNull ResourcePackBlockStates<?> other);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..0ec95a6876e178f0396c0b6e062f46cb5fe1c69e
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackModel.java
@@ -0,0 +1,14 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A mutable {@link ResourcePackModel}
+ */
+public interface MutableResourcePackModel<T, MT> extends MutableResourcePackAsset<T, MT>, ResourcePackModel<T> {
+
+    @NotNull MT mergeToMutable(@NotNull ResourcePackModel<?> other);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
index 2430507485d55e6ce404bc92dc840aa9a9f65bd7..fc5f5c821ae2401705be3f10c33586570895cfa2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
@@ -19,7 +19,17 @@ public final class PathConstants {
     public static final class PackMeta {
 
         public static final @NotNull String name = "pack.mcmeta";
-        public static final @NotNull String path = name;
+        public static final @NotNull String pathFromRoot = name;
+
+    }
+
+    /**
+     * The assets folder
+     */
+    public static final class Assets {
+
+        public static final @NotNull String name = "assets";
+        public static final @NotNull String pathFromRoot = name;
 
     }
 
@@ -29,7 +39,7 @@ public final class PathConstants {
     public static final class BlockStates {
 
         public static final @NotNull String name = "blockstates";
-        public static final @NotNull String path = name;
+        public static final @NotNull String pathInNamespaceFolder = name;
 
     }
 
@@ -39,7 +49,7 @@ public final class PathConstants {
     public static final class Models {
 
         public static final @NotNull String name = "models";
-        public static final @NotNull String path = name;
+        public static final @NotNull String pathInNamespaceFolder = name;
 
         /**
          * The block models folder
@@ -47,7 +57,7 @@ public final class PathConstants {
         public static final class Block {
 
             public static final @NotNull String name = "block";
-            public static final @NotNull String path = Models.path + "/" + name;
+            public static final @NotNull String pathInNamespaceFolder = Models.pathInNamespaceFolder + "/" + name;
 
         }
 
@@ -57,7 +67,7 @@ public final class PathConstants {
         public static final class Item {
 
             public static final @NotNull String name = "item";
-            public static final @NotNull String path = Models.path + "/" + name;
+            public static final @NotNull String pathInNamespaceFolder = Models.pathInNamespaceFolder + "/" + name;
 
         }
 
@@ -71,4 +81,12 @@ public final class PathConstants {
         return new NamespacedKey(item.getNamespace(), Models.Item.name + "/" + item.getKey());
     }
 
+    public static @NotNull String getNamespaceFolderPathFromRoot(@NotNull String namespace) {
+        return Assets.pathFromRoot + "/" + namespace;
+    }
+
+    public static @NotNull String getNamespaceFolderPathFromRoot(@NotNull NamespacedKey key) {
+       return getNamespaceFolderPathFromRoot(key.getNamespace());
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
index 392860791bfa139630905a8a1109ccefea33968c..39a599ca0188c78cf7dc0e678c2ff5a22d39c5e7 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
@@ -13,22 +13,14 @@ public interface ResourcePack {
 
     @NotNull ResourcePackSettings getSettings();
 
-    <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException;
+    <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException;
 
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) {
+    default <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) {
         try {
-            return this.getAsset(type, namespace, key);
+            return this.getAsset(type, key);
         } catch (Exception e) {
             return null;
         }
     }
 
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
-        return this.getAsset(type, key.getNamespace(), key.getKey());
-    }
-
-    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) {
-      return this.getOptionalAsset(type, key.getNamespace(), key.getKey());
-    }
-
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
index e6e5bdcb012e8a415dddd71b6395ba7120a747f6..6176372451b470c579429f35bc108d44cc5d59ae 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
@@ -2,19 +2,19 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**
  * An asset (element of some asset type) in a {@link ResourcePack}
  */
-public interface ResourcePackAsset<T extends ResourcePackAsset<T>> {
+public interface ResourcePackAsset<T> {
 
-    @NotNull String getNamespace();
+    @NotNull ResourcePackAssetType<?, ?> getType();
 
-    /**
-     * This is the part of the key without the namespace
-     */
-    @NotNull String getKey();
+    @NotNull NamespacedKey getKey();
+
+    @NotNull String getPathInResourcePack();
 
     /**
      * Gets the result of merging this asset with the given one
@@ -23,4 +23,9 @@ public interface ResourcePackAsset<T extends ResourcePackAsset<T>> {
      */
     @NotNull T merge(@NotNull T other);
 
+    default @NotNull T mergeUntyped(@NotNull Object other) {
+        //noinspection unchecked
+        return this.merge((T) other);
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
index 500b0946fe5da97956712e118e14214681ee78e8..e350600d3bdaa854f0d89d6309ae175534726560 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
@@ -7,18 +7,19 @@ import org.jetbrains.annotations.NotNull;
 /**
  * A type of {@link ResourcePackAsset}
  */
-public class ResourcePackAssetType<T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> {
+public class ResourcePackAssetType<T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> {
 
-    public static final @NotNull ResourcePackAssetType<ResourcePackBlockStates, MutableResourcePackBlockStates> BLOCK_STATES = new InitializableResourcePackAssetType<>(PathConstants.blockStates);
+    public static final @NotNull ResourcePackAssetType<? extends ResourcePackBlockStates<?>, ? extends MutableResourcePackBlockStates<?, ?>> BLOCK_STATES = new InitializableResourcePackAssetType<>(PathConstants.BlockStates.pathInNamespaceFolder);
+    public static final @NotNull ResourcePackAssetType<? extends ResourcePackModel<?>, ? extends MutableResourcePackModel<?, ?>> MODEL = new InitializableResourcePackAssetType<>(PathConstants.Models.pathInNamespaceFolder);
 
-    private final @NotNull String folderName;
+    private final @NotNull String folderPathInNamespaceFolder;
 
     protected ResourcePackAssetType(@NotNull String folderName) {
-        this.folderName = folderName;
+        this.folderPathInNamespaceFolder = folderName;
     }
 
-    public @NotNull String getFolderName() {
-        return this.folderName;
+    public @NotNull String getFolderPathInNamespaceFolder() {
+        return this.folderPathInNamespaceFolder;
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
index 9237b48ac30d10c2657b7e23a0712dde0dc16643..22848e27772c2b3b741647c0f4e1cbd2c692e5d5 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
@@ -2,7 +2,10 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.NotNull;
+
 /**
  * An element of 'blockstates' in a {@link ResourcePack}
  */
-public interface ResourcePackBlockStates extends ResourcePackAsset<ResourcePackBlockStates> {}
+public interface ResourcePackBlockStates<T> extends JsonResourcePackAsset<T> {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..7e51d43a9096ac71daea2f66e885c8795c11fa73
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackModel.java
@@ -0,0 +1,11 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * An element of 'models' in a {@link ResourcePack}
+ */
+public interface ResourcePackModel<T> extends JsonResourcePackAsset<T> {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleJsonResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleJsonResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..f1d34214faaf2312f101537f4bc8b639f5aff29a
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleJsonResourcePackAsset.java
@@ -0,0 +1,42 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Base implementation of {@link MutableResourcePackAsset} for JSON assets
+ */
+public abstract class SimpleJsonResourcePackAsset<T extends SimpleJsonResourcePackAsset<T, IT>, IT extends JsonResourcePackAsset<?>> extends SimpleResourcePackAsset<T> implements JsonResourcePackAsset<T> {
+
+    protected interface JsonResourcePackAssetConstructor<T extends SimpleJsonResourcePackAsset<T, IT>, IT extends JsonResourcePackAsset<?>> {
+
+        @NotNull T construct(@NotNull JsonObject json, @NotNull NamespacedKey key);
+
+    }
+
+    private final @NotNull JsonResourcePackAssetConstructor<T, IT> constructor;
+    protected @NotNull JsonObject json;
+
+    protected SimpleJsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T, IT> constructor, @NotNull JsonObject json, @NotNull NamespacedKey key) {
+        super(key);
+        this.constructor = constructor;
+        this.json = json;
+    }
+
+    @Override
+    public @NotNull String getPathInResourcePack() {
+        return this.getPathWithoutFileExtensionInResourcePack() + ".json";
+    }
+
+    public @NotNull T mergeToMutable(@NotNull IT other) {
+        return this.constructor.construct(JsonMerging.merge(this.json, other.getJson()), this.getKey());
+    }
+
+    public @NotNull JsonObject getJson() {
+        return this.json.deepCopy();
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
index 7ae87bc9b430d820a3657861158c6e94a2d0f80b..6387b1f2cfce8f14ea0bb7e5d545139574c4047a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
@@ -2,6 +2,7 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -9,22 +10,22 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class SimpleResourcePackAsset<T extends SimpleResourcePackAsset<T>> implements MutableResourcePackAsset<T, T> {
 
-    private final @NotNull String namespace;
-    private final @NotNull String key;
+    /**
+     * This key does not include the asset folder (such as models) but does include any subfolders (such as block)
+     */
+    private final @NotNull NamespacedKey key;
 
-    protected SimpleResourcePackAsset(@NotNull String namespace, @NotNull String key) {
-        this.namespace = namespace;
+    protected SimpleResourcePackAsset(@NotNull NamespacedKey key) {
         this.key = key;
     }
 
     @Override
-    public @NotNull String getNamespace() {
-        return this.namespace;
+    public @NotNull NamespacedKey getKey() {
+        return this.key;
     }
 
-    @Override
-    public @NotNull String getKey() {
-        return this.key;
+    protected @NotNull String getPathWithoutFileExtensionInResourcePack() {
+        return PathConstants.getNamespaceFolderPathFromRoot(this.key) + "/" + this.getType().getFolderPathInNamespaceFolder() + "/" + this.key.getKey();
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
index 94ad976fe4a49e40f685661edc2cac76edfdec08..f59e831d8ac098c74f0f0a6334d26abc9eff9031 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
@@ -4,15 +4,20 @@ package nl.martijnmuijsers.paper.resourcepack.memory;
 
 import com.google.common.collect.ImmutableList;
 import com.google.gson.JsonObject;
+import it.unimi.dsi.fastutil.Pair;
 import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackModel;
 import nl.martijnmuijsers.paper.resourcepack.InitializableResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePackBlockStates;
-import org.apache.commons.lang3.tuple.ImmutableTriple;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackModel;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -43,7 +48,7 @@ public class MemoryResourcePack implements MutableResourcePack {
 
     private final @NotNull MemoryResourcePackSettings settings = new MemoryResourcePackSettings(this);
 
-    private final @NotNull Map<@NotNull ImmutableTriple<@NotNull ResourcePackAssetType<?, ?>, @NotNull String, @NotNull String>, @NotNull ResourcePackAsset<?>> assets = new HashMap<>(0);
+    private final @NotNull Map<@NotNull Pair<@NotNull ResourcePackAssetType<?, ?>, @NotNull NamespacedKey>, @NotNull ResourcePackAsset<?>> assets = new HashMap<>(0);
 
     public MemoryResourcePack() {}
 
@@ -72,32 +77,39 @@ public class MemoryResourcePack implements MutableResourcePack {
         return this.settings;
     }
 
-    private <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT copyToMutable(@NotNull ResourcePackAssetType<T, MT> type, @NotNull T asset) {
+    private <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull MT copyToMutable(@NotNull ResourcePackAssetType<T, MT> type, @NotNull T asset) {
         if (type.equals(ResourcePackAssetType.BLOCK_STATES)) {
-            if (asset instanceof ConcreteResourcePackBlockStates) {
+            if (asset instanceof MutableResourcePackBlockStates<?, ?>) {
                 //noinspection unchecked
                 return (MT) asset;
             }
             //noinspection unchecked
-            return (MT) new ConcreteResourcePackBlockStates((ResourcePackBlockStates) asset);
+            return (MT) new ConcreteResourcePackBlockStates((ResourcePackBlockStates<?>) asset);
+        } else if (type.equals(ResourcePackAssetType.MODEL)) {
+            if (asset instanceof MutableResourcePackModel<?, ?>) {
+                //noinspection unchecked
+                return (MT) asset;
+            }
+            //noinspection unchecked
+            return (MT) new ConcreteResourcePackModel((ResourcePackModel<?>) asset);
         } else {
-            throw new IllegalArgumentException("Attempted to create mutable asset for memory resource pack by cloning a given asset, but the type (" + type.getFolderName() + ") is not a known copiable type");
+            throw new IllegalArgumentException("Attempted to create mutable asset for memory resource pack by cloning a given asset, but the type (" + type.getFolderPathInNamespaceFolder() + ") is not a known copiable type");
         }
     }
 
     @Override
-    public <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException {
+    public <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
         @SuppressWarnings("unchecked")
-        @Nullable MT foundOrDerivedAsset = (MT) this.assets.computeIfAbsent(new ImmutableTriple<>(type, namespace, key), namespacedKey -> {
+        @Nullable MT foundOrDerivedAsset = (MT) this.assets.computeIfAbsent(Pair.of(type, key), namespacedKey -> {
             // Try creating a merged asset from the included resource packs
             @Nullable MT derivedAsset = null;
             for (@NotNull ResourcePack includedResourcePack : this.getIncludedResourcePacks()) {
-                @Nullable T includedAsset = includedResourcePack.getOptionalAsset(type, namespace, key);
+                @Nullable T includedAsset = includedResourcePack.getOptionalAsset(type, key);
                 if (includedAsset != null) {
                     if (derivedAsset == null) {
                         derivedAsset = this.copyToMutable(type, includedAsset);
                     } else {
-                        derivedAsset = derivedAsset.mergeToMutable(includedAsset);
+                        derivedAsset = (MT) derivedAsset.mergeToMutableUntyped(includedAsset);
                     }
                 }
             }
@@ -106,7 +118,7 @@ public class MemoryResourcePack implements MutableResourcePack {
             }
             // Try finding the default form of the asset in the default resource packs
             for (@NotNull ResourcePack defaultResourcePack : this.getDefaultResourcePacks()) {
-                @Nullable T defaultAsset = defaultResourcePack.getOptionalAsset(type, namespace, key);
+                @Nullable T defaultAsset = defaultResourcePack.getOptionalAsset(type, key);
                 if (defaultAsset != null) {
                     return this.copyToMutable(type, defaultAsset);
                 }
@@ -121,19 +133,22 @@ public class MemoryResourcePack implements MutableResourcePack {
     }
 
     @Override
-    public <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException {
-        @Nullable MT existingAsset = getOptionalMutableAsset(type, namespace, key);
+    public <T extends ResourcePackAsset<?>, MT extends MutableResourcePackAsset<?, ?>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+        @Nullable MT existingAsset = getOptionalMutableAsset(type, key);
         if (existingAsset != null) {
             return existingAsset;
         }
         @NotNull MT newAsset;
         if (type.equals(ResourcePackAssetType.BLOCK_STATES)) {
             //noinspection unchecked
-            newAsset = (MT) new ConcreteResourcePackBlockStates(new JsonObject(), namespace, key);
+            newAsset = (MT) new ConcreteResourcePackBlockStates(new JsonObject(), key);
+        } else if (type.equals(ResourcePackAssetType.MODEL)) {
+            //noinspection unchecked
+            newAsset = (MT) new ConcreteResourcePackModel(new JsonObject(), key);
         } else {
-            throw new IllegalArgumentException("Attempted to create asset for memory resource pack, but the type (" + type.getFolderName() + ") is not a known initializable type");
+            throw new IllegalArgumentException("Attempted to create asset for memory resource pack, but the type (" + type.getFolderPathInNamespaceFolder() + ") is not a known initializable type");
         }
-        this.assets.put(new ImmutableTriple<>(type, namespace, key), newAsset);
+        this.assets.put(Pair.of(type, key), newAsset);
         return newAsset;
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/BlockModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/BlockModel.java
deleted file mode 100644
index fbaef52623e18b214d27f69a476396383e823666..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/BlockModel.java
+++ /dev/null
@@ -1,5 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-public interface BlockModel extends Model, UnnamedBlockModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ItemModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ItemModel.java
deleted file mode 100644
index fef2209b78f82bb5329ad568bca85e41e4e41c4e..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ItemModel.java
+++ /dev/null
@@ -1,7 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-
-public interface ItemModel extends Model, UnnamedItemModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
index 2c3bf5c8262e8b52f2121ff0ea59d76a53bb1e39..6e78a201735c4b4d64956d1c18682007e906a79c 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
@@ -2,15 +2,58 @@
 
 package nl.martijnmuijsers.paper.resourcepack.model;
 
+import nl.martijnmuijsers.paper.resourcepack.PathConstants;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
+import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 /**
- * A named {@link UnnamedModel}
+ * An immutable item or block model
  */
-public interface Model extends UnnamedModel {
+public class Model {
 
-    public @NotNull String getNamespace();
+    private final @NotNull ModelType type;
+    /**
+     * This key does not include the type of model (such as: it is sucraft:snowy_stone_bricks, not sucraft:block/snowy_stone_bricks)
+     */
+    private final @NotNull NamespacedKey key;
+    private final @NotNull ModelContent content;
 
-    public @NotNull String getKey();
+    public Model(@NotNull ModelType type, @NotNull NamespacedKey key, @NotNull ModelContent content) {
+        this.type = type;
+        this.key = key;
+        this.content = content;
+    }
+
+    public @NotNull ModelType getType() {
+        return this.type;
+    }
+
+    public @NotNull NamespacedKey getKey() {
+        return this.key;
+    }
+
+    public @NotNull NamespacedKey getKeyWithType() {
+        return switch (this.type) {
+            case BLOCK -> PathConstants.getBlockModel(getKey());
+            case ITEM -> PathConstants.getItemModel(getKey());
+        };
+    }
+
+    public @NotNull ModelContent getContent() {
+        return this.content;
+    }
+
+    public @NotNull Model asItemModel() {
+        if (getType() == ModelType.ITEM) {
+            return this;
+        }
+        return new Model(ModelType.ITEM, key, content);
+    }
+
+    public void addToResourcePack(@NotNull MemoryResourcePack resourcePack, boolean overwriteExisting) {
+        @NotNull ResourcePackModel resourcePackModel = resourcePack.getMutableAsset(ResourcePackAssetType.MDOEL, this.getKeyWithType());
+    }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..2b416ba0c345c07f28f95653c61e501a7f361542
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelContent.java
@@ -0,0 +1,17 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The immutable content of a model: a {@link Model} without any information about its appropriate location in a resource pack
+ */
+public class ModelContent {
+
+    public @NotNull Model asModel(@NotNull ModelType type, @NotNull NamespacedKey key) {
+        return new Model(type, key, this);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
index be61e2b967913e738999a5c08997a1f122930092..49071dad4380ea4c4b2a9f91dcd70eb701f55c3d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
@@ -1,10 +1,15 @@
+// Martijn - custom blocks and items
+
 package nl.martijnmuijsers.paper.resourcepack.model;
 
 /**
- * A type of model: either for blocks or items
+ * The type of a {@link Model}
  */
 public enum ModelType {
 
+    BLOCK,
+    ITEM;
 
+    ModelType() {}
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedBlockModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedBlockModel.java
deleted file mode 100644
index 3665936eb3f2efde37c8e48ded2ba4111c78c260..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedBlockModel.java
+++ /dev/null
@@ -1,8 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-/**
- * A model for a block, but only the content (not a name to reference it by in a resource pack)
- */
-public interface UnnamedBlockModel extends UnnamedModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedItemModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedItemModel.java
deleted file mode 100644
index 6ad6f03cadf13b7896ac4251dd42b3d53b0c24d7..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedItemModel.java
+++ /dev/null
@@ -1,8 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-/**
- * A model for a block, but only the content (not a name to reference it by in a resource pack)
- */
-public interface UnnamedItemModel extends UnnamedModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedModel.java
deleted file mode 100644
index f3713c59042027714e632a1cf44a3ad239e3ba4f..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedModel.java
+++ /dev/null
@@ -1,12 +0,0 @@
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-import org.jetbrains.annotations.NotNull;
-
-/**
- * A model for a block or item, but only the content (not a name to reference it by in a resource pack)
- */
-public interface UnnamedModel {
-
-    @NotNull ModelType getType();
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java
index f31ea37ff1ea0d69996d32d24304194cf9af9f4a..3d9a586c9ca60ea8797d586a54d5233e9c2f3cb3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java
@@ -29,7 +29,7 @@ public class ReadFromArchiveResourcePackSettings implements ResourcePackSettings
 
     private @NotNull JsonObject getPackMetaJson() {
         if (this.packMetaJson == null) {
-            this.packMetaJson = this.pack.readJsonAsset(PathConstants.packMeta);
+            this.packMetaJson = this.pack.readJsonAsset(PathConstants.PackMeta.pathFromRoot);
         }
         return this.packMetaJson;
     }
