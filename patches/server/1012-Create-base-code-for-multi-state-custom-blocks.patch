From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 7 Jul 2022 16:50:56 +0200
Subject: [PATCH] Create base code for multi-state custom blocks


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 5b079540a777db3f88cb356ee735d498fe6b5ed0..b40fd89ebe9c69fdc490c845d539172701853cc4 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -34,6 +34,18 @@ public class GlobalConfiguration extends ConfigurationPart {
     @Setting(Configuration.VERSION_FIELD)
     public int version = CURRENT_VERSION;
 
+    // Martijn start - custom blocks and items
+
+    public CustomBlocksAndItems customBlocksAndItems;
+
+    public class CustomBlocksAndItems extends ConfigurationPart {
+
+        public int maxPingThatCountsAsLowForCustomBlocks = 300;
+
+    }
+
+    // Martijn end - custom blocks and items
+
     // Martijn start - custom strongholds
 
     public CustomStrongholds customStrongholds;
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 678d26606b09c7dad3236509e1a88e03f5cc9b8f..9c02b00e5e15386f113baa7432d9e2a5515db111 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -346,10 +346,12 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
 
     public boolean doesPlayerHaveSuCraftResourcePack() {
         var player = getPlayer();
-        if (player == null) {
-            return false;
-        }
-        return player.hasSuCraftResourcePack();
+        return player != null ? player.hasSuCraftResourcePack() : false;
+    }
+
+    public boolean doesPlayerHaveHighPingForCustomBlocks() {
+        var player = getPlayer();
+        return player != null ? player.hasHighPingForCustomBlocks() : false;
     }
 
     // Martijn end - custom blocks and items
@@ -460,7 +462,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             this.channel.config().setAutoRead(false);
         }
 
-        Packet<?> modifiedPacket = packet.replaceCustomContent(this.doesPlayerHaveSuCraftResourcePack()); // Martijn - custom blocks and items
+        Packet<?> modifiedPacket = packet.replaceCustomContent(this.doesPlayerHaveSuCraftResourcePack(), this.doesPlayerHaveHighPingForCustomBlocks()); // Martijn - custom blocks and items
 
         if (this.channel.eventLoop().inEventLoop()) {
             this.doSendPacket(modifiedPacket, callback, enumprotocol, enumprotocol1, flush); // Paper - add flush parameter // Martijn - custom blocks and items
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 3f51ff05e21190b828c10e098bf96ec70ca3ea9b..65455b8aca7d737fbccd88d44bea004a58e5b702 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -83,7 +83,10 @@ public class FriendlyByteBuf extends ByteBuf {
     private static final int MAX_PUBLIC_KEY_HEADER_SIZE = 256;
     private static final int MAX_PUBLIC_KEY_LENGTH = 512;
 
-    public @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    public @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    public @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public FriendlyByteBuf(ByteBuf parent) {
         this.source = parent;
@@ -598,7 +601,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
             // Martijn start - custom blocks and items
             if (item.replacementRule != null && doesNetworkTargetHaveResourcePack != null) {
-                ItemStack replacedStack = item.replacementRule.replace(stack, doesNetworkTargetHaveResourcePack);
+                ItemStack replacedStack = item.replacementRule.replace(stack, doesNetworkTargetHaveResourcePack, doesNetworkTargetHaveHighPing != null ? doesNetworkTargetHaveHighPing : false);
                 if (replacedStack != null) {
                     stack = replacedStack;
                     item = replacedStack.getItem();
diff --git a/src/main/java/net/minecraft/network/PacketEncoder.java b/src/main/java/net/minecraft/network/PacketEncoder.java
index aa71fb123042375367792d300ac80ca78aed36d8..78bcdcb62d52ceaac6dd6b76b25d53630c79c6f1 100644
--- a/src/main/java/net/minecraft/network/PacketEncoder.java
+++ b/src/main/java/net/minecraft/network/PacketEncoder.java
@@ -40,6 +40,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
                     int i = friendlyByteBuf.writerIndex();
                     // Martijn start - custom blocks and items
                     friendlyByteBuf.doesNetworkTargetHaveResourcePack = packet.doesNetworkTargetHaveResourcePack();
+                    friendlyByteBuf.doesNetworkTargetHaveHighPing = packet.doesNetworkTargetHaveHighPing();
                     // Martijn end - custom blocks and items
                     packet.write(friendlyByteBuf);
                     int j = friendlyByteBuf.writerIndex() - i;
diff --git a/src/main/java/net/minecraft/network/protocol/Packet.java b/src/main/java/net/minecraft/network/protocol/Packet.java
index 87093defb3d443b9a90e6fb7bc48b0acd8318269..4d051263727b212fef6d4d295d90f4f6bae60af4 100644
--- a/src/main/java/net/minecraft/network/protocol/Packet.java
+++ b/src/main/java/net/minecraft/network/protocol/Packet.java
@@ -44,7 +44,7 @@ public interface Packet<T extends PacketListener> {
      * a real risk of a single packet instance with custom content to be replaced being sent to multiple players with
      * differing resource pack statuses, this method may return a different instance.
      */
-    default @NotNull Packet<T> replaceCustomContent(boolean hasResourcePack) {
+    default @NotNull Packet<T> replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         return this;
     }
 
@@ -52,6 +52,10 @@ public interface Packet<T extends PacketListener> {
         return null;
     }
 
+    default @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return null;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index 71a6b1ce0f4116578a99ed255ae94ab9896f95f9..c9bb0944fe1b32fd95e711e2e73faed426daa025 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -54,7 +54,7 @@ public class ClientboundBlockUpdatePacket implements Packet<ClientGamePacketList
     private final ReplacedCustomContentCache<ClientboundBlockUpdatePacket> replacedCustomContentCache = new ReplacedCustomContentCache<>(this);
 
     @Override
-    public @NotNull ClientboundBlockUpdatePacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundBlockUpdatePacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         return this.replacedCustomContentCache.get(hasResourcePack);
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
index 9c365f5e2690d4550aa5d9c74e3e2773b5584424..ccf0485d73aeef0be2078adbafe75994d06bcda3 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetContentPacket.java
@@ -14,7 +14,10 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
     private final int stateId;
     private final List<ItemStack> items;
     private final ItemStack carriedItem;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundContainerSetContentPacket(int syncId, int revision, NonNullList<ItemStack> contents, ItemStack cursorStack) {
         this.containerId = syncId;
@@ -77,8 +80,9 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundContainerSetContentPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundContainerSetContentPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -87,6 +91,11 @@ public class ClientboundContainerSetContentPacket implements Packet<ClientGamePa
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
index ae5f670d7ef1f1a482a6e3429f2213dff2270be8..0d5bfd1c6c10361059d281ab3f4b43c62d241b4c 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundContainerSetSlotPacket.java
@@ -14,7 +14,10 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
     private final int stateId;
     private final int slot;
     private final ItemStack itemStack;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundContainerSetSlotPacket(int syncId, int revision, int slot, ItemStack stack) {
         this.containerId = syncId;
@@ -62,8 +65,9 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundContainerSetSlotPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundContainerSetSlotPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -72,6 +76,11 @@ public class ClientboundContainerSetSlotPacket implements Packet<ClientGamePacke
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
index e9a0730ad565fb00cdfa82f5a5cd7fdebfcfed9e..d79da37b82063505ecd2dda57a728a4fc8aa284f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundMerchantOffersPacket.java
@@ -14,7 +14,10 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     private final int villagerXp;
     private final boolean showProgress;
     private final boolean canRestock;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundMerchantOffersPacket(int syncId, MerchantOffers recipes, int levelProgress, int experience, boolean leveled, boolean refreshable) {
         this.containerId = syncId;
@@ -76,8 +79,9 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundMerchantOffersPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundMerchantOffersPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -86,6 +90,11 @@ public class ClientboundMerchantOffersPacket implements Packet<ClientGamePacketL
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 2198a52553c569d5b7ec9588e412b8f9e7314ee3..b2d8b04ea3aa4040c2afbe8db27d73a13f86e808 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -116,7 +116,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
     private final ReplacedCustomContentCache<ClientboundSectionBlocksUpdatePacket> replacedCustomContentCache = new ReplacedCustomContentCache<>(this);
 
     @Override
-    public @NotNull ClientboundSectionBlocksUpdatePacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundSectionBlocksUpdatePacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
        return this.replacedCustomContentCache.get(hasResourcePack);
     }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index bcb7128942e4c21ae86d38ded369b5a54644f6e2..30f6a885d700d80f1cdf8d3d2b223fd27ff1f7c0 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -11,7 +11,10 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
     private final int id;
     @Nullable
     private final List<SynchedEntityData.DataItem<?>> packedItems;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundSetEntityDataPacket(int id, SynchedEntityData tracker, boolean forceUpdateAll) {
         this.id = id;
@@ -52,8 +55,9 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundSetEntityDataPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundSetEntityDataPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -62,6 +66,11 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
index ee192354da1d257407f6f1131a1b4a0a56bb0bcc..cda0879d6a2eaae947d0411cc5e9f758d7a1c97d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEquipmentPacket.java
@@ -15,7 +15,10 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
     private static final byte CONTINUE_MASK = -128;
     private final int entity;
     private final List<Pair<EquipmentSlot, ItemStack>> slots;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundSetEquipmentPacket(int id, List<Pair<EquipmentSlot, ItemStack>> equipmentList) {
         this.entity = id;
@@ -69,8 +72,9 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundSetEquipmentPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundSetEquipmentPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -79,6 +83,11 @@ public class ClientboundSetEquipmentPacket implements Packet<ClientGamePacketLis
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
index 3b9f109f8fe1e8d00113ccb9234b6e0d81b448d1..42e6324a53a1168f3bc0012d901621c085104432 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateAdvancementsPacket.java
@@ -20,7 +20,10 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     private final Map<ResourceLocation, Advancement.Builder> added;
     private final Set<ResourceLocation> removed;
     private final Map<ResourceLocation, AdvancementProgress> progress;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundUpdateAdvancementsPacket(boolean clearCurrent, Collection<Advancement> toEarn, Set<ResourceLocation> toRemove, Map<ResourceLocation, AdvancementProgress> toSetProgress) {
         this.reset = clearCurrent;
@@ -78,8 +81,9 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundUpdateAdvancementsPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundUpdateAdvancementsPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -88,6 +92,11 @@ public class ClientboundUpdateAdvancementsPacket implements Packet<ClientGamePac
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
index f2b46382b2414735e4c42a85ba4e5fb582311404..31104e2195dd79dca0f223bcec1deb88de09ca15 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundUpdateRecipesPacket.java
@@ -15,7 +15,10 @@ import javax.annotation.Nullable;
 
 public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketListener> {
     private final List<Recipe<?>> recipes;
-    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null; // Martijn - custom blocks and items
+    // Martijn start - custom blocks and items
+    private @Nullable Boolean doesNetworkTargetHaveResourcePack = null;
+    private @Nullable Boolean doesNetworkTargetHaveHighPing = null;
+    // Martijn end - custom blocks and items
 
     public ClientboundUpdateRecipesPacket(Collection<Recipe<?>> recipes) {
         this.recipes = Lists.newArrayList(recipes);
@@ -56,8 +59,9 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
     // Martijn start - custom blocks and items
 
     @Override
-    public @NotNull ClientboundUpdateRecipesPacket replaceCustomContent(boolean hasResourcePack) {
+    public @NotNull ClientboundUpdateRecipesPacket replaceCustomContent(boolean hasResourcePack, boolean hasHighPing) {
         this.doesNetworkTargetHaveResourcePack = hasResourcePack;
+        this.doesNetworkTargetHaveHighPing = hasHighPing;
         return this;
     }
 
@@ -66,6 +70,11 @@ public class ClientboundUpdateRecipesPacket implements Packet<ClientGamePacketLi
         return this.doesNetworkTargetHaveResourcePack;
     }
 
+    @Override
+    public @Nullable Boolean doesNetworkTargetHaveHighPing() {
+        return this.doesNetworkTargetHaveHighPing;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 1be5e8621ad391fa3745ca909e0460017b381a89..5586ba09d3c8aa11b4a03d5fd3b222c17f5226a6 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2935,6 +2935,14 @@ public class ServerPlayer extends Player {
         return bukkitPlayer.hasSuCraftResourcePack();
     }
 
+    public boolean hasHighPingForCustomBlocks() {
+        var bukkitPlayer = getBukkitEntity();
+        if (bukkitPlayer == null) {
+            return false;
+        }
+        return bukkitPlayer.hasHighPingForCustomBlocks();
+    }
+
     public void resendInventory() {
         this.getBukkitEntity().updateInventory();
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 0497da6ca4b0c0d144936f59d5c9c582d02da2a5..6dd46468db6f4c20aaf1734284f4c3b5c71858c8 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -45,9 +45,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
-import nl.martijnmuijsers.paper.block.BlockReplacementRule;
 import nl.martijnmuijsers.paper.item.ItemReplacementRule;
-import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 public class Item implements ItemLike {
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 6aafd634ee28cd149548d8d0dc64a341900bb6a7..a8cefc2ebfeee5e781c3e64d74c01b23a3a0c4b3 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -65,7 +65,7 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
-import nl.martijnmuijsers.paper.block.BlockReplacementRule;
+import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import org.slf4j.Logger;
 
 public class Block extends BlockBehaviour implements ItemLike {
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
deleted file mode 100644
index 315030684c60bd0bc4781bc9baa419a9051cf674..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
+++ /dev/null
@@ -1,488 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.block;
-
-import it.unimi.dsi.fastutil.Pair;
-import net.minecraft.core.Registry;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.item.Items;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
-import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
-import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
-import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
-import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
-import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
-import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
-import org.apache.commons.lang3.Validate;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
-import java.util.function.Supplier;
-import java.util.stream.Collectors;
-import java.util.stream.Stream;
-
-/**
- * A replacement rule that is fully responsible for exactly 1 real block
- */
-public interface BlockReplacementRule {
-
-    interface Builder<B extends Builder<B>> {
-
-        @NotNull B withHostItem(@NotNull Supplier<@NotNull Item> hostItemSupplier);
-
-        default @NotNull B withFullBlockBoundingBoxHostItem() {
-            return this.withHostItem(() -> Items.BARRIER);
-        }
-
-        @NotNull B withReal(@NotNull Block real);
-
-        @NotNull B withFallbackItem(@NotNull Supplier<@NotNull Item> fallbackItemSupplier);
-
-        @NotNull BlockReplacementRule build();
-
-    }
-
-    @Nullable BlockState replace(@NotNull BlockState state, boolean hasResourcePack);
-
-    @NotNull Block getReal();
-
-    @Nullable Item getHostItem();
-
-    @Nullable Item getFallbackItem();
-
-    /**
-     * Returns whether this item, when placing it as a block, would place a block state that serves as a host for this block
-     */
-    boolean isHostReplacing(@NotNull Item item);
-
-    /**
-     * Returns all items for which {@link #isHostReplacing} is true
-     */
-    @NotNull Iterable<@NotNull Item> getHostReplacingItems();
-
-    @Nullable Item getHostReplacingItemReplacement(@NotNull Item item);
-
-    /**
-     * All blocks that serve as a host or fallback, without duplicates
-     */
-    @NotNull Iterable<@NotNull Block> getHostAndFallbackBlocks();
-
-    /**
-     * All blocks that may potentially be observed as another block
-     * <br>
-     * Represented by an iterable of pairs, where each pair holds first a block type that may be presented as something different when sent, and second the block type that can be observed by the user instead of the first block
-     * <br>
-     * Contains no duplicates, and contains no pairs where the first and second element are equal
-     */
-    @NotNull Iterable<@NotNull Pair<@NotNull Block, @NotNull Block>> getPotentialObservationReplacements();
-
-    @Nullable Model getModelForStatePlacedByItem();
-
-    void writeToStateIdReplacementArrays();
-
-    void addToResourcePack(@NotNull MutableResourcePack resourcePack);
-
-    default void updateMinDestroyTimes() {
-        this.updateMinDestroyTimeOfReal(); // Some will see it as the host, others as the fallback
-        this.updateMinDestroyTimeOfHost(); // Some may see it as the host replacement
-    }
-
-    default void updateMinDestroyTimeOfReal() {
-        this.getReal().updateDestroyTime(Math.min(
-            getReal().properties.destroyTime,
-            getMinDestroyTimeOfHostAndFallback()
-        ));
-    }
-
-    void updateMinDestroyTimeOfHost();
-
-    float getMinDestroyTimeOfHostAndFallback();
-
-    float getMinDestroyTimeOfHostAndHostReplacement();
-
-    class StatelessBlockReplacementRule implements BlockReplacementRule {
-
-        public static class Builder implements BlockReplacementRule.Builder<Builder> {
-
-            private @Nullable Block real;
-            private @Nullable BlockState host;
-            private @Nullable Supplier<@NotNull Item> hostItemSupplier;
-            private @Nullable BlockState hostReplacement;
-            private @Nullable BlockState fallback;
-            private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
-            private @Nullable Supplier<@NotNull Item> hostReplacingItemSupplier;
-            private @Nullable Supplier<@NotNull Item> hostReplacingItemReplacementSupplier;
-            private @Nullable Supplier<@NotNull Model> modelSupplier;
-
-            @Override
-            public @NotNull StatelessBlockReplacementRule.Builder withReal(@NotNull Block real) {
-                this.real = real;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHost(@NotNull BlockState host) {
-                this.host = host;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHost(@NotNull Block host) {
-                return this.withHost(host.defaultBlockState());
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacement(@NotNull BlockState hostReplacement) {
-                this.hostReplacement = hostReplacement;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacement(@NotNull Block hostReplacement) {
-                return this.withHostReplacement(hostReplacement.defaultBlockState());
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withNoteBlockHost() {
-                return this.withGeneratedBlockStateHost(Blocks.NOTE_BLOCK);
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withGeneratedBlockStateHost(@NotNull Block block) {
-                @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(block);
-                return this.withHost(hostAndHostReplacement.left())
-                    .withHostReplacement(hostAndHostReplacement.right());
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withGeneratedBlockStateHost(@NotNull List<@NotNull BlockState> possibleBlockStates) {
-                @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(possibleBlockStates);
-                return this.withHost(hostAndHostReplacement.left())
-                    .withHostReplacement(hostAndHostReplacement.right());
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostDefaultAsHostReplacement() {
-                return this.withHostReplacement(this.host.getBlock().defaultBlockState());
-            }
-
-            @Override
-            public @NotNull StatelessBlockReplacementRule.Builder withHostItem(@NotNull Supplier<@NotNull Item> hostItemSupplier) {
-                this.hostItemSupplier = hostItemSupplier;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withFallback(@NotNull BlockState fallback) {
-                this.fallback = fallback;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withFallback(@NotNull Block fallback) {
-                return this.withFallback(fallback.defaultBlockState());
-            }
-
-            @Override
-            public @NotNull StatelessBlockReplacementRule.Builder withFallbackItem(@NotNull Supplier<@NotNull Item> fallbackItemSupplier) {
-                this.fallbackItemSupplier = fallbackItemSupplier;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withFallbackBlockAsFallbackItem() {
-                Validate.notNull(this.fallback);
-                return this.withFallbackItem(() -> this.fallback.getBlock().asItem());
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withModel(@NotNull Model model) {
-                this.modelSupplier = () -> model;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withModelSameAsStatelessBlock(@NotNull Block block) {
-                return this.withModel(((StatelessBlockReplacementRule) block.replacementRule).model);
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItem(@NotNull Supplier<@NotNull Item> hostReplacingItemSupplier) {
-                this.hostReplacingItemSupplier = hostReplacingItemSupplier;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItemFromHostBlock() {
-                Validate.notNull(this.host);
-                return this.withHostReplacingItem(() -> this.host.getBlock().asItem());
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItemReplacement(@NotNull Supplier<@NotNull Item> hostReplacingItemReplacementSupplier) {
-                this.hostReplacingItemReplacementSupplier = hostReplacingItemReplacementSupplier;
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItemReplacementFromHostReplacementBlock() {
-                Validate.notNull(this.hostReplacement);
-                return this.withHostReplacingItemReplacement(() -> this.hostReplacement.getBlock().asItem());
-            }
-
-            /**
-             * The provided function will be called with the {@link ResourceLocation} of the real block of this rule
-             */
-            public @NotNull StatelessBlockReplacementRule.Builder withModel(@NotNull ModelCreation modelCreation) {
-                this.modelSupplier = () -> {
-                    Validate.notNull(this.real);
-                    @NotNull ResourceLocation key = Registry.BLOCK.getKey(this.real);
-                    return modelCreation.create(ResourcePackAssetIntention.BLOCK, key);
-                };
-                return this;
-            }
-
-            public @NotNull StatelessBlockReplacementRule.Builder withModelContent(@NotNull ModelContent modelContent) {
-                return this.withModel((intention, key) ->
-                    modelContent.asModel(intention, NamespacedKeyWithoutIntention.forMinecraft(key)));
-            }
-
-            @Override
-            public @NotNull StatelessBlockReplacementRule build() {
-                Validate.notNull(this.real);
-                Validate.notNull(this.host);
-                Validate.notNull(this.hostReplacement);
-                Validate.notNull(this.hostItemSupplier);
-                Validate.notNull(this.fallback);
-                Validate.notNull(this.modelSupplier);
-                @Nullable Supplier<@NotNull Pair<@NotNull Item, @NotNull Item>> hostReplacingItemAndReplacementSupplier = null;
-                if (this.hostReplacingItemSupplier != null || this.hostReplacingItemReplacementSupplier != null) {
-                    Validate.notNull(this.hostReplacingItemSupplier);
-                    Validate.notNull(this.hostReplacingItemReplacementSupplier);
-                    hostReplacingItemAndReplacementSupplier = () -> Pair.of(this.hostReplacingItemSupplier.get(), this.hostReplacingItemReplacementSupplier.get());
-                }
-                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.hostItemSupplier, this.fallback, this.fallbackItemSupplier, hostReplacingItemAndReplacementSupplier, this.modelSupplier.get());
-            }
-
-        }
-
-        private final @NotNull Block real;
-        public final @NotNull BlockState host;
-        public final @NotNull BlockState hostReplacement;
-
-        /**
-         * May be null if this block has no item form, must be non-null if this block has an item form
-         * <br>
-         * Will also be null if not initialized yet
-         */
-        private @Nullable Item hostItem;
-
-        /**
-         * This is used to get the host item the first time it is needed: this is to ensure no calls to the Items class are made before the blocks have finished initializing, otherwise we cannot refer to the blocks when we wish to create items for them
-         * <br><br>
-         * May be null if this block has no item form, must be non-null if this block has an item form
-         * <br>
-         * Will also be set to null after the first evaluation
-         */
-        private @Nullable Supplier<@NotNull Item> hostItemSupplier;
-
-        public final @NotNull BlockState fallback;
-
-        /**
-         * May be null if this block has no item form, must be non-null if this block has an item form
-         * <br>
-         * Will also be null if not initialized yet
-         */
-        private @Nullable Item fallbackItem = null;
-
-        /**
-         * This is used to get the fallback item the first time it is needed: this is to ensure no calls to the Items class are made before the blocks have finished initializing, otherwise we cannot refer to the blocks when we wish to create items for them
-         * <br><br>
-         * May be null if this block has no item form, must be non-null if this block has an item form
-         * <br>
-         * Will also be set to null after the first evaluation
-         */
-        private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
-
-        /**
-         * May be null if this block has no host for which an item exists that would replace it on being used to place as a block
-         * <br>
-         * Will also be set to null after the first evaluation
-         */
-        private @Nullable Item hostReplacingItem;
-
-        /**
-         * May be null if this block has no host for which an item exists that would replace it on being used to place as a block
-         * <br>
-         * Will also be set to null after the first evaluation
-         */
-        private @Nullable Item hostReplacingItemReplacement;
-
-        /**
-         * May be null if this block has no host for which an item exists that would replace it on being used to place as a block
-         * <br>
-         * Will also be set to null after the first evaluation
-         */
-        private @Nullable Supplier<@NotNull Pair<@NotNull Item, @NotNull Item>> hostReplacingItemAndReplacementSupplier;
-
-        private final @NotNull Model model;
-
-        private StatelessBlockReplacementRule(@NotNull Block real, @NotNull BlockState host, @NotNull BlockState hostReplacement, @Nullable Supplier<@NotNull Item> hostItemSupplier, @NotNull BlockState fallback, @Nullable Supplier<@NotNull Item> fallbackItemSupplier, @Nullable Supplier<@NotNull Pair<@NotNull Item, @NotNull Item>> hostReplacingItemAndReplacementSupplier, @NotNull Model model) {
-            this.real = real;
-            this.host = host;
-            this.hostReplacement = hostReplacement;
-            this.hostItemSupplier = hostItemSupplier;
-            this.fallback = fallback;
-            this.fallbackItemSupplier = fallbackItemSupplier;
-            this.hostReplacingItemAndReplacementSupplier = hostReplacingItemAndReplacementSupplier;
-            this.model = model;
-            Validate.isTrue(this.model.getIntention() == ResourcePackAssetIntention.BLOCK);
-        }
-
-        @Override
-        public @Nullable BlockState replace(@NotNull BlockState state, boolean hasResourcePack) {
-            if (state.is(this.real)) {
-                return hasResourcePack ? this.host : this.fallback;
-            } else if (state.equals(this.host)) {
-                return hasResourcePack ? this.hostReplacement : this.host;
-            }
-            return null;
-        }
-
-        @Override
-        public @NotNull Block getReal() {
-            return this.real;
-        }
-
-        @Override
-        public @Nullable Item getHostItem() {
-            if (this.hostItem == null) {
-                if (this.hostItemSupplier == null) {
-                    return null;
-                }
-                this.hostItem = this.hostItemSupplier.get();
-                this.hostItemSupplier = null;
-            }
-            return this.hostItem;
-        }
-
-        @Override
-        public @Nullable Item getFallbackItem() {
-            if (this.fallbackItem == null) {
-                if (this.fallbackItemSupplier == null) {
-                    return null;
-                }
-                this.fallbackItem = this.fallbackItemSupplier.get();
-                this.fallbackItemSupplier = null;
-            }
-            return this.fallbackItem;
-        }
-
-        private @Nullable Item getHostReplacingItem() {
-            if (this.hostReplacingItem == null) {
-                if (this.hostReplacingItemAndReplacementSupplier != null) {
-                    @NotNull Pair<@NotNull Item, @NotNull Item> hostReplacingItemAndReplacement = this.hostReplacingItemAndReplacementSupplier.get();
-                    this.hostReplacingItem = hostReplacingItemAndReplacement.left();
-                    this.hostReplacingItemReplacement = hostReplacingItemAndReplacement.right();
-                    this.hostReplacingItemAndReplacementSupplier = null;
-                }
-            }
-            return this.hostReplacingItem;
-        }
-
-        private @Nullable Item getHostReplacingItemReplacement() {
-            if (this.hostReplacingItemReplacement == null) {
-                if (this.hostReplacingItemAndReplacementSupplier != null) {
-                    @NotNull Pair<@NotNull Item, @NotNull Item> hostReplacingItemAndReplacement = this.hostReplacingItemAndReplacementSupplier.get();
-                    this.hostReplacingItem = hostReplacingItemAndReplacement.left();
-                    this.hostReplacingItemReplacement = hostReplacingItemAndReplacement.right();
-                    this.hostReplacingItemAndReplacementSupplier = null;
-                }
-            }
-            return this.hostReplacingItemReplacement;
-        }
-
-        @Override
-        public boolean isHostReplacing(@NotNull Item item) {
-            return item.equals(this.getHostReplacingItem());
-        }
-
-        @Override
-        public @NotNull Iterable<@NotNull Item> getHostReplacingItems() {
-            @Nullable Item hostReplacingItem = this.getHostReplacingItem();
-            if (hostReplacingItem == null) {
-                return Collections.emptyList();
-            } else {
-                return Collections.singletonList(hostReplacingItem);
-            }
-        }
-
-        @Override
-        public @Nullable Item getHostReplacingItemReplacement(@NotNull Item item) {
-            if (this.isHostReplacing(item)) {
-                return this.getHostReplacingItemReplacement();
-            }
-            return null;
-        }
-
-        @Override
-        public @NotNull Iterable<@NotNull Block> getHostAndFallbackBlocks() {
-            return Set.of(this.host.getBlock(), this.fallback.getBlock());
-        }
-
-        @Override
-        public @NotNull Iterable<@NotNull Pair<@NotNull Block, @NotNull Block>> getPotentialObservationReplacements() {
-            return Stream.of(Pair.of(this.real, this.host.getBlock()), Pair.of(this.host.getBlock(), this.hostReplacement.getBlock()), Pair.of(this.real, this.fallback.getBlock())).filter(pair -> !pair.left().equals(pair.right())).collect(Collectors.toSet());
-        }
-
-        @Override
-        public @Nullable Model getModelForStatePlacedByItem() {
-            return this.model;
-        }
-
-        @Override
-        public void updateMinDestroyTimeOfHost() {
-            this.host.getBlock().updateDestroyTime(this.getMinDestroyTimeOfHostAndHostReplacement());
-        }
-
-        @Override
-        public float getMinDestroyTimeOfHostAndFallback() {
-            return Math.min(
-                this.host.getBlock().properties.destroyTime,
-                this.fallback.getBlock().properties.destroyTime
-            );
-        }
-
-        @Override
-        public float getMinDestroyTimeOfHostAndHostReplacement() {
-            return Math.min(
-                this.host.getBlock().properties.destroyTime,
-                this.hostReplacement.getBlock().properties.destroyTime
-            );
-        }
-
-        @Override
-        public void writeToStateIdReplacementArrays() {
-            int realId = Block.BLOCK_STATE_REGISTRY.getId(this.real.defaultBlockState());
-            int hostId = Block.BLOCK_STATE_REGISTRY.getId(this.host);
-            int hostReplacementId = Block.BLOCK_STATE_REGISTRY.getId(this.hostReplacement);
-            int fallbackId = Block.BLOCK_STATE_REGISTRY.getId(this.fallback);
-            Block.stateIdReplacementArrayWithResourcePack[realId] = hostId;
-            Block.stateIdReplacementArrayWithResourcePack[hostId] = hostReplacementId;
-            Block.stateIdReplacementArrayWithoutResourcePack[realId] = fallbackId;
-            Block.addRealStateToPlayerObservableStates(realId, hostId);
-            Block.addRealStateToPlayerObservableStates(hostId, hostReplacementId);
-            Block.addRealStateToPlayerObservableStates(realId, fallbackId);
-        }
-
-        @Override
-        public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
-            @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(this.host.getBlock())).withEmptyIntention();
-            @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
-            if (this.host.getBlock().getStateDefinition().getPossibleStates().size() == 1) {
-                minecraftBlockStates.setNoVariantModel(this.model, resourcePack, false);
-            } else {
-                minecraftBlockStates.setModel(this.host, this.model, resourcePack, false);
-            }
-        }
-
-    }
-
-    // Blocks with item form
-
-    static @NotNull StatelessBlockReplacementRule.Builder stateless() {
-        return new StatelessBlockReplacementRule.Builder();
-    }
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index 2419ce435b89d628043da420e592ccd8a204c9b0..dc6678d8df73bce6a7b33b95324af2a3886a982a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -14,8 +14,11 @@ import net.minecraft.world.level.material.Material;
 import net.minecraft.world.level.material.MaterialColor;
 import net.minecraft.world.level.storage.loot.LootTable;
 import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
+import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRuleBuilder;
+import nl.martijnmuijsers.paper.block.replacementrule.SingleMultiStateRealBlockReplacementRuleBuilder;
+import nl.martijnmuijsers.paper.block.replacementrule.SingleStateRealBlockReplacementRule;
+import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
-import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
@@ -61,18 +64,16 @@ public class SuCraftBlocks {
     public static final Block YELLOW_PLANKS = registerPlanks("yellow", Blocks.BIRCH_PLANKS);
 
     /**
-     * Based on {@link Blocks#0.RT}
+     * Based on {@link Blocks#DIRT}
      */
     public static final Block DIRT_BRICKS = register(
         "dirt_bricks",
-        BlockReplacementRule.stateless()
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
-            .withFullBlockBoundingBoxHostItem()
             .withFallback(Blocks.MUD_BRICKS)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModel(Model.OneTextureCube.defaultCreation()),
+            .withModelCreation(Model.OneTextureCube.defaultCreation())
+            .withFullBlockBoundingBoxItem()
+            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
         new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F, 1.0F).sound(SoundType.GRAVEL)),
         SuCraftBlockLoot::dropSelf
     );
@@ -98,14 +99,12 @@ public class SuCraftBlocks {
      */
     public static final Block SOUL_SANDSTONE = register(
         "soul_sandstone",
-        BlockReplacementRule.stateless()
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
-            .withFullBlockBoundingBoxHostItem()
             .withFallback(Blocks.SOUL_SAND)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModel(Model.BottomTopPillarCube.defaultCreation()),
+            .withModelCreation(Model.BottomTopPillarCube.defaultCreation())
+            .withFullBlockBoundingBoxItem()
+            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
         new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F, 0.8F)),
         SuCraftBlockLoot::dropSelf
     );
@@ -122,14 +121,12 @@ public class SuCraftBlocks {
      */
     public static final Block CHISELED_SOUL_SANDSTONE = register(
         "chiseled_soul_sandstone",
-        BlockReplacementRule.stateless()
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
-            .withFullBlockBoundingBoxHostItem()
             .withFallback(Blocks.SOUL_SAND)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModel(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance()))),
+            .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())))
+            .withFullBlockBoundingBoxItem()
+            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
         new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
         SuCraftBlockLoot::dropSelf
     );
@@ -139,24 +136,22 @@ public class SuCraftBlocks {
      */
     public static final Block CUT_SOUL_SANDSTONE = register(
         "cut_soul_sandstone",
-        BlockReplacementRule.stateless()
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
-            .withFullBlockBoundingBoxHostItem()
             .withFallback(Blocks.SOUL_SAND)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModel(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance()))),
+            .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())))
+            .withFullBlockBoundingBoxItem()
+            .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
         new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
         SuCraftBlockLoot::dropSelf
     );
     public static final Block CHISELED_PRISMARINE_BRICKS = registerChiseledBricks("prismarine", Blocks.PRISMARINE_BRICKS);
 
-    private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRule.Builder<?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
+    private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
     }
 
-    private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRule.Builder<?> replacementRuleBuilder, @NotNull Block block, @Nullable Function<@NotNull Block, @Nullable LootTable> lootTableFunction) {
+    private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Function<@NotNull Block, @Nullable LootTable> lootTableFunction) {
         ResourceLocation key = ResourceLocation.sucraft(id);
         @NotNull Block registeredBlock = Registry.register(Registry.BLOCK, key, block);
         registeredBlock.isVanilla = false;
@@ -174,15 +169,13 @@ public class SuCraftBlocks {
     private static @NotNull Block registerStoneBricks(@NotNull String type, @NotNull Block host, @NotNull Block hostReplacement, @NotNull Block fallback) {
         return register(
             type + "_stone_bricks",
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withHost(host)
                 .withHostReplacement(hostReplacement)
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(fallback)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.OneTextureCube.defaultCreation()),
+                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
@@ -199,19 +192,17 @@ public class SuCraftBlocks {
         if (replacementRule == null) {
             throw new IllegalStateException("registerInfestedStoneBricks was called with an uninfested custom block for which replacementRule was not initialized yet");
         }
-        if (replacementRule instanceof BlockReplacementRule.StatelessBlockReplacementRule statelessBlockReplacementRule) {
+        if (replacementRule instanceof SingleStateRealBlockReplacementRule singleStateReplacementRule) {
             Block infestedBlock = new InfestedBlock(uninfested, BlockBehaviour.Properties.of(Material.CLAY), false);
             return register(
                 "infested_" + uninfested.customKey.getPath(),
-                BlockReplacementRule.stateless()
-                    .withHost(statelessBlockReplacementRule.host)
-                    .withHostReplacement(statelessBlockReplacementRule.hostReplacement)
-                    .withFullBlockBoundingBoxHostItem()
-                    .withFallback(statelessBlockReplacementRule.fallback)
-                    .withFallbackBlockAsFallbackItem()
-                    .withHostReplacingItemFromHostBlock()
-                    .withHostReplacingItemReplacementFromHostReplacementBlock()
-                    .withModelSameAsStatelessBlock(uninfested),
+                new SingleMultiStateRealBlockReplacementRuleBuilder()
+                    .withHostSameAs(singleStateReplacementRule)
+                    .withHostReplacementSameAs(singleStateReplacementRule)
+                    .withFallbackSameAs(singleStateReplacementRule)
+                    .withModelSameAs(singleStateReplacementRule)
+                    .withFullBlockBoundingBoxItem()
+                    .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
                 infestedBlock,
                 block -> SuCraftBlockLoot.dropSingleItemWhenSilkTouch(uninfested)
             );
@@ -226,14 +217,12 @@ public class SuCraftBlocks {
     private static @NotNull Block registerBookshelf(@NotNull String idWoodType) {
         return register(
             idWoodType + "_bookshelf",
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(Blocks.BOOKSHELF)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft(idWoodType + "_planks"), TextureContent.Existing.getInstance()))),
+                .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft(idWoodType + "_planks"), TextureContent.Existing.getInstance())))
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.WOOD)),
             block -> SuCraftBlockLoot.dropSingleItemAndSingleItemWhenSilkTouch(Items.BOOK, ConstantValue.exactly(3.0F), block)
         );
@@ -245,14 +234,12 @@ public class SuCraftBlocks {
     private static @NotNull Block registerPlanks(@NotNull String description, @NotNull Block fallback) {
         return register(
             description + "_planks",
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(fallback)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.OneTextureCube.defaultCreation()),
+                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)),
             SuCraftBlockLoot::dropSelf
         );
@@ -264,14 +251,12 @@ public class SuCraftBlocks {
     private static @NotNull Block registerPolished(@NotNull String unpolished, @NotNull Block fallback) {
         return register(
             "polished_" + unpolished,
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(fallback)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.OneTextureCube.defaultCreation()),
+                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
@@ -283,14 +268,12 @@ public class SuCraftBlocks {
     private static @NotNull Block registerBricks(@NotNull String type, @NotNull Block fallback) {
         return register(
             type + "_bricks",
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(fallback)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.OneTextureCube.defaultCreation()),
+                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
@@ -302,14 +285,12 @@ public class SuCraftBlocks {
     private static @NotNull Block registerChiseledBricks(@NotNull String type, @NotNull Block fallback) {
         return register(
             "chiseled_" + type + "_bricks",
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(fallback)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.OneTextureCube.defaultCreation()),
+                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
@@ -321,14 +302,12 @@ public class SuCraftBlocks {
     private static @NotNull Block registerCobblestone(@NotNull String type, @NotNull Block fallback) {
         return register(
             type + "_cobblestone",
-            BlockReplacementRule.stateless()
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withNoteBlockHost()
-                .withFullBlockBoundingBoxHostItem()
                 .withFallback(fallback)
-                .withFallbackBlockAsFallbackItem()
-                .withHostReplacingItemFromHostBlock()
-                .withHostReplacingItemReplacementFromHostReplacementBlock()
-                .withModel(Model.OneTextureCube.defaultCreation()),
+                .withModelCreation(Model.OneTextureCube.defaultCreation())
+                .withFullBlockBoundingBoxItem()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new Block(BlockBehaviour.Properties.of(Material.STONE).strength(2.0F, 6.0F)),
             SuCraftBlockLoot::dropSelf
         );
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
index f142dee7fc2d5b4444c677e2125f291215193ab0..eebb8dfdfec58f190a6e29ae845a67ee2aa9ea8b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
@@ -10,6 +10,7 @@ import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import nl.martijnmuijsers.paper.data.SuCraftTagsProvider;
 import org.jetbrains.annotations.NotNull;
 
@@ -36,7 +37,7 @@ public class SuCraftObservableBlockTagsSpreader extends SuCraftTagsProvider<Bloc
         for (Block block : Registry.BLOCK) {
             BlockReplacementRule blockReplacementRule = block.replacementRule;
             if (blockReplacementRule != null) {
-                for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialObservationReplacements()) {
+                for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialBlockReplacementPairs()) {
                     for (TagKey<Block> tag : mineableTags) {
                         var holder = this.registry.getHolderOrThrow(this.registry.getResourceKey(observationReplacement.second()).get());
                         if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(holder)) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
new file mode 100644
index 0000000000000000000000000000000000000000..f29058d4186dbd9d664eff4bdb372089728d8744
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -0,0 +1,209 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.block.UsedHostBlockStates;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collections;
+import java.util.IdentityHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.Supplier;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/**
+ * A rule that is fully responsible for exactly 1 real block,
+ * and replaces each of its state with some host (multiple real states may have the same host state when the difference between those real states is not important to be observable) (multiple other replacement rules may use the same hosts),
+ * and replaces each host with some host replacement state that is a good observable alternative to the host state (multiple hosts may have the same host replacement state) (when another replacement rule uses a same host as well, it should have the same host replacement for that host (this is not checked at runtime!))
+ */
+public interface BlockReplacementRule {
+
+    @NotNull Block getReal();
+
+    boolean hasAsReal(@NotNull Block potentialReal);
+
+    /**
+     * Contains no duplicates
+     */
+    @NotNull List<@NotNull BlockState> getHosts();
+
+    boolean hasAsHost(@NotNull BlockState potentialHost);
+
+    /**
+     * This method will assume (not verify) that the given state is in fact a state of this rule's real block
+     */
+    @NotNull BlockState getHost(@NotNull BlockState realState);
+
+    /**
+     * This method will assume (not verify) that the given state is in fact a host of this rule
+     */
+    @NotNull BlockState getHostReplacement(@NotNull BlockState host);
+
+    /**
+     * Contains no duplicates
+     */
+    @NotNull List<@NotNull BlockState> getFallbacks();
+
+    /**
+     * This method will assume (not verify) that the given state is in fact a state of this rule's real block
+     */
+    @NotNull BlockState getFallback(@NotNull BlockState realState);
+
+    /**
+     * All blocks that serve as a host or fallback, without duplicates
+     */
+    @NotNull List<@NotNull Block> getHostAndFallbackBlocks();
+
+    /**
+     * All blocks that may potentially be observed as another block
+     * <br>
+     * Represented by an iterable of pairs, where each pair holds first a block type that may be presented as something different when sent, and second the block type that can be observed by the user instead of the first block
+     * <br>
+     * Contains no duplicates, and contains no pairs where the first and second element are equal
+     */
+    @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> getPotentialBlockReplacementPairs();
+
+    /**
+     * Returns a replacement state (either real to host, or host to host replacement) for the given state, if this rule is applicable
+     * <br>
+     * Returns null if this rule does not apply to the given state
+     */
+    default @Nullable BlockState replace(@NotNull BlockState state, boolean hasResourcePack) {
+        if (state.is(this.getReal())) {
+            return hasResourcePack ? this.getHost(state) : this.getFallback(state);
+        } else if (hasResourcePack && this.hasAsHost(state)) {
+            return this.getHostReplacement(state);
+        }
+        return null;
+    }
+
+    default void writeToStateIdReplacementArrays() {
+        for (@NotNull BlockState realState : this.getReal().getStateDefinition().getPossibleStates()) {
+            int realStateId = Block.BLOCK_STATE_REGISTRY.getId(realState);
+            int hostId = Block.BLOCK_STATE_REGISTRY.getId(this.getHost(realState));
+            int fallbackId = Block.BLOCK_STATE_REGISTRY.getId(this.getFallback(realState));
+            Block.stateIdReplacementArrayWithResourcePack[realStateId] = hostId;
+            Block.stateIdReplacementArrayWithoutResourcePack[realStateId] = fallbackId;
+            Block.addRealStateToPlayerObservableStates(realStateId, hostId);
+            Block.addRealStateToPlayerObservableStates(realStateId, fallbackId);
+        }
+        for (@NotNull BlockState host : this.getHosts()) {
+            int hostId = Block.BLOCK_STATE_REGISTRY.getId(host);
+            int hostReplacementId = Block.BLOCK_STATE_REGISTRY.getId(this.getHostReplacement(host));
+            Block.stateIdReplacementArrayWithResourcePack[hostId] = hostReplacementId;
+            Block.addRealStateToPlayerObservableStates(hostId, hostReplacementId);
+        }
+    }
+
+    default void updateMinDestroyTimes() {
+        this.updateMinDestroyTimeOfReal(); // Some will see it as the host, others as the fallback
+        this.updateMinDestroyTimeOfHosts(); // Some may see it as the host replacement
+    }
+
+    default void updateMinDestroyTimeOfReal() {
+        this.getReal().updateDestroyTime(Math.min(
+            this.getReal().properties.destroyTime,
+            this.getMinDestroyTimeOfHostsAndFallbacks()
+        ));
+    }
+
+    default void updateMinDestroyTimeOfHosts() {
+        for (@NotNull BlockState host : this.getHosts()) {
+            host.getBlock().updateDestroyTime(this.getMinDestroyTimeOfHostAndHostReplacement(host));
+        }
+    }
+
+    default float getMinDestroyTimeOfHostsAndFallbacks() {
+        return Stream.concat(this.getHosts().stream(), this.getFallbacks().stream()).map(state -> state.getBlock().properties.destroyTime).min(Float::compareTo).get();
+    }
+
+    /**
+     * This method will assume (not verify) that the given state is in fact a host of this rule
+     */
+    default float getMinDestroyTimeOfHostAndHostReplacement(@NotNull BlockState host) {
+        return Math.min(
+            host.getBlock().properties.destroyTime,
+            this.getHostReplacement(host).getBlock().properties.destroyTime
+        );
+    }
+
+    /**
+     * This method will assume (not verify) that the given state is in fact a host of this rule
+     */
+    @NotNull Model getModel(@NotNull BlockState host);
+
+    @Nullable RealItemReplacementRule getRealItemRule();
+
+    @NotNull List<@NotNull HostItemReplacementRule> getHostItemRules();
+
+    /**
+     * Returns whether this item, when placing it as a block, would place a block state that serves as a host in this replacement rule
+     */
+    boolean isHostPlacingItem(@NotNull Item item);
+
+    /**
+     * Returns all items for which {@link #isHostPlacingItem} is true, without duplicates
+     */
+    @NotNull List<@NotNull Item> getHostPlacingItems();
+
+    /**
+     * Returns the item we would like to replace a host placing item by
+     * <br>
+     * Returns null if the item given is not a host placing item
+     */
+    @Nullable Item getHostPlacingItemReplacement(@NotNull Item item);
+
+    /**
+     * Returns a state of the real block that is representative of the real block (by default, this is the default state of the real block, which should be appropriate in most cases, but we may wish to override it in the future)
+     * <br>
+     * This is currently used as the item model if this real block has a corresponding block item
+     * @see #getRealItemModel
+     */
+    default @NotNull BlockState getRepresentativeRealState() {
+        return this.getReal().defaultBlockState();
+    }
+
+    /**
+     * Returns the model for the real block item of this block
+     * <br>
+     * Returns null or an arbitrary meaning less value if the real block does not have a corresponding block item
+     */
+    default @Nullable Model getRealItemModel() {
+        return this.getModel(this.getHost(this.getRepresentativeRealState())).getReference(ResourcePackAssetIntention.ITEM);
+    }
+
+    default void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        for (@NotNull BlockState host : this.getHosts()) {
+            @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(host.getBlock())).withEmptyIntention();
+            @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
+            @NotNull Model model = this.getModel(host);
+            if (host.getBlock().getStateDefinition().getPossibleStates().size() == 1) {
+                minecraftBlockStates.setNoVariantModel(model, resourcePack, false);
+            } else {
+                minecraftBlockStates.setModel(host, model, resourcePack, false);
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
new file mode 100644
index 0000000000000000000000000000000000000000..a933f636ecc217f8f124d0eef586a44eff27121c
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
@@ -0,0 +1,94 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import com.google.common.collect.Lists;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collections;
+import java.util.IdentityHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+/**
+ * Shared implementation of {@link SingleStateRealBlockReplacementRule} and {@link MultiStateRealBlockReplacementRule}
+ */
+public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
+
+    protected final @NotNull Block real;
+    protected final @Nullable RealItemReplacementRule realItemRule;
+    protected final @NotNull List<@NotNull HostItemReplacementRule> hostItemRules;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getHostPlacingItems}
+     * <br>
+     * Is null only when not initialized yet:
+     * late initialization is used so that items are not referenced before block bootstrapping is finished
+     */
+    protected @Nullable List<@NotNull Item> hostPlacingItemList;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #isHostPlacingItem} and {@link #getHostPlacingItemReplacement}
+     * <br>
+     * Is null only when not initialized yet:
+     * late initialization is used so that items are not referenced before block bootstrapping is finished
+     */
+    protected @Nullable Map<@NotNull Item, @NotNull Item> replacementByHostPlacingItem;
+
+    protected BlockReplacementRuleBase(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
+        this.real = real;
+        this.realItemRule = realItemRule;
+        this.hostItemRules = Collections.unmodifiableList(hostItemRules);
+    }
+
+    @Override
+    public @NotNull Block getReal() {
+        return this.real;
+    }
+
+    @Override
+    public boolean hasAsReal(@NotNull Block potentialReal) {
+        return this.real.equals(potentialReal);
+    }
+
+    @Override
+    public @Nullable RealItemReplacementRule getRealItemRule() {
+        return this.realItemRule;
+    }
+
+    @Override
+    public @NotNull List<@NotNull HostItemReplacementRule> getHostItemRules() {
+        return this.hostItemRules;
+    }
+
+    @Override
+    public boolean isHostPlacingItem(@NotNull Item item) {
+        return this.getHostPlacingItemReplacement(item) != null;
+    }
+
+    @Override
+    public @NotNull List<@NotNull Item> getHostPlacingItems() {
+        if (this.hostPlacingItemList == null) {
+            this.hostPlacingItemList = this.getReplacementByHostPlacingItems().keySet().stream().toList();
+        }
+        return this.hostPlacingItemList;
+    }
+
+    private @NotNull Map<@NotNull Item, @NotNull Item> getReplacementByHostPlacingItems() {
+        if (this.replacementByHostPlacingItem == null) {
+            this.replacementByHostPlacingItem = new IdentityHashMap<>(this.hostItemRules.stream().collect(Collectors.toMap(HostItemReplacementRule::getHostPlacingItem, HostItemReplacementRule::getHostPlacingItemReplacement)));
+        }
+        return this.replacementByHostPlacingItem;
+    }
+
+    @Override
+    public @Nullable Item getHostPlacingItemReplacement(@Nullable Item item) {
+        return this.getReplacementByHostPlacingItems().get(item);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..7513e9efebc118f21c3ab0496a17d570786cb0df
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
@@ -0,0 +1,200 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.block.UsedHostBlockStates;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B extends BlockReplacementRuleBuilder<R, B>> {
+
+    @NotNull B withReal(@NotNull Block real);
+
+    /**
+     * One host for all real block states
+     */
+    @NotNull B withHost(@NotNull BlockState host);
+
+    /**
+     * One host for all real block states
+     * <br>
+     * (Takes the default state of the given block)
+     */
+    default @NotNull B withHost(@NotNull Block hostBlock) {
+        return this.withHost(hostBlock.defaultBlockState());
+    }
+
+    /**
+     * Sets the output of the given function as the host for a given real block state,
+     * but takes the host for that real block state already existing in this builder if the function returns null
+     */
+    @NotNull B withHostForRealState(@NotNull Function<@NotNull BlockState, @Nullable BlockState> hostForRealState);
+
+    /**
+     * One host for all real block states: the same one as the given rule
+     */
+    default @NotNull B withHostSameAs(@NotNull SingleStateRealBlockReplacementRule singleStateReplacementRule) {
+        return this.withHost(singleStateReplacementRule.getHost());
+    }
+
+    /**
+     * One host replacement for all hosts
+     */
+    @NotNull B withHostReplacement(@NotNull BlockState hostReplacement);
+
+    /**
+     * One host replacement for all hosts
+     * <br>
+     * (Takes the default state of the given block)
+     */
+    default @NotNull B withHostReplacement(@NotNull Block hostReplacementBlock) {
+        return this.withHostReplacement(hostReplacementBlock.defaultBlockState());
+    }
+
+    /**
+     * Sets the output of the given function as the host replacement for a given host,
+     * but takes the host replacement for that host already existing in this builder if the function returns null
+     */
+    @NotNull B withHostReplacementForHost(@NotNull Function<@NotNull BlockState, @Nullable BlockState> hostReplacementForHost);
+
+    /**
+     * One host replacement for all hosts: the same one as the given rule
+     */
+    default @NotNull B withHostReplacementSameAs(@NotNull SingleStateRealBlockReplacementRule singleStateReplacementRule) {
+        return this.withHostReplacement(singleStateReplacementRule.getHostReplacement());
+    }
+
+    /**
+     * Sets the host and host replacement based automatically on the next unused state out of the given states
+     */
+    default @NotNull B withNextUnusedStateAsHost(@NotNull List<@NotNull BlockState> possibleBlockStates) {
+        @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(possibleBlockStates);
+        return this.withHost(hostAndHostReplacement.left())
+            .withHostReplacement(hostAndHostReplacement.right());
+    }
+
+    /**
+     * Sets the host and host replacement based automatically on the next unused state of the given block
+     */
+    default @NotNull B withNextUnusedStateOfHostBlock(@NotNull Block hostBlock) {
+        @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(hostBlock);
+        return this.withHost(hostAndHostReplacement.left())
+            .withHostReplacement(hostAndHostReplacement.right());
+    }
+
+    /**
+     * Sets the host and host replacement based automatically on the next unused note block state
+     */
+    default @NotNull B withNoteBlockHost() {
+        return this.withNextUnusedStateOfHostBlock(Blocks.NOTE_BLOCK);
+    }
+
+    /**
+     * One fallback for all real block states
+     */
+    @NotNull B withFallback(@NotNull BlockState fallback);
+
+    /**
+     * One fallback for all real block states
+     * <br>
+     * (Takes the default state of the given block)
+     */
+    default @NotNull B withFallback(@NotNull Block fallbackBlock) {
+        return this.withFallback(fallbackBlock.defaultBlockState());
+    }
+
+    /**
+     * Sets the output of the given function as the fallback for a given real block state,
+     * but takes the fallback for that real block state already existing in this builder if the function returns null
+     */
+    @NotNull B withFallbackForRealState(@NotNull Function<@NotNull BlockState, @Nullable BlockState> fallbackForRealState);
+
+    /**
+     * One fallback for all real block states: the same one as the given rule
+     */
+    default @NotNull B withFallbackSameAs(@NotNull SingleStateRealBlockReplacementRule singleStateReplacementRule) {
+        return this.withFallback(singleStateReplacementRule.getFallback());
+    }
+
+    /**
+     * One host overriding model for all hosts
+     */
+    @NotNull B withModel(@NotNull Model hostOverridingModel);
+
+    /**
+     * Sets the output of the given function as the host overriding model for a given host,
+     * but takes the host overriding model for that host already existing in this builder if the function returns null
+     */
+    @NotNull B withModelForHost(@NotNull Function<@NotNull BlockState, @Nullable Model> hostOverridingModelForHost);
+
+    /**
+     * One host overriding model for all hosts
+     */
+    @NotNull B withModelCreation(@NotNull ModelCreation hostOverridingModelCreation);
+
+    /**
+     * Sets the output of the given function as the host overriding model for a given host,
+     * but takes the host overriding model for that host already existing in this builder if the function returns null
+     */
+    @NotNull B withModelCreationForHost(@NotNull Function<@NotNull BlockState, @Nullable ModelCreation> hostOverridingModelCreationForHost);
+
+    /**
+     * One host overriding model for all hosts: the same one as the given rule
+     */
+    default @NotNull B withModelSameAs(@NotNull SingleStateRealBlockReplacementRule singleStateReplacementRule) {
+        return this.withModel(singleStateReplacementRule.getModel());
+    }
+
+    /**
+     * Sets the given real item rule as the real item rule of this builder
+     */
+    @NotNull B withRealItemRule(@NotNull RealItemReplacementRule realItemRule);
+
+    /**
+     * Removes the real item rule of this builder
+     */
+    @NotNull B withoutRealItemRule();
+
+    /**
+     * Sets the given real item rule of this builder to a rule for a full block bounding,
+     * with the high ping host being as given,
+     * and with the fallback being the item form of the fallback's block for the real block's default state
+     */
+    @NotNull B withFullBlockBoundingBoxItem(@NotNull Supplier<@NotNull Item> highPingHostSupplier);
+
+    /**
+     * Sets the given real item rule of this builder to a rule for a full block bounding,
+     * with the fallback being the item form of the fallback's block for the real block's default state,
+     * and with the high ping host being the same as the fallback
+     */
+    @NotNull B withFullBlockBoundingBoxItem();
+
+    /**
+     * Adds the given host item rule to the host item rules in this builder
+     */
+    @NotNull B withHostItemRule(@NotNull HostItemReplacementRule hostItemRule);
+
+    /**
+     * Resmoves all host item rules of this builder
+     */
+    @NotNull B withoutHostItemRules();
+
+    /**
+     * Adds a host item rule for when the item form of the block of the real block's default state's host would place it, and the item form of that host's replacement's block is a good replacement for the host item
+     */
+    @NotNull B withHostItemRuleFromHostBlockAndHostReplacementBlock();
+
+    @NotNull R build();
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/HostItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/HostItemReplacementRule.java
new file mode 100644
index 0000000000000000000000000000000000000000..a25b1d9970f82b6d7085b977e29f83e53202763d
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/HostItemReplacementRule.java
@@ -0,0 +1,64 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import net.minecraft.world.item.Item;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Supplier;
+
+/**
+ * Potentially, if a directly placeable state (using a block item) of a block is used a host, its item form, if any, possibly multiple, may also need to be replaced (but only for players with the resource pack of course, since this is only relevant to hosts - not a fallbacks)
+ * <br>
+ * This class is not (and does not need to be) aware of the host it concerns
+ * <br>
+ * This class uses late initialization internally so that items are not referenced before block bootstrapping is finished
+ */
+public class HostItemReplacementRule {
+
+    private final @NotNull Supplier<@NotNull Item> hostPlacingItemSupplier;
+    private final @NotNull Supplier<@NotNull Item> hostPlacingItemReplacementSupplier;
+
+    /**
+     * The block item of the host block, that would place the host state if used
+     * <br>
+     * Is null only when not initialized yet
+     * @see #hostPlacingItemSupplier
+     */
+    private @Nullable Item hostPlacingItem;
+
+    /**
+     * The item we would like to replace the {@link #hostPlacingItem} by
+     * <br>
+     * Is null only when not initialized yet
+     * @see #hostPlacingItemReplacementSupplier
+     */
+    private @Nullable Item hostPlacingItemReplacement;
+
+    public HostItemReplacementRule(@NotNull Supplier<@NotNull Item> hostPlacingItemSupplier, @NotNull Supplier<@NotNull Item> hostPlacingItemReplacementSupplier) {
+        this.hostPlacingItemSupplier = hostPlacingItemSupplier;
+        this.hostPlacingItemReplacementSupplier = hostPlacingItemReplacementSupplier;
+    }
+
+    /**
+     * This must not be called before all block bootstrapping has finished
+     */
+    public @NotNull Item getHostPlacingItem() {
+        if (this.hostPlacingItem == null) {
+            this.hostPlacingItem = this.hostPlacingItemSupplier.get();
+        }
+        return this.hostPlacingItem;
+    }
+
+    /**
+     * This must not be called before all block bootstrapping has finished
+     */
+    public @NotNull Item getHostPlacingItemReplacement() {
+        if (this.hostPlacingItemReplacement == null) {
+            this.hostPlacingItemReplacement = this.hostPlacingItemReplacementSupplier.get();
+        }
+        return this.hostPlacingItemReplacement;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0299e1595170320fc2db30031c946c631a95714
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
@@ -0,0 +1,110 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import com.google.common.collect.Streams;
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collections;
+import java.util.IdentityHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.Function;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase {
+
+    private final @NotNull List<@NotNull BlockState> hostList;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #hasAsHost}
+     */
+    private final @NotNull Set<@NotNull BlockState> hostSet;
+
+    private final @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState;
+    private final @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost;
+    private final @NotNull List<@NotNull BlockState> fallbackList;
+    private final @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getHostAndFallbackBlocks}
+     */
+    private final @NotNull List<@NotNull Block> hostAndFallbackBlocks;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getPotentialBlockReplacementPairs}
+     */
+    private final @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> potentialBlockReplacementPairs;
+
+    private final @NotNull Map<@NotNull BlockState, @NotNull Model> modelPerHost;
+
+    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull Set<@NotNull BlockState> hostSet, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull Model> hostOverridingModelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules) {
+        super(real, realItemRule, hostItemRules);
+        this.hostSet = Collections.newSetFromMap(new IdentityHashMap<>(hostSet.stream().collect(Collectors.toMap(Function.identity(), $ -> true))));
+        this.hostList = List.copyOf(this.hostSet);
+        this.hostPerRealState = new IdentityHashMap<>(hostPerRealState);
+        this.hostReplacementPerHost = new IdentityHashMap<>(hostReplacementPerHost);
+        this.fallbackPerRealState = new IdentityHashMap<>(fallbackPerRealState);
+        this.fallbackList = fallbackPerRealState.values().stream().distinct().toList();
+        this.hostAndFallbackBlocks = Streams.concat(this.hostList.stream().map(BlockState::getBlock), this.fallbackPerRealState.values().stream().map(BlockState::getBlock)).distinct().toList();
+        this.potentialBlockReplacementPairs = Stream.of(this.hostPerRealState, this.hostReplacementPerHost, this.fallbackPerRealState)
+            .flatMap(map -> map.entrySet().stream().map(entry -> Pair.of(entry.getKey().getBlock(), entry.getValue().getBlock())))
+            .filter(pair -> !pair.left().equals(pair.right()))
+            .distinct()
+            .toList();
+        this.modelPerHost = new IdentityHashMap<>(hostOverridingModelPerHost);
+    }
+
+    @Override
+    public @NotNull List<@NotNull BlockState> getHosts() {
+        return this.hostList;
+    }
+
+    @Override
+    public boolean hasAsHost(@NotNull BlockState potentialHost) {
+        return this.hostSet.contains(potentialHost);
+    }
+
+    @Override
+    public @NotNull BlockState getHost(@NotNull BlockState realState) {
+        return this.hostPerRealState.get(realState);
+    }
+
+    @Override
+    public @NotNull BlockState getHostReplacement(@NotNull BlockState host) {
+        return this.hostReplacementPerHost.get(host);
+    }
+
+    @Override
+    public @NotNull List<@NotNull BlockState> getFallbacks() {
+        return this.fallbackList;
+    }
+
+    @Override
+    public @NotNull BlockState getFallback(@NotNull BlockState realState) {
+        return this.fallbackPerRealState.get(realState);
+    }
+
+    @Override
+    public @NotNull List<@NotNull Block> getHostAndFallbackBlocks() {
+        return this.hostAndFallbackBlocks;
+    }
+
+    @Override
+    public @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> getPotentialBlockReplacementPairs() {
+        return this.potentialBlockReplacementPairs;
+    }
+
+    @Override
+    public @NotNull Model getModel(@NotNull BlockState host) {
+        return this.modelPerHost.get(host);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/RealItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/RealItemReplacementRule.java
new file mode 100644
index 0000000000000000000000000000000000000000..97d59c6c248d3323c3f3e8d320c2b91656b9f1bf
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/RealItemReplacementRule.java
@@ -0,0 +1,102 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.function.Supplier;
+
+/**
+ * The information about a custom item for the real block of a {@link BlockReplacementRule}
+ * (note that each item can only represent one real block)
+ * <br>
+ * This class uses late initialization internally so that items are not referenced before block bootstrapping is finished
+ */
+public class RealItemReplacementRule {
+
+    private final @NotNull Supplier<@NotNull Item> lowPingHostSupplier;
+    private final @NotNull Supplier<@NotNull Item> highPingHostSupplier;
+    private final @NotNull Supplier<@NotNull Item> fallbackSupplier;
+
+    /**
+     * Is null only when not initialized yet
+     * @see #lowPingHostSupplier
+     */
+    private @Nullable Item lowPingHost;
+
+    /**
+     * Is null only when not initialized yet
+     * @see #highPingHostSupplier
+     */
+    private @Nullable Item highPingHost;
+
+    /**
+     * Is null only when not initialized yet
+     * @see #fallbackSupplier
+     */
+    private @Nullable Item fallback;
+
+    public RealItemReplacementRule(@NotNull Supplier<@NotNull Item> lowPingHostSupplier, @NotNull Supplier<@NotNull Item> highPingHostSupplier, @NotNull Supplier<@NotNull Item> fallbackSupplier) {
+        this.lowPingHostSupplier = lowPingHostSupplier;
+        this.highPingHostSupplier = highPingHostSupplier;
+        this.fallbackSupplier = fallbackSupplier;
+    }
+
+    /**
+     * This must not be called before all block bootstrapping has finished
+     * <br>
+     * This should be an item that would normally let the player place a block state with a (nearly) identical collision bounding box to the real state placed by the real item, and that is invisible
+     */
+    public @NotNull Item getLowPingHost() {
+        if (this.lowPingHost == null) {
+            this.lowPingHost = this.lowPingHostSupplier.get();
+        }
+        return this.lowPingHost;
+    }
+
+    /**
+     * This must not be called before all block bootstrapping has finished
+     * <br>
+     * This should be an item that would normally let the player place a block state with a (nearly) identical collision bounding box to the real state placed by the real item, and that looks as similar to the real state placed by the real item as possible
+     */
+    public @NotNull Item getHighPingHost() {
+        if (this.highPingHost == null) {
+            this.highPingHost = this.highPingHostSupplier.get();
+        }
+        return this.highPingHost;
+    }
+
+    /**
+     * This must not be called before all block bootstrapping has finished
+     * <br>
+     * This should be an item that would normally let the player place the block state that is the fallback for the real state placed by the real item
+     */
+    public @NotNull Item getFallback() {
+        if (this.fallback == null) {
+            this.fallback = this.fallbackSupplier.get();
+        }
+        return this.fallback;
+    }
+
+    /**
+     * Creates a {@link RealItemReplacementRule} for a real block that has a full block bounding box
+     * <br>
+     * The low ping host will be {@link Items#BARRIER}
+     */
+    public static @NotNull RealItemReplacementRule forFullBlockBoundingBox(@NotNull Supplier<@NotNull Item> highPingHostSupplier, @NotNull Supplier<@NotNull Item> fallbackSupplier) {
+        return new RealItemReplacementRule(() -> Items.BARRIER, highPingHostSupplier, fallbackSupplier);
+    }
+
+    /**
+     * Creates a {@link RealItemReplacementRule} for a real block that has a full block bounding box
+     * <br>
+     * The low ping host will be {@link Items#BARRIER}, and the high ping host will be the same as the fallback (since we already assume it looks similar)
+     */
+    public static @NotNull RealItemReplacementRule forFullBlockBoundingBox(@NotNull Supplier<@NotNull Item> fallbackSupplier) {
+        return forFullBlockBoundingBox(fallbackSupplier, fallbackSupplier);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..627e35f0d3a681d6b58d60618344c8dd33f2f915
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
@@ -0,0 +1,225 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import net.minecraft.core.Registry;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.IdentityHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+/**
+ * Concrete implementation of a builder for {@link SingleStateRealBlockReplacementRule} and {@link MultiStateRealBlockReplacementRule}
+ */
+public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockReplacementRuleBuilder<BlockReplacementRuleBase, SingleMultiStateRealBlockReplacementRuleBuilder> {
+
+    protected @Nullable Block real = null;
+    protected @NotNull Supplier<@Nullable RealItemReplacementRule> justInTimeRealItemRuleSupplier = () -> null;
+    private @NotNull Function<@NotNull BlockState, @Nullable BlockState> hostForRealState = $ -> null;
+    private @NotNull Function<@NotNull BlockState, @Nullable BlockState> hostReplacementForHost = $ -> null;
+    private @NotNull Function<@NotNull BlockState, @Nullable BlockState> fallbackForRealState = $ -> null;
+    private @NotNull Function<@NotNull BlockState, @Nullable Model> modelForHost = $ -> null;
+    private @NotNull List<@NotNull Supplier<@NotNull HostItemReplacementRule>> justInTimeHostItemRuleSuppliers = new ArrayList<>(0);
+
+    public SingleMultiStateRealBlockReplacementRuleBuilder() {}
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withReal(@NotNull Block real) {
+        this.real = real;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHost(@NotNull BlockState host) {
+        this.hostForRealState = $ -> host;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHostForRealState(@NotNull Function<@NotNull BlockState, @Nullable BlockState> hostForRealState) {
+        @NotNull Function<@NotNull BlockState, @Nullable BlockState> existingHostForRealState = this.hostForRealState;
+        this.hostForRealState = realState -> {
+            @Nullable BlockState host = hostForRealState.apply(realState);
+            return host != null ? host : existingHostForRealState.apply(realState);
+        };
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHostReplacement(@NotNull BlockState hostReplacement) {
+        this.hostReplacementForHost = $ -> hostReplacement;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHostReplacementForHost(@NotNull Function<@NotNull BlockState, @Nullable BlockState> hostReplacementForHost) {
+        @NotNull Function<@NotNull BlockState, @Nullable BlockState> existingHostReplacementForHost = this.hostReplacementForHost;
+        this.hostReplacementForHost = host -> {
+            @Nullable BlockState hostReplacement = hostReplacementForHost.apply(host);
+            return hostReplacement != null ? hostReplacement : existingHostReplacementForHost.apply(host);
+        };
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withFallback(@NotNull BlockState fallback) {
+        this.fallbackForRealState = $ -> fallback;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withFallbackForRealState(@NotNull Function<@NotNull BlockState, @Nullable BlockState> fallbackForRealState) {
+        @NotNull Function<@NotNull BlockState, @Nullable BlockState> existingFallbackForRealState = this.fallbackForRealState;
+        this.fallbackForRealState = realState -> {
+            @Nullable BlockState host = fallbackForRealState.apply(realState);
+            return host != null ? host : existingFallbackForRealState.apply(realState);
+        };
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModel(@NotNull Model model) {
+        this.modelForHost = $ -> model;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelForHost(@NotNull Function<@NotNull BlockState, @Nullable Model> modelForHost) {
+        @NotNull Function<@NotNull BlockState, @Nullable Model> existingHostOverridingModelForHost = this.modelForHost;
+        this.modelForHost = host -> {
+            @Nullable Model hostOverridingModel = modelForHost.apply(host);
+            return hostOverridingModel != null ? hostOverridingModel : existingHostOverridingModelForHost.apply(host);
+        };
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelCreation(@NotNull ModelCreation modelCreation) {
+        this.modelForHost = $ -> modelCreation.create(ResourcePackAssetIntention.BLOCK, Registry.BLOCK.getKey(this.real));
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withModelCreationForHost(@NotNull Function<@NotNull BlockState, @Nullable ModelCreation> modelCreationForHost) {
+        return this.withModelForHost(host -> {
+            @Nullable ModelCreation modelCreation = modelCreationForHost.apply(host);
+            return modelCreation == null ? null : modelCreation.create(ResourcePackAssetIntention.BLOCK, Registry.BLOCK.getKey(this.real));
+        });
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withRealItemRule(@NotNull RealItemReplacementRule realItemRule) {
+        this.justInTimeRealItemRuleSupplier = () -> realItemRule;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withoutRealItemRule() {
+        this.justInTimeRealItemRuleSupplier = () -> null;
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withFullBlockBoundingBoxItem(@NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        this.justInTimeRealItemRuleSupplier = () -> RealItemReplacementRule.forFullBlockBoundingBox(highPingHostSupplier, () -> this.fallbackForRealState.apply(this.real.defaultBlockState()).getBlock().asItem());
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withFullBlockBoundingBoxItem() {
+        this.justInTimeRealItemRuleSupplier = () -> RealItemReplacementRule.forFullBlockBoundingBox(() -> this.fallbackForRealState.apply(this.real.defaultBlockState()).getBlock().asItem());
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHostItemRule(@NotNull HostItemReplacementRule hostItemRule) {
+        this.justInTimeHostItemRuleSuppliers.add(() -> hostItemRule);
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withoutHostItemRules() {
+        this.justInTimeHostItemRuleSuppliers.clear();
+        return this;
+    }
+
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHostItemRuleFromHostBlockAndHostReplacementBlock() {
+        this.justInTimeHostItemRuleSuppliers.add(() -> {
+            @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(this.real.defaultBlockState()));
+            return new HostItemReplacementRule(() -> host.getBlock().asItem(), () -> this.hostReplacementForHost.apply(host).getBlock().asItem());
+        });
+        return this;
+    }
+
+    /**
+     * May return a {@link SingleStateRealBlockReplacementRule} if possible
+     */
+    @Override
+    public @NotNull BlockReplacementRuleBase build() {
+        Validate.notNull(this.real);
+        @Nullable RealItemReplacementRule realItemRule = this.justInTimeRealItemRuleSupplier.get();
+        @NotNull List<@NotNull HostItemReplacementRule> hostItemRules = this.justInTimeHostItemRuleSuppliers.stream().map(Supplier::get).toList();
+        var realStates = this.real.getStateDefinition().getPossibleStates();
+        if (realStates.size() == 1) {
+            @NotNull BlockState realState = Validate.notNull(this.real.defaultBlockState());
+            @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(realState));
+            @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
+            @NotNull BlockState fallback = Validate.notNull(this.fallbackForRealState.apply(realState));
+            @NotNull Model model = Validate.notNull(this.modelForHost.apply(host));
+            return new SingleStateRealBlockReplacementRule(
+                this.real,
+                realItemRule,
+                host,
+                hostReplacement,
+                fallback,
+                model,
+                hostItemRules
+            );
+        }
+        @NotNull Set<@NotNull BlockState> hosts = Collections.newSetFromMap(new IdentityHashMap<>(0));
+        @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState = new IdentityHashMap<>(0);
+        @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost = new IdentityHashMap<>(0);
+        @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState = new IdentityHashMap<>(0);
+        @NotNull Map<@NotNull BlockState, @NotNull Model> modelPerHost = new IdentityHashMap<>(0);
+        for (@NotNull BlockState realState : realStates) {
+            @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(realState));
+            hostPerRealState.put(realState, host);
+            hosts.add(host);
+            @NotNull BlockState fallback = Validate.notNull(this.fallbackForRealState.apply(realState));
+            fallbackPerRealState.put(realState, fallback);
+        }
+        for (@NotNull BlockState host : hosts) {
+            @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
+            hostReplacementPerHost.put(host, hostReplacement);
+            @NotNull Model model = Validate.notNull(this.modelForHost.apply(host));
+            modelPerHost.put(host, model);
+        }
+        return new MultiStateRealBlockReplacementRule(
+            this.real,
+            realItemRule,
+            hosts,
+            hostPerRealState,
+            hostReplacementPerHost,
+            fallbackPerRealState,
+            modelPerHost,
+            hostItemRules
+        );
+    }
+
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
new file mode 100644
index 0000000000000000000000000000000000000000..96fc14feeeca9909a18fc806eb6b54048bb662cd
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
@@ -0,0 +1,143 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block.replacementrule;
+
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.core.Registry;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+/**
+ * Single-state real blocks could be managed by a {@link MultiStateRealBlockReplacementRule} rule as well, but this implementation is slightly more efficient
+ */
+public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBase {
+
+    private final @NotNull BlockState host;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getHosts}
+     */
+    private final @NotNull List<@NotNull BlockState> hosts;
+
+    private final @NotNull BlockState hostReplacement;
+    private final @NotNull BlockState fallback;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getFallbacks}
+     */
+    private final @NotNull List<@NotNull BlockState> fallbacks;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getHostAndFallbackBlocks()}
+     */
+    private final @NotNull List<@NotNull Block> hostAndFallbackBlocks;
+
+    /**
+     * This is simply a backing field for quickly returning {@link #getPotentialBlockReplacementPairs}
+     */
+    private final @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> potentialBlockReplacementPairs;
+
+    private final @NotNull Model model;
+
+    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull Model model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
+        super(real, realItemRule, hostItemRules);
+        this.host = host;
+        this.hosts = Collections.singletonList(this.host);
+        this.hostReplacement = hostReplacement;
+        this.fallback = fallback;
+        this.fallbacks = Collections.singletonList(this.fallback);
+        this.hostAndFallbackBlocks = Stream.of(this.host.getBlock(), this.fallback.getBlock()).distinct().toList();
+        this.potentialBlockReplacementPairs = Stream.of(
+            Pair.of(this.real, this.host.getBlock()),
+            Pair.of(this.host.getBlock(), this.hostReplacement.getBlock()),
+            Pair.of(this.real, this.fallback.getBlock())
+        ).filter(pair -> !pair.left().equals(pair.right())).distinct().toList();
+        this.model = model;
+    }
+
+    @Override
+    public @NotNull List<@NotNull BlockState> getHosts() {
+        return this.hosts;
+    }
+
+    @Override
+    public boolean hasAsHost(@NotNull BlockState potentialHost) {
+        return this.host.equals(potentialHost);
+    }
+
+    public @NotNull BlockState getHost() {
+        return this.host;
+    }
+
+    @Override
+    public @NotNull BlockState getHost(@NotNull BlockState realState) {
+        return this.host;
+    }
+
+    @Override
+    public @NotNull BlockState getHostReplacement(@NotNull BlockState host) {
+        return this.hostReplacement;
+    }
+
+    public @NotNull BlockState getHostReplacement() {
+        return this.hostReplacement;
+    }
+
+    @Override
+    public @NotNull List<@NotNull BlockState> getFallbacks() {
+        return this.fallbacks;
+    }
+
+    @Override
+    public @NotNull BlockState getFallback(@NotNull BlockState realState) {
+        return this.fallback;
+    }
+
+    public @NotNull BlockState getFallback() {
+        return this.fallback;
+    }
+
+    @Override
+    public @NotNull List<@NotNull Block> getHostAndFallbackBlocks() {
+        return this.hostAndFallbackBlocks;
+    }
+
+    @Override
+    public @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> getPotentialBlockReplacementPairs() {
+        return this.potentialBlockReplacementPairs;
+    }
+
+    @Override
+    public @NotNull Model getModel(@NotNull BlockState host) {
+        return this.model;
+    }
+
+    public @NotNull Model getModel() {
+        return this.model;
+    }
+
+    @Override
+    public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(this.host.getBlock())).withEmptyIntention();
+        @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
+        if (this.host.getBlock().getStateDefinition().getPossibleStates().size() == 1) {
+            minecraftBlockStates.setNoVariantModel(this.model, resourcePack, false);
+        } else {
+            minecraftBlockStates.setModel(this.host, this.model, resourcePack, false);
+        }
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index be9a7e40394c5a7bd705b4e5c44240e71a96eeea..a6930c41981691b495a6aaa59f12e130037245af 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -39,7 +39,7 @@ public interface ItemReplacementRule {
 
     }
 
-    @Nullable ItemStack replace(ItemStack item, boolean hasResourcePack);
+    @Nullable ItemStack replace(ItemStack item, boolean hasResourcePack, boolean hasHighPing);
 
     @NotNull Item getReal();
 
@@ -52,8 +52,10 @@ public interface ItemReplacementRule {
         public static class Builder implements ItemReplacementRule.Builder {
 
             private @Nullable Item real;
-            private @Nullable Supplier<@NotNull Item> hostSupplier;
-            private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
+            private @Nullable Supplier<@NotNull Item> lowPingHostSupplier;
+            private @Nullable Function<@NotNull Item, @NotNull Integer> computeLowPingHostCustomModelData;
+            private @Nullable Supplier<@NotNull Item> highPingHostSupplier;
+            private @Nullable Function<@NotNull Item, @NotNull Integer> computeHighPingHostCustomModelData;
             private @Nullable Supplier<@NotNull Item> fallbackSupplier;
             private @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate = item -> false;
             private @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction = item -> null;
@@ -65,18 +67,33 @@ public interface ItemReplacementRule {
                 return this;
             }
 
-            public @NotNull SimpleItemReplacementRule.Builder withHost(@NotNull Supplier<@NotNull Item> hostSupplier) {
-                this.hostSupplier = hostSupplier;
+            public @NotNull SimpleItemReplacementRule.Builder withLowPingHost(@NotNull Supplier<@NotNull Item> lowPingHostSupplier) {
+                this.lowPingHostSupplier = lowPingHostSupplier;
                 return this;
             }
 
-            public @NotNull SimpleItemReplacementRule.Builder withHostCustomModelData(int hostCustomModelData) {
-                this.computeHostCustomModelData = host -> hostCustomModelData;
+            public @NotNull SimpleItemReplacementRule.Builder withLowPingHostCustomModelData(int lowPingHostCustomModelData) {
+                this.computeLowPingHostCustomModelData = host -> lowPingHostCustomModelData;
                 return this;
             }
 
-            public @NotNull SimpleItemReplacementRule.Builder withNextUnusedHostCustomModelData() {
-                this.computeHostCustomModelData = UsedHostCustomModelData::generateUnusedHostCustomModelData;
+            public @NotNull SimpleItemReplacementRule.Builder withNextUnusedLowPingHostCustomModelData() {
+                this.computeLowPingHostCustomModelData = UsedHostCustomModelData::generateUnusedHostCustomModelData;
+                return this;
+            }
+
+            public @NotNull SimpleItemReplacementRule.Builder withHighPingHost(@NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+                this.highPingHostSupplier = highPingHostSupplier;
+                return this;
+            }
+
+            public @NotNull SimpleItemReplacementRule.Builder withHighPingHostCustomModelData(int highPingHostCustomModelData) {
+                this.computeHighPingHostCustomModelData = host -> highPingHostCustomModelData;
+                return this;
+            }
+
+            public @NotNull SimpleItemReplacementRule.Builder withNextUnusedHighPingHostCustomModelData() {
+                this.computeHighPingHostCustomModelData = UsedHostCustomModelData::generateUnusedHostCustomModelData;
                 return this;
             }
 
@@ -110,41 +127,51 @@ public interface ItemReplacementRule {
 
             public @NotNull SimpleItemReplacementRule.Builder forBlock(@NotNull Block block) {
                 return this
-                    .withHost(() -> block.replacementRule.getHostItem())
-                    .withNextUnusedHostCustomModelData()
-                    .withFallback(() -> block.replacementRule.getFallbackItem())
-                    .withIsBlockHostReplacing(item -> block.replacementRule.isHostReplacing(item))
-                    .withBlockHostReplacingItemReplacement(item -> block.replacementRule.getHostReplacingItemReplacement(item))
-                    .withModel(block.replacementRule.getModelForStatePlacedByItem().getReference(ResourcePackAssetIntention.ITEM));
+                    .withLowPingHost(() -> block.replacementRule.getRealItemRule().getLowPingHost())
+                    .withHighPingHost(() -> block.replacementRule.getRealItemRule().getHighPingHost())
+                    .withNextUnusedLowPingHostCustomModelData()
+                    .withNextUnusedHighPingHostCustomModelData()
+                    .withFallback(() -> block.replacementRule.getRealItemRule().getFallback())
+                    .withModel(block.replacementRule.getRealItemModel())
+                    .withIsBlockHostReplacing(item -> block.replacementRule.isHostPlacingItem(item))
+                    .withBlockHostReplacingItemReplacement(item -> block.replacementRule.getHostPlacingItemReplacement(item));
             }
 
             @Override
             public @NotNull SimpleItemReplacementRule build() {
                 Validate.notNull(this.real);
-                Validate.notNull(this.hostSupplier);
-                Validate.notNull(this.computeHostCustomModelData);
+                Validate.notNull(this.lowPingHostSupplier);
+                Validate.notNull(this.computeLowPingHostCustomModelData);
+                Validate.notNull(this.highPingHostSupplier);
+                Validate.notNull(this.computeHighPingHostCustomModelData);
                 Validate.notNull(this.fallbackSupplier);
                 Validate.notNull(this.modelSupplier);
-                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier, this.isBlockHostReplacingPredicate, this.blockHostReplacingItemReplacementFunction, this.modelSupplier.get());
+                return new SimpleItemReplacementRule(this.real, this.lowPingHostSupplier, this.computeLowPingHostCustomModelData, this.highPingHostSupplier, this.computeHighPingHostCustomModelData, this.fallbackSupplier, this.isBlockHostReplacingPredicate, this.blockHostReplacingItemReplacementFunction, this.modelSupplier.get());
             }
 
         }
 
         private final @NotNull Item real;
-        private @Nullable Item host = null;
-        private @Nullable Supplier<@NotNull Item> hostSupplier;
-        private int hostCustomModelData = -1;
-        private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
+        private @Nullable Item lowPingHost = null;
+        private @Nullable Supplier<@NotNull Item> lowPingHostSupplier;
+        private int lowPingHostCustomModelData = -1;
+        private @Nullable Function<@NotNull Item, @NotNull Integer> computeLowPingHostCustomModelData;
+        private @Nullable Item highPingHost = null;
+        private @Nullable Supplier<@NotNull Item> highPingHostSupplier;
+        private int highPingHostCustomModelData = -1;
+        private @Nullable Function<@NotNull Item, @NotNull Integer> computeHighPingHostCustomModelData;
         private @Nullable Item fallback = null;
         private @Nullable Supplier<@NotNull Item> fallbackSupplier;
         private final @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate;
         private final @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction;
         private final @NotNull Model model;
 
-        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate, @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction, @NotNull Model model) {
+        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> lowPingHostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeLowPingHostCustomModelData, @NotNull Supplier<@NotNull Item> highPingHostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHighPingHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate, @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction, @NotNull Model model) {
             this.real = real;
-            this.hostSupplier = hostSupplier;
-            this.computeHostCustomModelData = computeHostCustomModelData;
+            this.lowPingHostSupplier = lowPingHostSupplier;
+            this.computeLowPingHostCustomModelData = computeLowPingHostCustomModelData;
+            this.highPingHostSupplier = highPingHostSupplier;
+            this.computeHighPingHostCustomModelData = computeHighPingHostCustomModelData;
             this.fallbackSupplier = fallbackSupplier;
             this.isBlockHostReplacingPredicate = isBlockHostReplacingPredicate;
             this.blockHostReplacingItemReplacementFunction = blockHostReplacingItemReplacementFunction;
@@ -186,14 +213,14 @@ public interface ItemReplacementRule {
         }
 
         @Override
-        public @Nullable ItemStack replace(@NotNull ItemStack item, boolean hasResourcePack) {
+        public @Nullable ItemStack replace(@NotNull ItemStack item, boolean hasResourcePack, boolean hasHighPing) {
             if (item.is(this.getReal())) {
                 @NotNull ItemStack clone = item.copy();
                 CompoundTag tag = clone.getOrCreateTag();
                 if (hasResourcePack) {
-                    clone.setItem(this.getHost());
+                    clone.setItem(this.getHost(hasHighPing));
                     // Setting custom model data is based on CraftMetaItem.applyToItem(CompoundTag)
-                    tag.putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, this.getHostCustomModelData());
+                    tag.putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, this.getHostCustomModelData(hasHighPing));
                 } else {
                     clone.setItem(this.getFallback());
                 }
@@ -214,20 +241,44 @@ public interface ItemReplacementRule {
             return this.real;
         }
 
-        public @NotNull Item getHost() {
-            if (this.host == null) {
-                this.host = this.hostSupplier.get();
-                this.hostSupplier = null;
+        public @NotNull Item getLowPingHost() {
+            if (this.lowPingHost == null) {
+                this.lowPingHost = this.lowPingHostSupplier.get();
+                this.lowPingHostSupplier = null;
+            }
+            return this.lowPingHost;
+        }
+
+        public int getLowPingHostCustomModelData() {
+            if (this.lowPingHostCustomModelData == -1) {
+                this.lowPingHostCustomModelData = this.computeLowPingHostCustomModelData.apply(this.getLowPingHost());
+                this.computeLowPingHostCustomModelData = null;
+            }
+            return this.lowPingHostCustomModelData;
+        }
+
+        public @NotNull Item getHighPingHost() {
+            if (this.highPingHost == null) {
+                this.highPingHost = this.highPingHostSupplier.get();
+                this.highPingHostSupplier = null;
             }
-            return this.host;
+            return this.highPingHost;
         }
 
-        public int getHostCustomModelData() {
-            if (this.hostCustomModelData == -1) {
-                this.hostCustomModelData = this.computeHostCustomModelData.apply(this.getHost());
-                this.computeHostCustomModelData = null;
+        public int getHighPingHostCustomModelData() {
+            if (this.highPingHostCustomModelData == -1) {
+                this.highPingHostCustomModelData = this.computeHighPingHostCustomModelData.apply(this.getHighPingHost());
+                this.computeHighPingHostCustomModelData = null;
             }
-            return this.hostCustomModelData;
+            return this.highPingHostCustomModelData;
+        }
+
+        public @NotNull Item getHost(boolean hasHighPing) {
+            return hasHighPing ? this.getHighPingHost() : this.getLowPingHost();
+        }
+
+        public int getHostCustomModelData(boolean hasHighPing) {
+            return hasHighPing ? this.getHighPingHostCustomModelData() : this.getLowPingHostCustomModelData();
         }
 
         public @NotNull Item getFallback() {
@@ -262,9 +313,15 @@ public interface ItemReplacementRule {
 
         @Override
         public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
-            @NotNull NamespacedKeyWithoutIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(this.getHost()));
-            @NotNull MutableResourcePackModel minecraftItemModel = resourcePack.getModel(ResourcePackAssetIntention.ITEM, hostKey);
-            minecraftItemModel.addModelOverride(this.getHostCustomModelData(), this.model, resourcePack, false);
+
+            @NotNull NamespacedKeyWithoutIntention lowPingHostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(this.getLowPingHost()));
+            @NotNull MutableResourcePackModel lowPingMinecraftItemModel = resourcePack.getModel(ResourcePackAssetIntention.ITEM, lowPingHostKey);
+            lowPingMinecraftItemModel.addModelOverride(this.getLowPingHostCustomModelData(), this.model, resourcePack, false);
+
+            @NotNull NamespacedKeyWithoutIntention highPingHostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(this.getHighPingHost()));
+            @NotNull MutableResourcePackModel highPingMinecraftItemModel = resourcePack.getModel(ResourcePackAssetIntention.ITEM, highPingHostKey);
+            highPingMinecraftItemModel.addModelOverride(this.getHighPingHostCustomModelData(), this.model, resourcePack, false);
+
         }
 
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 444adf5ed8b7fd0fd1c957e97034b1e4881a9627..5ffab7362b7cd659ec3224ed881fae579bbb8558 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -13,8 +13,8 @@ import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.item.Items;
-import nl.martijnmuijsers.paper.block.BlockReplacementRule;
 import nl.martijnmuijsers.paper.block.SuCraftBlocks;
+import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -76,7 +76,7 @@ public class SuCraftItems {
     /**
      * Based on {@link Items#SANDSTONE}
      */
-    public static final Item SOUL_SANDSTONE = registerBlock(SuCraftBlocks.SOUL_SANDSTONE, "Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SOUL_SAND));
+    public static final Item SOUL_SANDSTONE = registerBlock(SuCraftBlocks.SOUL_SANDSTONE, "Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SAND));
 
     public static final Item SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.SANDSTONE_BRICKS, "Sandstone", () -> Items.SANDSTONE);
     public static final Item RED_SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.RED_SANDSTONE_BRICKS, "Red Sandstone", () -> Items.RED_SANDSTONE);
@@ -85,12 +85,12 @@ public class SuCraftItems {
     /**
      * Based on {@link Items#CHISELED_SANDSTONE}
      */
-    public static final Item CHISELED_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CHISELED_SOUL_SANDSTONE, "Chiseled Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SOUL_SAND));
+    public static final Item CHISELED_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CHISELED_SOUL_SANDSTONE, "Chiseled Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SAND));
 
     /**
      * Based on {@link Items#CUT_SANDSTONE}
      */
-    public static final Item CUT_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CUT_SOUL_SANDSTONE, "Cut Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SOUL_SAND));
+    public static final Item CUT_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CUT_SOUL_SANDSTONE, "Cut Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SAND));
 
     public static final Item ANDESITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.ANDESITE_COBBLESTONE, "Andesite", () -> Items.ANDESITE);
     public static final Item DIORITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.DIORITE_COBBLESTONE, "Diorite", () -> Items.DIORITE);
@@ -121,57 +121,57 @@ public class SuCraftItems {
     /**
      * Based on {@link Items#STONE_BRICKS}
      */
-    private static @NotNull Item registerStoneBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, typeDisplayName + " Stone Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerStoneBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, typeDisplayName + " Stone Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#INFESTED_STONE_BRICKS}
      */
-    private static @NotNull Item registerInfested(@NotNull Block block, @NotNull String uninfestedDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, "Infested " + uninfestedDisplayName, CreativeModeTab.TAB_DECORATIONS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerInfested(@NotNull Block block, @NotNull String uninfestedDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, "Infested " + uninfestedDisplayName, CreativeModeTab.TAB_DECORATIONS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#BOOKSHELF}
      */
-    private static @NotNull Item registerBookshelf(@NotNull Block block, @NotNull String woodTypeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, woodTypeDisplayName + " Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerBookshelf(@NotNull Block block, @NotNull String woodTypeDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, woodTypeDisplayName + " Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#OAK_PLANKS}
      */
-    private static @NotNull Item registerPlanks(@NotNull Block block, @NotNull String descriptionDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, descriptionDisplayName + " Planks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerPlanks(@NotNull Block block, @NotNull String descriptionDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, descriptionDisplayName + " Planks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#STONE_BRICKS}
      */
-    private static @NotNull Item registerBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, typeDisplayName + " Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, typeDisplayName + " Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#POLISHED_ANDESITE}
      */
-    private static @NotNull Item registerPolished(@NotNull Block block, @NotNull String unpolishedDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, "Polished " + unpolishedDisplayName, CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerPolished(@NotNull Block block, @NotNull String unpolishedDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, "Polished " + unpolishedDisplayName, CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#CHISELED_STONE_BRICKS}
      */
-    private static @NotNull Item registerChiseledBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, "Chiseled " + typeDisplayName + " Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerChiseledBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, "Chiseled " + typeDisplayName + " Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     /**
      * Based on {@link Items#COBBLESTONE}
      */
-    private static @NotNull Item registerCobblestone(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
-        return registerBlock(block, typeDisplayName + " Cobblestone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    private static @NotNull Item registerCobblestone(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> highPingHostSupplier) {
+        return registerBlock(block, typeDisplayName + " Cobblestone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
     public static Item bootstrap() {
@@ -180,7 +180,7 @@ public class SuCraftItems {
         for (Block block : Registry.BLOCK) {
             BlockReplacementRule replacementRule = block.replacementRule;
             if (replacementRule != null) {
-                for (Item item : replacementRule.getHostReplacingItems()) {
+                for (Item item : replacementRule.getHostPlacingItems()) {
                     item.replacementRule = block.asItem().replacementRule;
                 }
             }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 85499d462cbb6e9502fd089ed383cb40a64194a4..48914b2de1bd90a6934acba269c8d3ab32fdd711 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -9,7 +9,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
-import nl.martijnmuijsers.paper.block.BlockReplacementRule;
+import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import nl.martijnmuijsers.paper.item.ItemReplacementRule;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 36;
+    private static final int currentResourcePackVersion = 37;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 7c16070effd4b5fde33128b4c9b7824869fa7a1f..330f635dadc2d165a404b02daa0d7b122a55a68f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -27,6 +27,8 @@ import java.util.WeakHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.configuration.GlobalConfiguration;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos; // Paper
@@ -2441,6 +2443,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return this.resourcePackStatus == PlayerResourcePackStatusEvent.Status.ACCEPTED || this.resourcePackStatus == PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED;
     }
 
+    @Override
+    public boolean hasHighPingForCustomBlocks() {
+        return this.getPing() > GlobalConfiguration.get().customBlocksAndItems.maxPingThatCountsAsLowForCustomBlocks;
+    }
+
     // Martijn end - custom blocks and items
 
     // Paper end
