From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 22 Sep 2021 22:05:28 +0200
Subject: [PATCH] Expose player chunk information


diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index b05a16ff50e3a5c6780c1c84baf8331e2924ad1c..e1a652a9c18bfacc50cb259f642d70051d4fa433 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -25,9 +25,12 @@ import net.minecraft.world.level.chunk.LevelChunk;
 
 import java.util.ArrayDeque;
 import java.util.ArrayList;
+import java.util.HashSet; // Martijn in Paper - expose player chunk information
 import java.util.List;
+import java.util.Set; // Martijn in Paper - expose player chunk information
 import java.util.TreeSet;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors; // Martijn in Paper - expose player chunk information
 
 public final class PlayerChunkLoader {
 
@@ -177,6 +180,12 @@ public final class PlayerChunkLoader {
     }
     // Martijn in Paper end - entity tracking view distance
 
+    // Martijn in Paper start - expose player chunk information
+    public int getConcurrentChunksBeingSent() {
+        return this.concurrentChunkSends.get();
+    }
+    // Martijn in Paper end - expose player chunk information
+
     // internal methods
 
     public int getSendDistance() {
@@ -838,6 +847,28 @@ public final class PlayerChunkLoader {
             return Math.max(tickViewDistance + 1, this.loadViewDistance == -1 ? this.loader.getLoadDistance() : this.loadViewDistance);
         }
 
+        // Martijn in Paper start - expose player chunk information
+        public Set<Long> getUnorderedChunksQueuedToBeLoaded() {
+            return this.loadQueue.stream().map(chunkPriorityHolder -> CoordinateUtils.getChunkKey(chunkPriorityHolder.chunkX, chunkPriorityHolder.chunkZ)).collect(Collectors.toUnmodifiableSet());
+        }
+
+        public Set<Long> getUnorderedChunksQueuedToBeSent() {
+            return this.sendQueue.stream().map(chunkPriorityHolder -> CoordinateUtils.getChunkKey(chunkPriorityHolder.chunkX, chunkPriorityHolder.chunkZ)).collect(Collectors.toUnmodifiableSet());
+        }
+
+        public List<Long> getOrderedChunksQueuedToBeLoaded() {
+            return this.loadQueue.stream().map(chunkPriorityHolder -> CoordinateUtils.getChunkKey(chunkPriorityHolder.chunkX, chunkPriorityHolder.chunkZ)).toList();
+        }
+
+        public List<Long> getOrderedChunksQueuedToBeSent() {
+            return this.sendQueue.stream().map(chunkPriorityHolder -> CoordinateUtils.getChunkKey(chunkPriorityHolder.chunkX, chunkPriorityHolder.chunkZ)).toList();
+        }
+
+        public Set<Long> getSentChunks() {
+            return new HashSet<>(this.sentChunks);
+        }
+        // Martijn in Paper end - expose player chunk information
+
         public boolean hasSentChunk(final int chunkX, final int chunkZ) {
             return this.sentChunks.contains(CoordinateUtils.getChunkKey(chunkX, chunkZ));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 2850a8f99d70a94d085ddf70170ce26d894f38d3..61cc6add9578f03d37b63eec14a1d4b9de5c8eb9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2094,6 +2094,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         getHandle().getChunkSource().chunkMap.playerChunkManager.setAllowEntityTrackingBeyondNoTickViewDistance(allow);
     }
     // Martijn in Paper end - entity tracking view distance
+
+    // Martijn in Paper start - expose player chunk information
+    @Override
+    public int getConcurrentChunksBeingSent() {
+        return getHandle().getChunkSource().chunkMap.playerChunkManager.getConcurrentChunksBeingSent();
+    }
+    // Martijn in Paper end - expose player chunk information
     // Paper end - add view distances
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index da92ce64af0cbbc1aaaa1689d2956dcd0ff5bfcf..82e5f791b77b119d111382dd6d59931aebfef266 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -14,6 +14,7 @@ import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -25,7 +26,10 @@ import java.util.UUID;
 import java.util.WeakHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.util.CoordinateUtils;
 import net.minecraft.Util;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
@@ -653,6 +657,68 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         // Martijn end - update chunk send deadline based on chunk send rate
     }
     // Martijn in Paper end - per-player chunk send rate
+
+    // Martijn in Paper start - expose player chunk information
+    @Override
+    public Set<Long> getUnorderedChunksQueuedToBeLoaded() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return Collections.emptySet();
+        }
+        return data.getUnorderedChunksQueuedToBeLoaded();
+    }
+
+    @Override
+    public Set<Long> getUnorderedChunksQueuedToBeSent() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return Collections.emptySet();
+        }
+        return data.getUnorderedChunksQueuedToBeSent();
+    }
+
+    @Override
+    public List<Long> getOrderedChunksQueuedToBeLoaded() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return Collections.emptyList();
+        }
+        return data.getOrderedChunksQueuedToBeLoaded();
+    }
+
+    @Override
+    public List<Long> getOrderedChunksQueuedToBeSent() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return Collections.emptyList();
+        }
+        return data.getOrderedChunksQueuedToBeSent();
+    }
+
+    @Override
+    public Set<Long> getSentChunks() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return Collections.emptySet();
+        }
+        return data.getSentChunks();
+    }
+
+    @Override
+    public boolean hasSentChunk(int chunkX, int chunkZ) {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return false;
+        }
+        return data.hasSentChunk(chunkX, chunkZ);
+    }
+    // Martijn in Paper end - expose player chunk information
     // Paper end - implement view distances
 
     @Override
