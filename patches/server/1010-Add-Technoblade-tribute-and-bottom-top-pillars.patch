From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 5 Jul 2022 14:45:34 +0200
Subject: [PATCH] Add Technoblade tribute and bottom-top pillars


diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
index 209c296a1ee3483b15d6cc960dca1cc3dca3544e..cd2c49809030ae3eddfdd887479e90dc6c5a434b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
@@ -97,4 +97,27 @@ public class Model extends ResourcePackIntentionedAssetDataByContent<ModelConten
 
     }
 
+    /**
+     * @see ModelContent.BottomTopPillarCube
+     */
+    public static final class BottomTopPillarCube {
+
+        private BottomTopPillarCube() {}
+
+        private static final @NotNull ModelCreation DEFAULT_CREATION = creation(ModelContent.BottomTopPillarCube.defaultCreation());
+
+        public static @NotNull ModelCreation defaultCreation() {
+            return DEFAULT_CREATION;
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
+            return creation(ModelContent.BottomTopPillarCube.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
+            return creation(ModelContent.BottomTopPillarCube.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+        }
+
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index a5bd9b75ecc7ad13f8adc63464d850348a756f0e..d5e6458ef004aba44dfe7b167f6f18782f5fe1c9 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -77,7 +77,7 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
     }
 
     /**
-     * A form of {@link ModelContent}: a full cube with one texture for the y-oriented sides, and one textures for the x- and z-oriented sides
+     * A form of {@link ModelContent}: a full cube with one texture for the y-oriented sides, and one texture for the x- and z-oriented sides
      */
     public static final class YPillarCube extends ModelContent {
 
@@ -112,7 +112,7 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
             return (intention, key) -> create(intention, key, endTexture, sideTexture);
         }
 
-        private static final @NotNull ModelContentCreation DEFAULT_CREATION = creation(Texture.defaultCreation(), Texture.defaultTopCreation());
+        private static final @NotNull ModelContentCreation DEFAULT_CREATION = creation(Texture.defaultEndCreation(), Texture.defaultCreation());
 
         public static @NotNull ModelContentCreation defaultCreation() {
             return DEFAULT_CREATION;
@@ -128,6 +128,61 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
 
     }
 
+    /**
+     * A form of {@link ModelContent}: a full cube with one texture for the bottom, one textures for the x- and z-oriented sides, and one texture for the top
+     */
+    public static final class BottomTopPillarCube extends ModelContent {
+
+        private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("cube_bottom_top"), Existing.getInstance());
+
+        private final @NotNull Texture bottomTexture;
+        private final @NotNull Texture sideTexture;
+        private final @NotNull Texture topTexture;
+
+        public BottomTopPillarCube(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+            super();
+            this.bottomTexture = bottomTexture;
+            this.sideTexture = sideTexture;
+            this.topTexture = topTexture;
+        }
+
+        @Override
+        void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
+            resourcePackModel.setParent(parent);
+            resourcePackModel.setBottomTopTextures(this.bottomTexture, this.sideTexture, this.topTexture);
+            this.bottomTexture.addToResourcePack(resourcePack, false);
+            this.sideTexture.addToResourcePack(resourcePack, false);
+            this.topTexture.addToResourcePack(resourcePack, false);
+        }
+
+        public static @NotNull BottomTopPillarCube create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key, @NotNull TextureCreation bottomTexture, @NotNull TextureCreation sideTexture, @NotNull TextureCreation topTexture) {
+            return new BottomTopPillarCube(bottomTexture.create(intention, key), sideTexture.create(intention, key), topTexture.create(intention, key));
+        }
+
+        public static @NotNull ModelContentCreation creation(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+            return (intention, key) -> new BottomTopPillarCube(bottomTexture, sideTexture, topTexture);
+        }
+
+        public static @NotNull ModelContentCreation creation(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation sideTexture, @NotNull TextureCreation topTexture) {
+            return (intention, key) -> create(intention, key, bottomTexture, sideTexture, topTexture);
+        }
+
+        private static final @NotNull ModelContentCreation DEFAULT_CREATION = creation(Texture.defaultBottomCreation(), Texture.defaultCreation(), Texture.defaultTopCreation());
+
+        public static @NotNull ModelContentCreation defaultCreation() {
+            return DEFAULT_CREATION;
+        }
+
+        public static @NotNull ModelContentCreation defaultCreationWithAlternativeBottomTop(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
+            return defaultCreationWithAlternativeBottomTop((intention, key) -> bottomTexture, (intention, key) -> topTexture);
+        }
+
+        public static @NotNull ModelContentCreation defaultCreationWithAlternativeBottomTop(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
+            return (intention, key) -> create(intention, key, bottomTexture, Texture.defaultCreation(), topTexture);
+        }
+
+    }
+
     /**
      * A reference to some model that is outside the scope of our own resource pack (for example a model already existing, for use as a parent)
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
index 15aa7377405f77711945e78b3b40f8c9f227d8c1..19d232fd4422f78e742497a5232167a20ab6dc67 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
@@ -26,7 +26,7 @@ public class Texture extends ResourcePackIntentionedAssetDataByContent<TextureCo
 
     public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
         @NotNull MutableResourcePackTexture resourcePackTexture = resourcePack.getOrCreateTexture(this.intention, this.key);
-        if (!resourcePackTexture.hasData() && !overwriteExisting) {
+        if (resourcePackTexture.hasData() && !overwriteExisting) {
             return;
         }
         this.content.writeToResourcePackTexture(resourcePackTexture);
@@ -51,11 +51,19 @@ public class Texture extends ResourcePackIntentionedAssetDataByContent<TextureCo
     }
 
     private static final @NotNull TextureCreation DEFAULT_CREATION = creation(TextureContent.ByFileToImportPath.defaultCreation());
+    private static final @NotNull TextureCreation DEFAULT_END_CREATION = creation(TextureContent.ByFileToImportPath.defaultEndCreation());
+    private static final @NotNull TextureCreation DEFAULT_BOTTOM_CREATION = creation(TextureContent.ByFileToImportPath.defaultBottomCreation());
     private static final @NotNull TextureCreation DEFAULT_TOP_CREATION = creation(TextureContent.ByFileToImportPath.defaultTopCreation());
 
     public static @NotNull TextureCreation defaultCreation() {
         return DEFAULT_CREATION;
     }
+    public static @NotNull TextureCreation defaultEndCreation() {
+        return DEFAULT_END_CREATION;
+    }
+    public static @NotNull TextureCreation defaultBottomCreation() {
+        return DEFAULT_BOTTOM_CREATION;
+    }
     public static @NotNull TextureCreation defaultTopCreation() {
         return DEFAULT_TOP_CREATION;
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
index 646a60f7fd3754ec366571ac0a34ae3b5d1db6fe..434432b6211a3513efad52eda69ff6f1eefe2420 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
@@ -77,13 +77,25 @@ public abstract class TextureContent implements ResourcePackAssetDataContent {
 
         private static final @NotNull TextureFilenameCreation DEFAULT_FILENAME = (intention, key) -> NamespacedKeyWithoutIntention.forMinecraft(key).withIntention(intention).keyWithIntention() + ResourcePackAssetType.TEXTURE.getDefaultFileExtension();
         private static final @NotNull TextureFilenameCreation DEFAULT_TOP_FILENAME = (intention, key) -> NamespacedKeyWithoutIntention.forMinecraft(key).withIntention(intention).keyWithIntention() + "_top" + ResourcePackAssetType.TEXTURE.getDefaultFileExtension();
+        private static final @NotNull TextureFilenameCreation DEFAULT_END_FILENAME = DEFAULT_TOP_FILENAME;
+        private static final @NotNull TextureFilenameCreation DEFAULT_BOTTOM_FILENAME = (intention, key) -> NamespacedKeyWithoutIntention.forMinecraft(key).withIntention(intention).keyWithIntention() + "_bottom" + ResourcePackAssetType.TEXTURE.getDefaultFileExtension();
         private static final @NotNull TextureContentCreation DEFAULT_CREATION = creationInDefaultFolder(DEFAULT_FILENAME);
+        private static final @NotNull TextureContentCreation DEFAULT_END_CREATION = creationInDefaultFolder(DEFAULT_END_FILENAME);
+        private static final @NotNull TextureContentCreation DEFAULT_BOTTOM_CREATION = creationInDefaultFolder(DEFAULT_BOTTOM_FILENAME);
         private static final @NotNull TextureContentCreation DEFAULT_TOP_CREATION = creationInDefaultFolder(DEFAULT_TOP_FILENAME);
 
         public static @NotNull TextureContentCreation defaultCreation() {
             return DEFAULT_CREATION;
         }
 
+        public static @NotNull TextureContentCreation defaultEndCreation() {
+            return DEFAULT_END_CREATION;
+        }
+
+        public static @NotNull TextureContentCreation defaultBottomCreation() {
+            return DEFAULT_BOTTOM_CREATION;
+        }
+
         public static @NotNull TextureContentCreation defaultTopCreation() {
             return DEFAULT_TOP_CREATION;
         }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
index 001622880593af9b1edaf895d47405cbed005976..779c53bb0b00dd088c2982cfdadb29dd9eaeb5a4 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
@@ -66,6 +66,16 @@ public final class KeyConstants {
      */
     public static final @NotNull String modelTexturesSide = "side";
 
+    /**
+     * The inner key of textures of a model representing setting the texture on a column's bottom
+     */
+    public static final @NotNull String modelTexturesBottom = "bottom";
+
+    /**
+     * The inner key of textures of a model representing setting the texture on a column's top
+     */
+    public static final @NotNull String modelTexturesTop = "top";
+
     /**
      * The overrides of a model
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
index 54e79eda1d9bba343959b224e35fd3caa0f1492f..677d97e5ccbaa0ee0e8a4df0072fcc07d8cc0275 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
@@ -22,6 +22,11 @@ public final class PathConstants {
 
     }
 
+    /**
+     * The suffix for meta files for files
+     */
+    public static final String metaFileSuffix = ".mcmeta";
+
     /**
      * The assets folder
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java
index eb8f64afe4c505bc3703ac9ccea9bf011646c868..98cf55b68e5ded6089041d96e893d9b3ab6061f2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java
@@ -27,6 +27,14 @@ public interface ResourcePackAsset {
 
     void writeTo(@NotNull OutputStream outputStream) throws IOException;
 
+    default boolean hasMeta() {
+        return false;
+    }
+
+    default void writeMetaTo(@NotNull OutputStream outputStream) throws IOException, UnsupportedOperationException, IllegalStateException {
+        throw new UnsupportedOperationException("This asset (of type " + getClass().getName() + " does not support writeMetaTo");
+    }
+
     /**
      * Gets the result of merging this asset with the given one
      * <br>
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java
index 94193c7a57b64669dd06ef8e3fbccbfe9b63d10b..7b6d1b9c9ca978c93c792372fc0cc0b1491f1b28 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java
@@ -2,6 +2,7 @@
 
 package nl.martijnmuijsers.paper.resourcepack.asset.image;
 
+import nl.martijnmuijsers.paper.resourcepack.PathConstants;
 import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.asset.SimpleResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
@@ -9,6 +10,7 @@ import org.apache.commons.lang3.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -41,6 +43,22 @@ public abstract class SimpleImageFileResourcePackAsset extends SimpleResourcePac
         }
     }
 
+    @Override
+    public boolean hasMeta() {
+        return new File(this.imageFilePath + PathConstants.metaFileSuffix).exists();
+    }
+
+    @Override
+    public void writeMetaTo(@NotNull OutputStream outputStream) throws IOException, UnsupportedOperationException, IllegalStateException {
+        File metaFile = new File(this.imageFilePath + PathConstants.metaFileSuffix);
+        if (!metaFile.exists()) {
+            throw new IllegalStateException("Called SimpleImageFileResourcePackAsset.writeMetaTo for an asset that has no meta");
+        }
+        try (@NotNull FileInputStream fileInputStream = new FileInputStream(metaFile)) {
+            outputStream.write(fileInputStream.readAllBytes());
+        }
+    }
+
     public @NotNull MutableImageResourcePackAsset merge(@NotNull ResourcePackAsset other) {
         Validate.isInstanceOf(MutableImageResourcePackAsset.class, other);
         if (this.hasData()) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
index 043fa38f95353b86a7841ff151d596334463435f..104d1c26f188d83d6eb590c6b4713a5457ffa19c 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
@@ -59,6 +59,17 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
         this.setDirty();
     }
 
+    @Override
+    public void setBottomTopTextures(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+        @NotNull JsonObject texturesJson = new JsonObject();
+        texturesJson.addProperty(KeyConstants.modelTexturesBottom, bottomTexture.getKeyWithIntention().toString());
+        texturesJson.addProperty(KeyConstants.modelTexturesSide, sideTexture.getKeyWithIntention().toString());
+        texturesJson.addProperty(KeyConstants.modelTexturesTop, topTexture.getKeyWithIntention().toString());
+        this.json.add(KeyConstants.modelTextures, texturesJson);
+        this.setDirty();
+    }
+
+
     @Override
     public void addModelOverride(int customModelData, @NotNull Model overridingModel) {
         @NotNull JsonArray overridesJson;
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
index 796ca6d0fa09eb32cda2cc4080c3465bbd5f1bdd..91d6b17c7ba142b5d3519b63bd41138d1ec5291c 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
@@ -23,6 +23,8 @@ public interface MutableResourcePackModel extends MutableJsonResourcePackAsset,
 
     void setColumnTextures(@NotNull Texture endTexture, @NotNull Texture sideTexture);
 
+    void setBottomTopTextures(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture);
+
     /**
      * @param pack Because this instance is not aware of the resource pack it is in, this pack must be provided to automatically add the given overriding model to the resource pack
      * @param overwriteExistingOverridingModel Whether to overwrite an existing model in the resource pack (this has to do with the overriding model, not with this model instance: this instance's overrides property is always modified by this method)
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
index 01093db12b3df09cace350238c8f4d09b702c0a8..b27a82e34369fe878b47b870d3ba1d8211a946c4 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
@@ -6,6 +6,7 @@ import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableList;
 import com.google.gson.JsonObject;
 import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.server.MinecraftServer;
 import nl.martijnmuijsers.paper.resourcepack.PathConstants;
 import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.ConcreteResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.asset.image.MutableImageResourcePackAsset;
@@ -190,6 +191,13 @@ public class MemoryResourcePack implements MutableResourcePack {
                     @NotNull ZipEntry zipEntry = new ZipEntry(path);
                     zipOutputStream.putNextEntry(zipEntry);
                     assetInMemory.writeTo(zipOutputStream);
+                    if (assetInMemory.hasMeta()) {
+                        @NotNull String metaPath = path + PathConstants.metaFileSuffix;
+                        zippedFilePaths.add(metaPath);
+                        @NotNull ZipEntry metaZipEntry = new ZipEntry(metaPath);
+                        zipOutputStream.putNextEntry(metaZipEntry);
+                        assetInMemory.writeMetaTo(zipOutputStream);
+                    }
                 }
                 // Add all files from included resource packs that we haven't added yet
                 for (@NotNull ResourcePack includedResourcePack : this.includedResourcePacks) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
index 3ea678d446c2c9d445c3564fa8a0ea3577ce9d9a..45e527e19839fa167f76b6e59f853cb5b39f939b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
@@ -110,6 +110,12 @@ public class ReadFromArchiveResourcePack implements ResourcePack, Closeable {
     @Override
     public @NotNull ResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         @Nullable ResourcePackAsset foundAsset = this.assets.computeIfAbsent(Pair.of(type, key), namespacedKey -> {
+            String path = type.getPathInResourcePack(key);
+            try {
+                this.getZipFileEntry(path);
+            } catch (IOException e) {
+                throw new IllegalArgumentException("Attempted to load required asset at internal path '" + path + "' from resource pack with path '" + this.path + "' but it did not exist", e);
+            }
             if (type.equals(ResourcePackAssetType.BLOCK_STATES)) {
                 return new ConcreteResourcePackBlockStates(readJsonAsset(type.getPathInResourcePack(key)), key);
             } else if (type.equals(ResourcePackAssetType.MODEL)) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 14f89df7b9709c5c10771bfe8e20ebe2dc97d32f..8436e2bb3feea061873be6caa71ef5b10fe0efc4 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,21 +36,20 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 16;
+    private static final int currentResourcePackVersion = 24;
 
-    public static final int RESOURCE_PACK_FORMAT = 9;
-
-    public static final String INPUT_TEXTURES_FOLDER_PATH = "resourcepack/input/textures";
-
-    private static final String VANILLA_RESOURCE_PACK_ARCHIVE_PATH = "resourcepack/input/inheritedpacks/vanilla_client_1.19_only_assets_minecraft.zip";
+    private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
+    private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
+    private static final String LAST_RESOURCE_PACK_VERSION_FILE_PATH = OUTPUT_FOLDER_PATH + "/last_resource_pack_version.txt";
+    private static final String INPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/input";
+    public static final String INPUT_TEXTURES_FOLDER_PATH = INPUT_FOLDER_PATH + "/textures";
+    public static final String INHERITED_RESOURCE_PACKS_FOLDER_PATH = INPUT_FOLDER_PATH + "/inheritedpacks";
+    private static final String VANILLA_RESOURCE_PACK_ARCHIVE_PATH = INHERITED_RESOURCE_PACKS_FOLDER_PATH + "/vanilla_client_1.19_only_assets_minecraft.zip";
 
+    public static final int RESOURCE_PACK_FORMAT = 9;
     private static final String NAME = "SuCraft";
     private static final JsonElement DESCRIPTION = JsonParser.parseString("[{\"text\":\"\\u2764 Made with love\",\"color\":\"gray\"},{\"text\":\"\\n\"},{\"text\":\"~SuCraft\",\"color\":\"gold\"}]");
 
-    private static final String OUTPUT_FOLDER_PATH = "resourcepack/output";
-
-    private static final String LAST_RESOURCE_PACK_VERSION_FILE_PATH = OUTPUT_FOLDER_PATH + "/last_resource_pack_version.txt";
-
     /**
      * Only null while not initialized
      */
@@ -115,6 +114,10 @@ public final class CreateSuCraftResourcePack {
                 // Add the vanilla JAR as default resource pack
                 resourcePack.addDefaultResourcePack(new ReadFromArchiveResourcePack(VANILLA_RESOURCE_PACK_ARCHIVE_PATH));
 
+                // Add included resource packs
+                resourcePack.addIncludedResourcePack(new ReadFromArchiveResourcePack(INHERITED_RESOURCE_PACKS_FOLDER_PATH + "/SuCraft resource pack logo.zip"));
+                resourcePack.addIncludedResourcePack(new ReadFromArchiveResourcePack(INHERITED_RESOURCE_PACKS_FOLDER_PATH + "/Technoblade Pigs.zip"));
+
                 // Set the settings
                 @NotNull MemoryResourcePackSettings settings = resourcePack.getSettings();
                 settings.setName(NAME);
