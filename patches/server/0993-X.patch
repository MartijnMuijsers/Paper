From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 19 Jul 2022 17:46:11 +0200
Subject: [PATCH] X


diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 5412f49f09d63c364db50046da95a2b03e844c21..8ad65fcb2a9506af1899dad58a2a0b4cc5c58b0b 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -60,6 +60,7 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.world.item.Item;
@@ -69,6 +70,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import nl.martijnmuijsers.paper.item.ItemReplacementRule;
+import nl.martijnmuijsers.paper.item.SuCraftItems;
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
 import org.jetbrains.annotations.NotNull;
 
@@ -601,10 +603,16 @@ public class FriendlyByteBuf extends ByteBuf {
             this.writeBoolean(true);
             Item item = stack.getItem();
 
+            Item originalItem = stack.getItem();
+            if (originalItem.equals(SuCraftItems.WITHER_BONE_SLAB)) {
+                MinecraftServer.LOGGER.info("TEMP DEBUG - writing stack " + stack.getCount() + " " + stack.getItem() + " " + stack.getOrCreateTag().getAsString());
+                MinecraftServer.LOGGER.info("TEMP DEBUG - context is " + doesNetworkTargetHaveResourcePack + " , " + doesNetworkTargetHaveHighPing);
+            }
+
             // Martijn start - custom blocks and items
             boolean tryRename = true;
-            if (item.replacementRule != null && doesNetworkTargetHaveResourcePack != null) {
-                @Nullable ItemStack replacedStack = item.replacementRule.replace(stack, doesNetworkTargetHaveResourcePack, doesNetworkTargetHaveHighPing != null ? doesNetworkTargetHaveHighPing : false);
+            if (item.replacementRule != null) {
+                @Nullable ItemStack replacedStack = item.replacementRule.replace(stack, doesNetworkTargetHaveResourcePack != null ? doesNetworkTargetHaveResourcePack : false, doesNetworkTargetHaveHighPing != null ? doesNetworkTargetHaveHighPing : false);
                 if (replacedStack != null) {
                     tryRename = false;
                     stack = replacedStack;
@@ -632,6 +640,10 @@ public class FriendlyByteBuf extends ByteBuf {
                 nbttagcompound = stack.getTag();
             }
 
+            if (originalItem.equals(SuCraftItems.WITHER_BONE_SLAB)) {
+                MinecraftServer.LOGGER.info("TEMP DEBUG - resulting is " + stack.getCount() + " " + stack.getItem() + " " + stack.getOrCreateTag().getAsString());
+            }
+
             this.writeNbt(nbttagcompound);
         }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b75a9bd5c2ed262867fee95bb83aec5d5d35f28d..1a0721e864bb7e0c92df4e9e63c8161a007df365 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -156,6 +156,7 @@ import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import nl.martijnmuijsers.paper.block.SuCraftBlocks;
+import nl.martijnmuijsers.paper.item.SuCraftCraftingRecipeProvider;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.Material;
 import org.slf4j.Logger;
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index de0513b38e5fa0138f1cee6bb633561be12449fc..cc4f0e64ca476435aed1e8b5dcf5300014fabdcb 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -63,7 +63,7 @@ public class PlayerAdvancements {
     private final File file;
     public final Map<Advancement, AdvancementProgress> advancements = Maps.newLinkedHashMap();
     private final Set<Advancement> visible = Sets.newLinkedHashSet();
-    private final Set<Advancement> visibilityChanged = Sets.newLinkedHashSet();
+    public final Set<Advancement> visibilityChanged = Sets.newLinkedHashSet(); // Martijn - custom blocks and items // We use this to mark advancements as dirty to resend them when the resource pack status changes
     private final Set<Advancement> progressChanged = Sets.newLinkedHashSet();
     private ServerPlayer player;
     @Nullable
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 5d6ceeecfbb55a1bfe77a1f1ac39b02993e714e3..fd6e6c4c92b7f00cc1155e616d4232604d45c8fe 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -55,6 +55,7 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import nl.martijnmuijsers.paper.item.SuCraftCraftingRecipeProvider;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -275,6 +276,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
 
+        SuCraftCraftingRecipeProvider.run(); // Martijn - custom blocks and items
+
         // CraftBukkit start
         // this.setPlayerList(new DedicatedPlayerList(this, this.registryHolder, this.playerDataStorage)); // Spigot - moved up
         server.loadPlugins();
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index a901d4c272b0b48b4e354270b20f286e220a98ed..dbcd50d9ed19f54a94bd2d76fd69e88be0fdacc2 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -88,6 +88,7 @@ import net.minecraft.network.protocol.game.ClientboundSetHealthPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.ClientboundSystemChatPacket;
 import net.minecraft.network.protocol.game.ClientboundUpdateMobEffectPacket;
+import net.minecraft.network.protocol.game.ClientboundUpdateRecipesPacket;
 import net.minecraft.network.protocol.game.ServerboundClientInformationPacket;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.resources.ResourceKey;
@@ -131,6 +132,7 @@ import net.minecraft.world.inventory.ContainerSynchronizer;
 import net.minecraft.world.inventory.HorseInventoryMenu;
 import net.minecraft.world.inventory.ResultSlot;
 import net.minecraft.world.inventory.Slot;
+import net.minecraft.world.inventory.StonecutterMenu;
 import net.minecraft.world.item.ComplexItem;
 import net.minecraft.world.item.ItemCooldowns;
 import net.minecraft.world.item.ItemStack;
@@ -2948,6 +2950,30 @@ public class ServerPlayer extends Player {
         this.getBukkitEntity().updateInventory();
     }
 
+    public void resendCraftingRecipes() {
+        this.resendCraftingRecipes(null, true);
+    }
+
+    public void resendCraftingRecipes(@Nullable ItemStack stonecutterInput, boolean first) {
+        if (stonecutterInput == null) {
+            if (this.containerMenu instanceof StonecutterMenu stonecutterMenu)  {
+                stonecutterInput = stonecutterMenu.container.getItem(StonecutterMenu.INPUT_SLOT);
+            }
+        }
+        final @Nullable ItemStack finalStonecutterInput = stonecutterInput;
+        this.connection.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldSendToPlayerRightNow(this, finalStonecutterInput)).toList()));
+        this.getRecipeBook().sendInitialRecipeBook(this);
+        if (first) {
+            this.resendInventory();
+            Bukkit.getScheduler().runTaskLater(Bukkit.getPluginManager().getPlugins()[0], () -> this.resendCraftingRecipes(null, false), 1);
+        }
+    }
+
+    public void resendAdvancements() {
+        this.advancements.visibilityChanged.addAll(this.advancements.advancements.keySet());
+        this.advancements.flushDirty(this);
+    }
+
     public void resendAllSentChunks() {
         if (!this.isAlive()) {
             // Chunks cannot be untracked or tracked while dead
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 42e24bd61a63343da80f54ab6519fc3b91969b15..37ef39b0772790943fce409434ec5a7f784bf419 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -143,6 +143,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PlayerRideableJumping;
+import net.minecraft.world.inventory.StonecutterMenu;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.BucketItem;
 import net.minecraft.world.item.Item;
@@ -2004,9 +2005,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             // Resend most of the potentially already sent data if we previously thought the player had accepted the resource pack, but now they no longer do
             this.player.resendInventory();
             this.player.resendAllSentChunks();
+            this.player.resendCraftingRecipes();
+            this.player.resendAdvancements();
         } else if (oldPackStatus == null && (packStatus == PlayerResourcePackStatusEvent.Status.ACCEPTED || packStatus == PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED)) {
             // Resend their inventory (we have not sent any chunks yet if this is true, so we do not need to resend any)
             this.player.resendInventory();
+            this.player.resendCraftingRecipes();
+            this.player.resendAdvancements();
         }
         // Martijn end - custom blocks and items
 
@@ -3083,6 +3088,18 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                             return;
                         }
 
+                        // Martijn start - custom blocks and items
+
+                        if (this.player.containerMenu instanceof StonecutterMenu stonecutterMenu) {
+                            ItemStack intoInputStack = ItemReplacementRule.reverseReplacement(packet.getChangedSlots().get(StonecutterMenu.INPUT_SLOT));
+                            if (intoInputStack != null) {
+                                MinecraftServer.LOGGER.info("TEMP DEBUG - resending");
+                                this.player.resendCraftingRecipes(intoInputStack, true);
+                            }
+                        }
+
+                        // Martijn end - custom blocks and items
+
                         switch (event.getResult()) {
                             case ALLOW:
                             case DEFAULT:
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index be387aaca1e88bf4506ea1fea6cda9dd1b00bddd..874fb7c1793271dd4ff7f1083db4c5f7f5e7bd12 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -278,11 +278,11 @@ public abstract class PlayerList {
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
-        playerconnection.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes()));
+//        playerconnection.send(new ClientboundUpdateRecipesPacket(this.server.getRecipeManager().getRecipes())); // Martijn - custom blocks and items
         playerconnection.send(new ClientboundUpdateTagsPacket(TagNetworkSerialization.serializeTagsToNetwork(this.registryHolder)));
         this.sendPlayerPermissionLevel(player);
         player.getStats().markAllDirty();
-        player.getRecipeBook().sendInitialRecipeBook(player);
+//        player.getRecipeBook().sendInitialRecipeBook(player); // Martijn - custom blocks and items
         this.updateEntireScoreboard(worldserver1.getScoreboard(), player);
         this.server.invalidateStatus();
         // Paper start - async load spawn in chunk
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index b7ebaf8c17b5075989ae04224f837c7932ec6cdd..5637ab33538d61aef40c68f92ff6e6a818989ecd 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -143,4 +143,5 @@ public class ServerRecipeBook extends RecipeBook {
     public void sendInitialRecipeBook(ServerPlayer player) {
         player.connection.send(new ClientboundRecipePacket(ClientboundRecipePacket.State.INIT, this.known, this.highlight, this.getBookSettings()));
     }
+
 }
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index d4f71422b25f70abfe50481d6071abea6ad147c0..004cd5529f6e523bcacb0c04e120f41c879a07b0 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -2,6 +2,8 @@ package net.minecraft.world.inventory;
 
 import com.google.common.collect.Lists;
 import java.util.List;
+
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.world.Container;
@@ -15,7 +17,9 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 
 // CraftBukkit start
+import org.bukkit.Bukkit;
 import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.inventory.CraftInventoryStonecutter;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 import org.bukkit.entity.Player;
@@ -73,6 +77,12 @@ public class StonecutterMenu extends AbstractContainerMenu {
                 super.setChanged();
                 StonecutterMenu.this.slotsChanged(this);
                 StonecutterMenu.this.slotUpdateListener.run();
+                // Martijn start - custom blocks and items
+                ((CraftPlayer) StonecutterMenu.this.player).getHandle().resendCraftingRecipes();
+//                Bukkit.getScheduler().runTaskLater(Bukkit.getPluginManager().getPlugins()[0], () ->
+//                    ((CraftPlayer) StonecutterMenu.this.player).getHandle().resendCraftingRecipes(), 1
+//                );
+                // Martijn end - custom blocks and items
             }
 
             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index dfcad2e98c3fbc1e7ec6e0b627781f9da0f42d6a..7958d8a494a9e2021625561d026303883dd4a0f4 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -4,13 +4,18 @@ import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.mojang.logging.LogUtils;
+
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.UUID;
+import java.util.function.Supplier;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 import io.papermc.paper.adventure.PaperAdventure;
+import it.unimi.dsi.fastutil.Pair;
 import net.kyori.adventure.text.format.TextDecoration;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
 import net.minecraft.SharedConstants;
@@ -42,6 +47,8 @@ import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.inventory.tooltip.TooltipComponent;
 import net.minecraft.world.item.context.UseOnContext;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.StonecutterRecipe;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
@@ -50,6 +57,8 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import nl.martijnmuijsers.paper.item.ItemReplacementRule;
+import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
@@ -88,6 +97,13 @@ public class Item implements ItemLike {
      */
     public @Nullable ResourceLocation customKey;
 
+    /**
+     * This is the {@link ResourceLocation} for this item
+     * <br>
+     * Will always be non-null after it has been registered
+     */
+    public @Nullable ResourceLocation id;
+
     /**
      * Must be non-null for SuCraft items
      */
@@ -128,6 +144,23 @@ public class Item implements ItemLike {
      */
     public @Nullable String customDisplayNameInLoreJSON = null;
 
+    public record CustomStonecutterRecipe(@NotNull ResourceLocation key, @Nullable String group, @NotNull Item ingredient, int resultAmount) {
+
+        public @NotNull StonecutterRecipe build(@NotNull Item result) {
+            var recipeIngredient = new Ingredient(Stream.of(new Ingredient.ItemValue(new ItemStack(ingredient))));
+            recipeIngredient.exact = true;
+            return new StonecutterRecipe(key, group == null ? key.getPath() : group, recipeIngredient, new ItemStack(result, resultAmount), true);
+        }
+
+    }
+
+    public @NotNull List<@NotNull CustomStonecutterRecipe> customStonecutterRecipes = new ArrayList<>(0);
+
+    public @NotNull Item withCustomStonecutterRecipe(@NotNull CustomStonecutterRecipe recipe) {
+        this.customStonecutterRecipes.add(recipe);
+        return this;
+    }
+
     // Martijn end - custom blocks and items
 
     public static int getId(Item item) {
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index d547c91f3143cd57fdc32a478208ece2c6e2dc60..dbfff96193d2e107e5045563386f154edd505edd 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -1218,7 +1218,7 @@ public class Items {
         if (item instanceof BlockItem) {
             ((BlockItem)item).registerBlocks(Item.BY_BLOCK, item);
         }
-
+        item.id = id; // Martijn - custom blocks and items
         return Registry.register(Registry.ITEM, id, item);
     }
 
diff --git a/src/main/java/net/minecraft/world/item/crafting/Recipe.java b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
index 6d50c7ae912a36c8d3caaf26e2fc2dc20731b279..458fb8099a859a23cc1cdd0e6b6d27738f9d1c2c 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Recipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
@@ -2,11 +2,14 @@ package net.minecraft.world.item.crafting;
 
 import net.minecraft.core.NonNullList;
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 public interface Recipe<C extends Container> {
 
@@ -18,6 +21,14 @@ public interface Recipe<C extends Container> {
 
     ItemStack getResultItem();
 
+    // Martijn start - custom blocks and items
+
+    default boolean shouldSendToPlayerRightNow(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
+        return true;
+    }
+
+    // Martijn end - custom blocks and items
+
     default NonNullList<ItemStack> getRemainingItems(C inventory) {
         NonNullList<ItemStack> nonnulllist = NonNullList.withSize(inventory.getContainerSize(), ItemStack.EMPTY);
 
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 4872f70977e73c889fe6e2339d00ebc64459613d..03f22da4d15020180ec39f66d85ad47eb427fdd3 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -32,6 +32,7 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+import nl.martijnmuijsers.paper.item.SuCraftCraftingRecipeProvider;
 import org.slf4j.Logger;
 
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap; // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java b/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
index 6d5803fcdd0a0b2d106745e9e6b859693b2aade2..9774e686bc66758e3b6e033bafd3b9cbdb1eeaef 100644
--- a/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
@@ -1,7 +1,10 @@
 package net.minecraft.world.item.crafting;
 
 import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Container;
+import net.minecraft.world.inventory.StonecutterMenu;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
@@ -12,12 +15,23 @@ import org.bukkit.craftbukkit.inventory.CraftRecipe;
 import org.bukkit.craftbukkit.inventory.CraftStonecuttingRecipe;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.Recipe;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 // CraftBukkit end
 
 public class StonecutterRecipe extends SingleItemRecipe {
 
+    private final boolean isCustom; // Martijn - custom blocks and items
+
     public StonecutterRecipe(ResourceLocation id, String group, Ingredient input, ItemStack output) {
+        // Martijn start - custom blocks and items
+        this(id, group, input, output, false);
+    }
+
+    public StonecutterRecipe(ResourceLocation id, String group, Ingredient input, ItemStack output, boolean isCustom) {
         super(RecipeType.STONECUTTING, RecipeSerializer.STONECUTTER, id, group, input, output);
+        this.isCustom = isCustom;
+        // Martijn end - custom blocks and items
     }
 
     @Override
@@ -41,4 +55,25 @@ public class StonecutterRecipe extends SingleItemRecipe {
         return recipe;
     }
     // CraftBukkit end
+
+    // Martijn start - custom blocks and items
+
+    @Override
+    public boolean shouldSendToPlayerRightNow(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
+        if (!isCustom) {
+            return super.shouldSendToPlayerRightNow(player, stonecutterInput);
+        }
+        if (stonecutterInput == null) {
+            return false;
+        }
+        MinecraftServer.LOGGER.info("TEMP DEBUG - should I send? " + this.getId());
+//        MinecraftServer.LOGGER.info("TEMP DEBUG - player " + player.getName() + " has stonecutter: " + (player.containerMenu instanceof StonecutterMenu));
+        MinecraftServer.LOGGER.info("TEMP DEBUG - first item is: " + stonecutterInput);
+        MinecraftServer.LOGGER.info("TEMP DEBUG - matches: " + this.ingredient.test(stonecutterInput));
+        MinecraftServer.LOGGER.info("TEMP DEBUG - based on test: " + this.ingredient.getItems()[0]);
+        return player.containerMenu instanceof StonecutterMenu stonecutterMenu && this.ingredient.test(stonecutterInput);
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 3ac78947299f8c88ea8aeaf0afd07f16e355fcfc..2d889e85f1da7843d8e0ebf43c201644218804d9 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -12,6 +12,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.function.Function;
 import java.util.function.Supplier;
+import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
@@ -45,6 +46,8 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.TooltipFlag;
 import net.minecraft.world.item.context.BlockPlaceContext;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.StonecutterRecipe;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.level.BlockGetter;
@@ -165,6 +168,13 @@ public class Block extends BlockBehaviour implements ItemLike {
      */
     public @Nullable ResourceLocation customKey;
 
+    /**
+     * This is the {@link ResourceLocation} for this item
+     * <br>
+     * Will always be non-null after it has been registered
+     */
+    public @Nullable ResourceLocation id;
+
     public @Nullable Item customItemForBlock = null;
 
     /**
@@ -262,6 +272,23 @@ public class Block extends BlockBehaviour implements ItemLike {
         return this;
     }
 
+    // Crafting recipes
+
+    public record CustomStonecutterRecipe(@NotNull ResourceLocation key, @Nullable String group, @NotNull Block ingredient, int resultAmount) {}
+
+    public @NotNull List<@NotNull CustomStonecutterRecipe> customStonecutterRecipes = new ArrayList<>(0);
+
+    public @NotNull Block withCustomStonecutterRecipe(@NotNull CustomStonecutterRecipe recipe) {
+        this.customStonecutterRecipes.add(recipe);
+        return this;
+    }
+
+    public @NotNull Block withCustomSlabStonecutterRecipe(@NotNull Block ingredient, @Nullable String group) {
+        @NotNull String uniqueRecipeDescription = id.getPath() + "_from_" +  ingredient.id.getPath() + "_stonecutting";
+        System.out.println("Custom slab stonecutter recipe: " + uniqueRecipeDescription + " = " + ingredient.id + " -> " + this.id);
+        return this.withCustomStonecutterRecipe(new CustomStonecutterRecipe(ResourceLocation.sucraft(uniqueRecipeDescription), group, ingredient, 2));
+    }
+
     // Martijn end - custom blocks and items
 
     public static int getId(@Nullable BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index fab6eb7cd42906303980bff81be7b4db86499d0a..1a95ca57cf674e1e07d4ccafcdc695543d0500c8 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -7,6 +7,7 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.cauldron.CauldronInteraction;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.data.worldgen.features.TreeFeatures;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.valueproviders.UniformInt;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.EntityType;
@@ -1175,6 +1176,7 @@ public class Blocks {
     }
 
     private static Block register(String id, Block block) {
+        block.id = new ResourceLocation(id); // Martijn - custom blocks and items
         return Registry.register(Registry.BLOCK, id, block);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
index 0a95842c53a9d0286c57bcb42db97e468e30fb7d..52e1e78adc7c3fe69edb9eec0242a4e3819e074b 100644
--- a/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StonecutterBlock.java
@@ -25,7 +25,7 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 
 public class StonecutterBlock extends Block {
-    private static final Component CONTAINER_TITLE = Component.translatable("container.stonecutter");
+    private static final Component CONTAINER_TITLE = Component.literal("Blockcutter")/*Component.translatable("container.stonecutter")*/; // Martijn - custom blocks and items
     public static final DirectionProperty FACING = HorizontalDirectionalBlock.FACING;
     protected static final VoxelShape SHAPE = Block.box(0.0D, 0.0D, 0.0D, 16.0D, 9.0D, 16.0D);
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index be6ee20317574880d5b6511c40b45390712c6256..70e34bd711bde82f282b99c2004943ac286534f9 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -449,7 +449,18 @@ public class SuCraftBlocks {
         SuCraftBlockLoot::dropSelf
     );
 
-    public static final Block QUARTZ_SPIRAL_MEANDER_SLAB = registerFakeSlab(QUARTZ_SPIRAL_MEANDER, "quartz_spiral_meander", "chiseled_quartz_block_top", Blocks.QUARTZ_SLAB).mineableWithPickaxe();
+    public static final Block QUARTZ_SPIRAL_MEANDER_SLAB = registerFakeSlab(QUARTZ_SPIRAL_MEANDER, null, "quartz_spiral_meander", NamespacedKeyWithoutIntention.sucraft("quartz_spiral_meander"), NamespacedKeyWithoutIntention.minecraft("chiseled_quartz_block_top"), null, null, null, null, Blocks.QUARTZ_SLAB, null).mineableWithPickaxe();
+
+//    public static final Block ENDER_PEARL_BLOCK = register(
+//        "ender_pearl_block",
+//        new SingleMultiStateRealBlockReplacementRuleBuilder()
+//            .withNoteBlockHost()
+//            .withFallback(Blocks.WARPED_PLANKS)
+//            .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+//            .withFullBlockBoundingBoxItem(),
+//        new Block(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_CYAN).strength(1.5F)).mineableWithPickaxe(),
+//        SuCraftBlockLoot::dropSelf
+//    );
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
@@ -457,6 +468,7 @@ public class SuCraftBlocks {
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Function<@NotNull Block, @Nullable LootTable> lootTableFunction) {
         ResourceLocation key = ResourceLocation.sucraft(id);
+        block.id = key;
         @NotNull Block registeredBlock = Registry.register(Registry.BLOCK, key, block);
         registeredBlock.isVanilla = false;
         registeredBlock.customKey = key;
@@ -678,7 +690,7 @@ public class SuCraftBlocks {
                 .withRealItemRuleFromHostBlock(),
             new SlabBlock(properties == null ? fullBlock.properties : properties).withAddedTagsLike(fullBlock).slab(),
             SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
-        );
+        ).withCustomSlabStonecutterRecipe(fullBlock, null);
     }
 
     private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull NamespacedKeyWithoutIntention doubleSlabKey, @Nullable NamespacedKeyWithoutIntention sideTextureKey, @Nullable NamespacedKeyWithoutIntention bottomHalfBottomTextureKey, @Nullable NamespacedKeyWithoutIntention bottomHalfTopTextureKey, @Nullable NamespacedKeyWithoutIntention topHalfBottomTextureKey, @Nullable NamespacedKeyWithoutIntention topHalfTopTextureKey, @NotNull Block host, @Nullable Block fallback) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ec3dee8538c7ade8017fde61e361a7795472122
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java
@@ -0,0 +1,56 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.item;
+
+import com.google.common.collect.ImmutableMap;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.item.crafting.Recipe;
+import net.minecraft.world.item.crafting.RecipeManager;
+import net.minecraft.world.item.crafting.RecipeType;
+import net.minecraft.world.item.crafting.StonecutterRecipe;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+import java.util.Map;
+
+public final class SuCraftCraftingRecipeProvider {
+
+    private SuCraftCraftingRecipeProvider() {}
+
+    public static void run() {
+//    public static void run(Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> map1, ImmutableMap.Builder<ResourceLocation, Recipe<?>> builder) {
+//
+//        // Define a helper function to add new recipes
+//        class AddRecipeHelperFunction {
+//
+//            void addRecipe(Recipe<?> irecipe) {
+//                this.addRecipe(irecipe.getId(), irecipe);
+//            }
+//
+//            void addRecipe(ResourceLocation minecraftkey, Recipe<?> irecipe) {
+//                (map1.computeIfAbsent(irecipe.getType(), (recipes) -> {
+//                    return new Object2ObjectLinkedOpenHashMap<>();
+//                    // CraftBukkit end
+//                })).put(minecraftkey, irecipe);
+//                builder.put(minecraftkey, irecipe);
+//            }
+//
+//        }
+//        var helper = new AddRecipeHelperFunction();
+
+        for (Item item : Registry.ITEM) {
+            // Add the stonecutter recipes
+            for (var stonecutterRecipe : item.customStonecutterRecipes) {
+                MinecraftServer.LOGGER.info("Adding recipe " + stonecutterRecipe.build(item).getIngredients().stream().map(y -> Arrays.stream(y.getItems()).map(x -> x.getItem().id).toList()).toList() + " -> " + stonecutterRecipe.build(item).getType() + " " + stonecutterRecipe.build(item).getId() + " " + stonecutterRecipe.build(item).getResultItem().getItem() + " x " + stonecutterRecipe.build(item).getResultItem().getCount());
+                MinecraftServer.getServer().getRecipeManager().addRecipe(stonecutterRecipe.build(item));
+            }
+        }
+
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 2a8345beb682413babb41dd5a1a5b72ef8e739a1..f7bff66a7ab3c5cce2b2401665fca5bcf6ce08d3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -338,6 +338,10 @@ public class SuCraftItems {
         registeredItem.customDisplayNameJSON = GsonComponentSerializer.gson().serialize(registeredItem.customDisplayName);
         registeredItem.customDisplayNameInLore = Component.text(displayName, PaperAdventure.asAdventure(CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR)).decoration(TextDecoration.ITALIC, false);
         registeredItem.customDisplayNameInLoreJSON = GsonComponentSerializer.gson().serialize(registeredItem.customDisplayNameInLore);
+        // Add crafting recipes
+        for (var stonecuttingRecipe : block.customStonecutterRecipes) {
+            registeredItem.withCustomStonecutterRecipe(new Item.CustomStonecutterRecipe(stonecuttingRecipe.key(), stonecuttingRecipe.group(), stonecuttingRecipe.ingredient().asItem(), stonecuttingRecipe.resultAmount()));
+        }
         return registeredItem;
     }
 
