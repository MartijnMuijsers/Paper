From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 16 Sep 2021 15:39:15 +0200
Subject: [PATCH] Add entity tracking view distance


diff --git a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
index 9a3f75288b1d743a7ec4bfd663c1c2988678d3e6..bab55d430da4cdd1843d0db5e3f984147afe73cc 100644
--- a/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperWorldConfig.java
@@ -732,8 +732,16 @@ public class PaperWorldConfig {
     }
 
     public int noTickViewDistance;
+    // Martijn in Paper start - entity tracking view distance
+    public int entityTrackingViewDistance;
+    public boolean allowEntityTrackingBeyondNoTickViewDistance;
+    // Martijn in Paper end - entity tracking view distance
     private void viewDistance() {
         this.noTickViewDistance = this.getInt("viewdistances.no-tick-view-distance", -1);
+        // Martijn in Paper start - entity tracking view distance
+        this.entityTrackingViewDistance = this.getInt("viewdistances.entity-tracking-view-distance", -1);
+        this.allowEntityTrackingBeyondNoTickViewDistance = this.getBoolean("viewdistances.allow-entity-tracking-beyond-no-tick-view-distance", false);
+        // Martijn in Paper end - entity tracking view distance
     }
 
     public long delayChunkUnloadsBy;
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index b3da5ec6701448a4b273c86aff9c64e3d75e5885..2407af793f667f68da102bed131d1a1dac090f2d 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -22,6 +22,7 @@ import net.minecraft.server.level.TicketType;
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
@@ -113,6 +114,13 @@ public final class PlayerChunkLoader {
      */
     protected int rawSendDistance = -1;
 
+    // Martijn in Paper start - entity tracking view distance
+    /**
+     * -1 if defaulting to [load distance], else always >= 2
+     */
+    protected int rawEntityTrackingDistance = -1;
+    // Martijn in Paper end - entity tracking view distance
+
     /**
      * -1 if defaulting to [tick view distance + 1], else always in [tick view distance + 1, 32 + 1]
      */
@@ -123,6 +131,8 @@ public final class PlayerChunkLoader {
      */
     protected int rawTickDistance = -1;
 
+    protected boolean allowEntityTrackingBeyondNoTickViewDistance = false; // Martijn in Paper - entity tracking view distance
+
     // methods to bridge for API
 
     public int getTargetViewDistance() {
@@ -149,6 +159,24 @@ public final class PlayerChunkLoader {
         this.setSendDistance(distance);
     }
 
+    // Martijn in Paper start - entity tracking view distance
+    public int getTargetEntityTrackingDistance() {
+        return this.rawEntityTrackingDistance == -1 ? this.getTargetNoTickViewDistance() : (this.getAllowEntityTrackingBeyondNoTickViewDistance() ? this.rawEntityTrackingDistance : Math.min(this.rawEntityTrackingDistance, this.getTargetNoTickViewDistance()));
+    }
+
+    public void setTargetEntityTrackingDistance(final int distance) {
+        this.setEntityTrackingDistance(distance);
+    }
+
+    public boolean getAllowEntityTrackingBeyondNoTickViewDistance() {
+        return this.allowEntityTrackingBeyondNoTickViewDistance;
+    }
+
+    public void setAllowEntityTrackingBeyondNoTickViewDistance(final boolean allow) {
+        this.allowEntityTrackingBeyondNoTickViewDistance = allow;
+    }
+    // Martijn in Paper end - entity tracking view distance
+
     // internal methods
 
     public int getSendDistance() {
@@ -163,6 +191,25 @@ public final class PlayerChunkLoader {
         this.rawSendDistance = distance;
     }
 
+    // Martijn in Paper start - entity tracking view distance
+    public int getRawEntityTrackingDistance() {
+        return this.rawEntityTrackingDistance;
+    }
+
+    public int getEntityTrackingDistance() {
+        final int loadDistance = this.getLoadDistance();
+        final int noTickDistance = loadDistance - 1;
+        return this.rawEntityTrackingDistance == -1 ? noTickDistance : (this.allowEntityTrackingBeyondNoTickViewDistance ? this.rawEntityTrackingDistance : Math.min(this.rawEntityTrackingDistance, noTickDistance));
+    }
+
+    public void setEntityTrackingDistance(final int distance) {
+        if (distance != -1 && distance < MIN_VIEW_DISTANCE) {
+            throw new IllegalArgumentException(Integer.toString(distance));
+        }
+        this.rawEntityTrackingDistance = distance;
+    }
+    // Martijn in Paper end - entity tracking view distance
+
     public int getLoadDistance() {
         final int tickDistance = this.getTickDistance();
         return this.rawLoadDistance == -1 ? tickDistance + 1 : Math.max(tickDistance + 1, this.rawLoadDistance);
@@ -671,6 +718,7 @@ public final class PlayerChunkLoader {
         protected int lastSendDistance = Integer.MIN_VALUE;
         protected int lastLoadDistance = Integer.MIN_VALUE;
         protected int lastTickDistance = Integer.MIN_VALUE;
+        protected int lastEntityTrackingDistance = Integer.MIN_VALUE; // Martijn in Paper - entity tracking view distance
         protected boolean usingLookingPriority;
 
         protected final ServerPlayer player;
@@ -696,8 +744,15 @@ public final class PlayerChunkLoader {
         });
 
         protected int sendViewDistance = -1;
+        protected int entityTrackingViewDistance = -1; // Martijn in Paper - entity tracking view distance
         protected int loadViewDistance = -1;
         protected int tickViewDistance = -1;
+        // Martijn in Paper start - entity tracking view distance
+        /**
+         * Deferred to {@link PlayerChunkLoader#getAllowEntityTrackingBeyondNoTickViewDistance} if null
+         */
+        protected Boolean allowEntityTrackingBeyondNoTickViewDistance = null;
+        // Martijn in Paper end - entity tracking view distance
 
         protected long nextChunkSendTarget;
 
@@ -722,6 +777,33 @@ public final class PlayerChunkLoader {
             this.sendViewDistance = distance;
         }
 
+        // Martijn in Paper start - entity tracking view distance
+        public int getTargetEntityTrackingViewDistance() {
+            // If a specific entity tracking view distance is set: return it (or the no-tick view distance if entity tracking beyond no-tick view distance is not allowed)
+            // If not, first we see if a specific entity tracking view distance is set in the world, if so: return it
+            // If not, we return the no-tick view distance for this player (which may be deferred further to the world's no-tick view distance)
+            if (this.entityTrackingViewDistance == -1) {
+                return this.loader.getRawEntityTrackingDistance() == -1 ? this.getTargetNoTickViewDistance() : this.loader.getEntityTrackingDistance();
+            }
+            return this.getAllowEntityTrackingBeyondNoTickViewDistance() ? this.entityTrackingViewDistance : Math.min(this.entityTrackingViewDistance, this.getTargetNoTickViewDistance());
+        }
+
+        public void setTargetEntityTrackingViewDistance(final int distance) {
+            if (distance != -1 && distance < MIN_VIEW_DISTANCE) {
+                throw new IllegalArgumentException(Integer.toString(distance));
+            }
+            this.entityTrackingViewDistance = distance;
+        }
+
+        public boolean getAllowEntityTrackingBeyondNoTickViewDistance() {
+            return this.allowEntityTrackingBeyondNoTickViewDistance == null ? this.loader.getAllowEntityTrackingBeyondNoTickViewDistance() : this.allowEntityTrackingBeyondNoTickViewDistance;
+        }
+
+        public void setAllowEntityTrackingBeyondNoTickViewDistance(final Boolean allow) {
+            this.allowEntityTrackingBeyondNoTickViewDistance = allow;
+        }
+        // Martijn in Paper end - entity tracking view distance
+
         public int getTargetNoTickViewDistance() {
             return (this.loadViewDistance == -1 ? this.getLoadDistance() : this.loadViewDistance) - 1;
         }
@@ -823,6 +905,7 @@ public final class PlayerChunkLoader {
             // send view cannot be greater-than load view
             final int clientViewDistance = this.getClientViewDistance();
             final int sendViewDistance = Math.min(loadViewDistance, this.sendViewDistance == -1 ? (!PaperConfig.playerAutoConfigureSendViewDistance || clientViewDistance == -1 ? this.loader.getSendDistance() : clientViewDistance + 1) : this.sendViewDistance);
+            final int entityTrackingViewDistance = this.entityTrackingViewDistance == -1 ? this.loader.getEntityTrackingDistance() : this.entityTrackingViewDistance; // Martijn in Paper - entity tracking view distance
 
             final double posX = this.player.getX();
             final double posZ = this.player.getZ();
@@ -840,6 +923,7 @@ public final class PlayerChunkLoader {
                     sendViewDistance == this.lastSendDistance
                             && loadViewDistance == this.lastLoadDistance
                             && tickViewDistance == this.lastTickDistance
+                            && entityTrackingViewDistance == this.lastEntityTrackingDistance // Martijn in Paper - entity tracking view distance
 
                             && (this.usingLookingPriority ? (
                                     // has our block stayed the same (this also accounts for chunk change)?
@@ -884,6 +968,7 @@ public final class PlayerChunkLoader {
             this.lastSendDistance = sendViewDistance;
             this.lastLoadDistance = loadViewDistance;
             this.lastTickDistance = tickViewDistance;
+            this.lastEntityTrackingDistance = entityTrackingViewDistance; // Martijn in Paper - entity tracking view distance
             this.usingLookingPriority = useLookPriority;
 
             this.lastChunkX = centerChunkX;
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 4045b7999948710517259edf1cda7028a96cc4c9..56db07c818f029e5297dca7381241ca9f378f26f 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -233,7 +233,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             com.destroystokyo.paper.util.misc.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
             int trackRange = this.entityTrackerTrackRanges[i];
 
-            trackMap.add(player, chunkX, chunkZ, Math.min(trackRange, player.getBukkitEntity().getViewDistance())); // Paper - per player view distances
+            trackMap.add(player, chunkX, chunkZ, Math.min(trackRange, player.getBukkitEntity().getEntityTrackingViewDistance())); // Martijn in Paper - entity tracking view distance
         }
         // Paper end - use distance map to optimise entity tracker
         // Paper start - optimise PlayerChunkMap#isOutsideRange
@@ -273,7 +273,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             com.destroystokyo.paper.util.misc.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
             int trackRange = this.entityTrackerTrackRanges[i];
 
-            trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, player.getBukkitEntity().getViewDistance())); // Paper - per player view distances
+            trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, player.getBukkitEntity().getEntityTrackingViewDistance())); // Martijn in Paper - entity tracking view distance
         }
         // Paper end - use distance map to optimise entity tracker
         // Paper start - optimise PlayerChunkMap#isOutsideRange
@@ -444,6 +444,10 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         // Paper start - no-tick view distance
         this.setNoTickViewDistance(this.level.paperConfig.noTickViewDistance); // Paper - replace chunk loading system
         // Paper end - no-tick view distance
+        // Martijn in Paper start - entity tracking view distance
+        this.setEntityTrackingViewDistance(this.level.paperConfig.entityTrackingViewDistance);
+        this.setAllowEntityTrackingBeyondNoTickViewDistance(this.level.paperConfig.allowEntityTrackingBeyondNoTickViewDistance);
+        // Martijn in Paper end - entity tracking view distance
         this.playerMobDistanceMap = this.level.paperConfig.perPlayerMobSpawns ? new com.destroystokyo.paper.util.PlayerMobDistanceMap() : null; // Paper
         // Paper start - use distance map to optimise entity tracker
         this.playerEntityTrackerTrackMaps = new com.destroystokyo.paper.util.misc.PlayerAreaMap[TRACKING_RANGE_TYPES.length];
@@ -1584,6 +1588,17 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     }
 
+    // Martijn in Paper start - entity tracking view distance
+    public final void setEntityTrackingViewDistance(int viewDistance) {
+        viewDistance = viewDistance == -1 ? -1 : Math.max(viewDistance, 2);
+        this.playerChunkManager.setEntityTrackingDistance(viewDistance);
+    }
+
+    public final void setAllowEntityTrackingBeyondNoTickViewDistance(boolean allow) {
+        this.playerChunkManager.setAllowEntityTrackingBeyondNoTickViewDistance(allow);
+    }
+    // Martijn in Paper end - entity tracking view distance
+
     // Paper start - no-tick view distance
     public final void setNoTickViewDistance(int viewDistance) {
         viewDistance = viewDistance == -1 ? -1 : Mth.clamp(viewDistance, 2, 32);
@@ -2376,7 +2391,7 @@ Sections go from 0..16. Now whenever a section is not empty, it can potentially
                 double vec3d_dy = player.getY() - this.entity.getY();
                 double vec3d_dz = player.getZ() - this.entity.getZ();
                 // Paper end - remove allocation of Vec3D here
-                int i = Math.min(this.getEffectiveRange(), player.getBukkitEntity().getViewDistance() * 16); // Paper - per player view distance
+                int i = Math.min(this.getEffectiveRange(), player.getBukkitEntity().getEntityTrackingViewDistance() * 16); // Martijn in Minecraft - entity tracking view distance
                 boolean flag = vec3d_dx >= (double) (-i) && vec3d_dx <= (double) i && vec3d_dz >= (double) (-i) && vec3d_dz <= (double) i && this.entity.broadcastToPlayer(player); // Paper - remove allocation of Vec3D here
 
                 // CraftBukkit start - respect vanish API
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 883b2070fcf99cf10d44aef6dece0f7f84bfeeed..2850a8f99d70a94d085ddf70170ce26d894f38d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2072,6 +2072,28 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public void setSendViewDistance(int viewDistance) {
         getHandle().getChunkSource().chunkMap.playerChunkManager.setTargetSendDistance(viewDistance);
     }
+
+    // Martijn in Paper start - entity tracking view distance
+    @Override
+    public int getEntityTrackingViewDistance() {
+        return getHandle().getChunkSource().chunkMap.playerChunkManager.getTargetEntityTrackingDistance();
+    }
+
+    @Override
+    public void setEntityTrackingViewDistance(int viewDistance) {
+        getHandle().getChunkSource().chunkMap.playerChunkManager.setTargetEntityTrackingDistance(viewDistance);
+    }
+
+    @Override
+    public boolean getAllowEntityTrackingBeyondNoTickViewDistance() {
+        return getHandle().getChunkSource().chunkMap.playerChunkManager.getAllowEntityTrackingBeyondNoTickViewDistance();
+    }
+
+    @Override
+    public void setAllowEntityTrackingBeyondNoTickViewDistance(boolean allow) {
+        getHandle().getChunkSource().chunkMap.playerChunkManager.setAllowEntityTrackingBeyondNoTickViewDistance(allow);
+    }
+    // Martijn in Paper end - entity tracking view distance
     // Paper end - add view distances
 
     // Spigot start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 2b8e31ae00e786dfbfbf5bb5228b846752cd2543..2e39ce2bc2cb8cd705e2f02883be0b9addea200c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -539,6 +539,50 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.setTargetSendViewDistance(viewDistance);
     }
 
+    // Martijn in Paper start - entity tracking view distance
+    @Override
+    public int getEntityTrackingViewDistance() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return chunkMap.playerChunkManager.getTargetEntityTrackingDistance();
+        }
+        return data.getTargetEntityTrackingViewDistance();
+    }
+
+    @Override
+    public void setEntityTrackingViewDistance(int viewDistance) {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            throw new IllegalStateException("Player is not attached to world");
+        }
+
+        data.setTargetEntityTrackingViewDistance(viewDistance);
+    }
+
+    @Override
+    public boolean getAllowEntityTrackingBeyondNoTickViewDistance() {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            return chunkMap.playerChunkManager.getAllowEntityTrackingBeyondNoTickViewDistance();
+        }
+        return data.getAllowEntityTrackingBeyondNoTickViewDistance();
+    }
+
+    @Override
+    public void setAllowEntityTrackingBeyondNoTickViewDistance(Boolean allow) {
+        net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
+        io.papermc.paper.chunk.PlayerChunkLoader.PlayerLoaderData data = chunkMap.playerChunkManager.getData(this.getHandle());
+        if (data == null) {
+            throw new IllegalStateException("Player is not attached to world");
+        }
+
+        data.setAllowEntityTrackingBeyondNoTickViewDistance(allow);
+    }
+    // Martijn in Paper end - entity tracking view distance
+
     @Override
     public int getNoTickViewDistance() {
         net.minecraft.server.level.ChunkMap chunkMap = this.getHandle().getLevel().getChunkSource().chunkMap;
