From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sat, 2 Jul 2022 14:44:17 +0200
Subject: [PATCH] Removed some debug messages


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 557628d0677de5b6cf1f4e2008ddea0dcdd72f1b..678d26606b09c7dad3236509e1a88e03f5cc9b8f 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -440,15 +440,6 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         this.writePacket(packet, callback, Boolean.TRUE);
     }
     private void writePacket(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback, Boolean flushConditional) {
-        if (packet instanceof ClientboundBlockChangedAckPacket ackPacket) {
-            LOGGER.info("TEMP DEBUG - send ack " + ackPacket.sequence());
-        } else if (packet instanceof ClientboundBlockDestructionPacket destructionPacket) {
-            LOGGER.info("TEMP DEBUG - send destruction " + destructionPacket.getProgress() + " @ " + destructionPacket.getPos());
-        } else if (packet instanceof ClientboundBlockUpdatePacket blockUpdatePacket) {
-            LOGGER.info("TEMP DEBUG - send update " + blockUpdatePacket.getBlockState() + " @ " + blockUpdatePacket.getPos());
-        } else if (packet instanceof ClientboundSectionBlocksUpdatePacket sectionUpdatePacket) {
-            LOGGER.info("TEMP DEBUG - send section update, with suppress light updates: " + sectionUpdatePacket.shouldSuppressLightUpdates());
-        }
         this.packetWrites.getAndIncrement(); // must be befeore using canFlush
         boolean effectiveFlush = flushConditional == null ? this.canFlush : flushConditional.booleanValue();
         // Martijn start - more packets without delay
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index ffb196dec74ff8c06fcda94227c3f3fe3661b0c6..7123b7a821e2b3b75701976ed5382f4f3aaecfda 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -322,11 +322,9 @@ public class ServerPlayerGameMode {
                     if (!iblockdata.isAir()) {
                         float f1 = iblockdata.getDestroyProgress(this.player, this.player.level, pos) * (float) (l + 1);
 
-                        LOGGER.info("TEMP DEBUG - broken amount is: " + f1 + " , based on progress " + iblockdata.getDestroyProgress(this.player, this.player.level, pos) + " * time taken " + (float) (l + 1));
                         if (f1 >= 0.7F) {
                             this.isDestroyingBlock = false;
                             this.level.destroyBlockProgress(this.player.getId(), pos, -1);
-                            LOGGER.info("TEMP DEBUG - going to destroyAndAck for sequence " + sequence);
                             this.destroyAndAck(pos, sequence, "destroyed");
                             return;
                         }
@@ -364,10 +362,8 @@ public class ServerPlayerGameMode {
 
     public void destroyAndAck(BlockPos pos, int sequence, String reason) {
         if (this.destroyBlock(pos)) {
-            LOGGER.info("TEMP DEBUG - it was a destroy");
             this.debugLogging(pos, true, sequence, reason);
         } else {
-            LOGGER.info("TEMP DEBUG - sending update block");
             this.player.connection.send(new ClientboundBlockUpdatePacket(pos, this.level.getBlockState(pos)));
             this.debugLogging(pos, false, sequence, reason);
         }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index d698d0fa688c5a38a494c186e044b8258a1d6acb..96c59ed95385a41c9133dfbec170291d65283172 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1732,7 +1732,6 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
 
     @Override
     public void handlePlayerAction(ServerboundPlayerActionPacket packet) {
-        LOGGER.info("TEMP DEBUG - receive player action " + packet.getSequence() + " : " + packet.getAction() + " @ " + packet.getPos() + " -> " + packet.getDirection());
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
         if (this.player.isImmobile()) return; // CraftBukkit
         BlockPos blockposition = packet.getPos();
@@ -1807,9 +1806,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                     return;
                 }
                 // Paper end - Don't allow digging in unloaded chunks
-                LOGGER.info("TEMP DEBUG - going to handle block break action");
                 this.player.gameMode.handleBlockBreakAction(blockposition, packetplayinblockdig_enumplayerdigtype, packet.getDirection(), this.player.level.getMaxBuildHeight(), packet.getSequence());
-                LOGGER.info("TEMP DEBUG - going to acc block changes up to " + packet.getSequence() + " after block break action handle");
                 this.player.connection.ackBlockChangesUpTo(packet.getSequence());
                 return;
             default:
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 3ac535cb961e803edcaf737ac3db390d69188f47..6a15bc2c981236104a6aa25c6610a59942057639 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -856,7 +856,6 @@ public abstract class Player extends LivingEntity {
     // Martijn start - custom blocks and items
 
     public boolean hasCorrectToolForFasterBreaking(BlockState state) {
-        MinecraftServer.LOGGER.info("TEMP DEBUG - checking if " + getName() + " has correct tool for faster breaking " + state);
         return hasCorrectToolForDrops(state) || !state.requiresCorrectToolForFasterBreaking(true) || this.inventory.getSelected().isCorrectToolForFasterBreaking(state, true);
     }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 326e8b6b2f9274329d2fd073d4223740bec0cd12..fb83a6fabe65bcc57b959e3e355951f9416c6f71 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -672,17 +672,13 @@ public final class ItemStack {
     // Martijn start - custom blocks and items
 
     public boolean isCorrectToolForFasterBreaking(net.minecraft.world.level.block.state.BlockState state, boolean doPlayerObservableLookups) {
-        MinecraftServer.LOGGER.info("TEMP DEBUG - checking if " + getItem() + " is correct tool for faster breaking " + state);
         if (this.isCorrectToolForDrops(state)) {
             return true;
         }
         if (doPlayerObservableLookups) {
-            MinecraftServer.LOGGER.info("TEMP DEBUG - alternatives to check are: " + Block.realStateToPlayerObservableStates[Block.BLOCK_STATE_REGISTRY.getId(state)]);
             for (int playerObservableStateId : Block.realStateToPlayerObservableStates[Block.BLOCK_STATE_REGISTRY.getId(state)]) {
                 net.minecraft.world.level.block.state.BlockState playerObservableState = Block.BLOCK_STATE_REGISTRY.byId(playerObservableStateId);
-                MinecraftServer.LOGGER.info("TEMP DEBUG - checking " + playerObservableState);
                 if (this.isCorrectToolForFasterBreaking(playerObservableState, false)) {
-                    MinecraftServer.LOGGER.info("TEMP DEBUG - now we got it");
                     return true;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index fb0100178c1d1ae040647eaf6eeb923293bafd5e..34ccaa62a466fc7b1f96191ff59e7485f3eedb47 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -367,14 +367,11 @@ public abstract class BlockBehaviour {
     public float getDestroyProgress(BlockState state, Player player, BlockGetter world, BlockPos pos) {
 
         float f = state.getDestroySpeed(world, pos);
-        MinecraftServer.LOGGER.info("TEMP DEBUG - getting destroy progress of state " + state + " @ " + pos + " in " + world + " by " + player.getName() + " : destroy speed is " + f);
 
         if (f == -1.0F) {
-            MinecraftServer.LOGGER.info("TEMP DEBUG - returning naught");
             return 0.0F;
         } else {
             int i = player.hasCorrectToolForFasterBreaking(state) ? 30 : 100; // Martijn - custom blocks and items
-            MinecraftServer.LOGGER.info("TEMP DEBUG - has correct tool = " + player.hasCorrectToolForFasterBreaking(state) + " so i = " + i + " and result will be " + player.getDestroySpeed(state) / f / (float) i + " which is based on player destroy speed = " + player.getDestroySpeed(state));
 
             return player.getDestroySpeed(state) / f / (float) i;
         }
@@ -1192,17 +1189,13 @@ public abstract class BlockBehaviour {
         // Martijn start - custom blocks and items
 
         public boolean requiresCorrectToolForFasterBreaking(boolean doPlayerObservableLookups) {
-            MinecraftServer.LOGGER.info("TEMP DEBUG - checking if " + this + " requires correct tool for faster breaking");
             if (!this.requiresCorrectToolForDrops()) {
                 return false;
             }
             if (doPlayerObservableLookups) {
-                MinecraftServer.LOGGER.info("TEMP DEBUG - alternatives to check are: " + Block.realStateToPlayerObservableStates[Block.BLOCK_STATE_REGISTRY.getId(this.asState())]);
                 for (int playerObservableStateId : Block.realStateToPlayerObservableStates[Block.BLOCK_STATE_REGISTRY.getId(this.asState())]) {
                     net.minecraft.world.level.block.state.BlockState playerObservableState = Block.BLOCK_STATE_REGISTRY.byId(playerObservableStateId);
-                    MinecraftServer.LOGGER.info("TEMP DEBUG - checking " + playerObservableState);
                     if (!playerObservableState.requiresCorrectToolForFasterBreaking(false)) {
-                        MinecraftServer.LOGGER.info("TEMP DEBUG - now we got it");
                         return false;
                     }
                 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
index 8c2229684bfb259fdf57ca17339563c7f0a936cc..72de22c8f266ab20108f91bf558232220f5c4f89 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
@@ -32,15 +32,11 @@ public class SuCraftBlockTagsProvider extends SuCraftTagsProvider<Block> {
         MinecraftServer.LOGGER.info("Inheriting mineable with tool tags for custom blocks...");
         final List<TagKey<Block>> mineableTags = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL);
         for (Block block : Registry.BLOCK) {
-            MinecraftServer.LOGGER.info("TEMP DEBUG - block " + block);
             BlockReplacementRule blockReplacementRule = block.replacementRule;
             if (blockReplacementRule != null) {
                 for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialObservationReplacements()) {
-                    MinecraftServer.LOGGER.info("TEMP DEBUG - actual block " + observationReplacement.first() + " has player observable block " + observationReplacement.second());
                     for (TagKey<Block> tag : mineableTags) {
-                        MinecraftServer.LOGGER.info("TEMP DEBUG - going to check " + tag);
                         if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(this.registry.getHolderOrThrow(this.registry.getResourceKey(observationReplacement.second()).get()))) {
-                            MinecraftServer.LOGGER.info("TEMP DEBUG - added " + tag.location() + " from " + observationReplacement.second() + " to " + observationReplacement.first());
                             this.tag(tag).add(this.registry.getResourceKey(observationReplacement.first()).get());
                         }
                     }
