From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 26 Jan 2022 01:10:39 +0100
Subject: [PATCH] Utility method to sort chunks by distance


diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index b41e6a95c2bf9f169ea8ce95706b8ea0a3d9735a..b9fd050ab33e131d01d8874f19af9cb9827c8cf2 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -402,6 +402,63 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
     // Paper end
 
+    // Martijn start - sort chunks by distance
+
+    public static void evaluateSpiral(int initialX, int initialZ, int inclusiveDistance, BiConsumer<Integer, Integer> consumer) {
+        int x = initialX;
+        int z = initialZ;
+        // All inclusive
+        int minX = initialX - inclusiveDistance;
+        int minZ = initialZ - inclusiveDistance;
+        int maxX = initialX + inclusiveDistance;
+        int maxZ = initialZ + inclusiveDistance;
+        int dx = 0;
+        int dz = 1;
+        int t = 1;
+        int ct = 0;
+        while (true) {
+            if (x < minX || x > maxX || z < minZ || z > maxZ) {
+                break;
+            }
+            consumer.accept(x, z);
+            x += dx;
+            z += dz;
+            ct++;
+            if (ct == t) {
+                ct = 0;
+                if (dz > 0) {
+                    dx = 1;
+                    dz = 0;
+                } else if (dx > 0) {
+                    dx = 0;
+                    dz = -1;
+                    t++;
+                } else if (dz < 0) {
+                    dx = -1;
+                    dz = 0;
+                } else {
+                    dx = 0;
+                    dz = 1;
+                    t++;
+                }
+            }
+        }
+    }
+
+    public Stream<ChunkHolder> getChunkHoldersSortedBySquaredPythagoreanDistanceToClosestPlayer(Stream<ChunkHolder> chunkHolders) {
+        return chunkHolders
+            .map(holder -> new ObjectObjectImmutablePair<>(holder, holder.getWorld().players
+                .stream()
+                .map(player -> player.getSquaredPythagoreanDistanceToChunk(holder.getPos().longKey))
+                .min(Long::compare)
+                .orElse(0L) // Happens in case there are no players in the world
+            ))
+            .sorted(Comparator.comparingLong(Pair::second))
+            .map(Pair::first);
+    }
+
+    // Martijn end - sort chunks by distance
+
     boolean unloadingPlayerChunk = false; // Paper - do not allow ticket level changes while unloading chunks
     public ChunkMap(ServerLevel world, LevelStorageSource.LevelStorageAccess session, DataFixer dataFixer, StructureManager structureManager, Executor executor, BlockableEventLoop<Runnable> mainThreadExecutor, LightChunkGetter chunkProvider, ChunkGenerator chunkGenerator, ChunkProgressListener worldGenerationProgressListener, ChunkStatusUpdateListener chunkStatusChangeListener, Supplier<DimensionDataStorage> persistentStateManagerFactory, int viewDistance, boolean dsync) {
         super(session.getDimensionPath(world.dimension()).resolve("region"), dataFixer, dsync);
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 80b0a25b0f69ff3093d979960ab32021e1dea731..8043ec6108f5da104bcbf79d739667562eca866d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -422,6 +422,24 @@ public class ServerPlayer extends Player {
 
     // Martijn end - getting distance to chunks
 
+    // Martijn start - sorting chunks by distance
+
+    public Stream<ChunkHolder> getChunkHoldersSortedBySquaredPythagoreanDistance(Stream<ChunkHolder> chunkHolders) {
+        return chunkHolders
+            .map(holder -> new ObjectObjectImmutablePair<>(holder, this.getSquaredPythagoreanDistanceToChunk(holder.getPos().longKey)))
+            .sorted(Comparator.comparingLong(Pair::second))
+            .map(Pair::first);
+    }
+
+    public Stream<IntIntPair> getChunkCoordinatesSortedBySquaredPythagoreanDistance(Stream<IntIntPair> chunkCoordinates) {
+        return chunkCoordinates
+            .map(coordinates -> new ObjectObjectImmutablePair<>(coordinates, this.getSquaredPythagoreanDistanceToChunk(new ChunkPos(coordinates.first(), coordinates.second()).longKey)))
+            .sorted(Comparator.comparingLong(Pair::second))
+            .map(Pair::first);
+    }
+
+    // Martijn end - sorting chunks by distance
+
     // Yes, this doesn't match Vanilla, but it's the best we can do for now.
     // If this is an issue, PRs are welcome
     public final BlockPos getSpawnPoint(ServerLevel worldserver) {
