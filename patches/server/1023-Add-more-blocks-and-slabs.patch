From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 13 Jul 2022 20:50:22 +0200
Subject: [PATCH] Add more blocks and slabs


diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index b4e788c119752a774f68c5ef4a467596d3651ab0..c72ded1195839bac41d72554a8685a514f48dca4 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -244,6 +244,10 @@ public class Block extends BlockBehaviour implements ItemLike {
         return this.withTag(() -> BlockTags.SOUL_FIRE_BASE_BLOCKS);
     }
 
+    public @NotNull Block guardedByPiglins() {
+        return this.withTag(() -> BlockTags.GUARDED_BY_PIGLINS);
+    }
+
     public @NotNull Block withAddedTagsLike(@NotNull Block block) {
         this.tagsToAddSuppliers.addAll(block.tagsToAddSuppliers);
         return this;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index 12a126bd77ade1bbc59d7e34e3f6902d72b31189..21d3632bd5e264f3fa11ff59f34a5ffe78467118 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -263,18 +263,145 @@ public class SuCraftBlocks {
     public static final Block POLISHED_CALCITE_SLAB = registerFakePolishedSlab(POLISHED_CALCITE, "calcite", Blocks.QUARTZ_SLAB);
     public static final Block POLISHED_DRIPSTONE_SLAB = registerFakePolishedSlab(POLISHED_DRIPSTONE, "dripstone", Blocks.POLISHED_GRANITE_SLAB);
     public static final Block POLISHED_TUFF_SLAB = registerFakePolishedSlab(POLISHED_TUFF, "tuff", Blocks.ANDESITE_SLAB);
-    public static final Block ANDESITE_BRICK_SLAB = registerFakeBrickSlab(ANDESITE_BRICKS, "andesite", Blocks.POLISHED_ANDESITE_SLAB);
-    public static final Block CALCITE_BRICK_SLAB = registerFakeBrickSlab(CALCITE_BRICKS, "calcite", Blocks.QUARTZ_SLAB);
-    public static final Block DIORITE_BRICK_SLAB = registerFakeBrickSlab(DIORITE_BRICKS, "diorite", Blocks.POLISHED_DIORITE_SLAB);
-    public static final Block DRIPSTONE_BRICK_SLAB = registerFakeBrickSlab(DRIPSTONE_BRICKS, "dripstone", Blocks.POLISHED_GRANITE_SLAB);
-    public static final Block GRANITE_BRICK_SLAB = registerFakeBrickSlab(GRANITE_BRICKS, "granite", Blocks.POLISHED_GRANITE_SLAB);
-    public static final Block TUFF_BRICK_SLAB = registerFakeBrickSlab(TUFF_BRICKS, "tuff", Blocks.STONE_BRICK_SLAB);
-    public static final Block ANDESITE_PILLAR_SLAB = registerFakeStonePillarSlab(ANDESITE_PILLAR, "andesite", Blocks.POLISHED_ANDESITE_SLAB);
-    public static final Block CALCITE_PILLAR_SLAB = registerFakeStonePillarSlab(CALCITE_PILLAR, "calcite", Blocks.QUARTZ_SLAB);
-    public static final Block DIORITE_PILLAR_SLAB = registerFakeStonePillarSlab(DIORITE_PILLAR, "diorite", Blocks.POLISHED_DIORITE_SLAB);
-    public static final Block DRIPSTONE_PILLAR_SLAB = registerFakeStonePillarSlab(DRIPSTONE_PILLAR, "dripstone", Blocks.POLISHED_GRANITE_SLAB);
-    public static final Block GRANITE_PILLAR_SLAB = registerFakeStonePillarSlab(GRANITE_PILLAR, "granite", Blocks.POLISHED_GRANITE_SLAB);
-    public static final Block TUFF_PILLAR_SLAB = registerFakeStonePillarSlab(TUFF_PILLAR, "tuff", Blocks.COBBLESTONE_SLAB);
+    public static final Block ANDESITE_BRICK_SLAB = registerFakeCustomBrickSlab(ANDESITE_BRICKS, "andesite", Blocks.POLISHED_ANDESITE_SLAB);
+    public static final Block CALCITE_BRICK_SLAB = registerFakeCustomBrickSlab(CALCITE_BRICKS, "calcite", Blocks.QUARTZ_SLAB);
+    public static final Block DIORITE_BRICK_SLAB = registerFakeCustomBrickSlab(DIORITE_BRICKS, "diorite", Blocks.POLISHED_DIORITE_SLAB);
+    public static final Block DRIPSTONE_BRICK_SLAB = registerFakeCustomBrickSlab(DRIPSTONE_BRICKS, "dripstone", Blocks.POLISHED_GRANITE_SLAB);
+    public static final Block GRANITE_BRICK_SLAB = registerFakeCustomBrickSlab(GRANITE_BRICKS, "granite", Blocks.POLISHED_GRANITE_SLAB);
+    public static final Block TUFF_BRICK_SLAB = registerFakeCustomBrickSlab(TUFF_BRICKS, "tuff", Blocks.STONE_BRICK_SLAB);
+    public static final Block ANDESITE_PILLAR_SLAB = registerFakeCustomStonePillarSlab(ANDESITE_PILLAR, "andesite", Blocks.POLISHED_ANDESITE_SLAB);
+    public static final Block CALCITE_PILLAR_SLAB = registerFakeCustomStonePillarSlab(CALCITE_PILLAR, "calcite", Blocks.QUARTZ_SLAB);
+    public static final Block DIORITE_PILLAR_SLAB = registerFakeCustomStonePillarSlab(DIORITE_PILLAR, "diorite", Blocks.POLISHED_DIORITE_SLAB);
+    public static final Block DRIPSTONE_PILLAR_SLAB = registerFakeCustomStonePillarSlab(DRIPSTONE_PILLAR, "dripstone", Blocks.POLISHED_GRANITE_SLAB);
+    public static final Block GRANITE_PILLAR_SLAB = registerFakeCustomStonePillarSlab(GRANITE_PILLAR, "granite", Blocks.POLISHED_GRANITE_SLAB);
+    public static final Block TUFF_PILLAR_SLAB = registerFakeCustomStonePillarSlab(TUFF_PILLAR, "tuff", Blocks.COBBLESTONE_SLAB);
+    public static final Block SOUL_SANDSTONE_SLAB = registerFakeSlab(SOUL_SANDSTONE, null, "soul_sandstone", NamespacedKeyWithoutIntention.sucraft("soul_sandstone"), null, null, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), NamespacedKeyWithoutIntention.sucraft("soul_sandstone"), NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), Blocks.DARK_OAK_SLAB, null).mineableWithPickaxe().soulSpeed().soulFireBase();
+    public static final Block SANDSTONE_BRICK_SLAB = registerFakeSandstoneBrickSlab(SANDSTONE_BRICKS, null, Blocks.SANDSTONE_SLAB);
+    public static final Block RED_SANDSTONE_BRICK_SLAB = registerFakeSandstoneBrickSlab(RED_SANDSTONE_BRICKS, "red", Blocks.RED_SANDSTONE_SLAB);
+    public static final Block SOUL_SANDSTONE_BRICK_SLAB = registerFakeSandstoneBrickSlab(SOUL_SANDSTONE_BRICKS, "soul", Blocks.DARK_OAK_SLAB).soulSpeed().soulFireBase();
+
+    /**
+     * Based on {@link Blocks#SMOOTH_SANDSTONE} and {@link Blocks#SOUL_SAND}
+     */
+    public static final Block SMOOTH_SOUL_SANDSTONE = register(
+        "smooth_soul_sandstone",
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
+            .withNoteBlockHost()
+            .withFallback(Blocks.SOUL_SOIL)
+            .withModelCreation(Model.creation(ModelContent.OneTextureCube.creation(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance()))).withNoParameters())
+            .withFullBlockBoundingBoxItem(),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)).mineableWithPickaxe().soulSpeed().soulFireBase(),
+        SuCraftBlockLoot::dropSelf
+    );
+
+    public static final Block SMOOTH_SOUL_SANDSTONE_SLAB = registerFakeSlab(SMOOTH_SOUL_SANDSTONE, null, "smooth_soul_sandstone", NamespacedKeyWithoutIntention.sucraft("smooth_soul_sandstone"), NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), null, null, null, null, Blocks.OAK_SLAB, null).mineableWithPickaxe().soulSpeed().soulFireBase();
+    public static final Block CUT_SOUL_SANDSTONE_SLAB = registerFakeSlab(CUT_SOUL_SANDSTONE, null, "cut_soul_sandstone", NamespacedKeyWithoutIntention.sucraft("cut_soul_sandstone"), null, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), null, null, null, Blocks.DARK_OAK_SLAB, null).mineableWithPickaxe().soulSpeed().soulFireBase();
+    public static final Block GRAVEL_SLAB = registerFakeSlab(Blocks.GRAVEL, "gravel", Blocks.ANDESITE_SLAB).breakBeforeClientKnowsToBreak().mineableWithShovel();
+    public static final Block NETHERRACK_SLAB = registerFakeSlab(Blocks.NETHERRACK, "netherrack", Blocks.RED_NETHER_BRICK_SLAB).breakBeforeClientKnowsToBreak().mineableWithPickaxe();
+    public static final Block SOUL_SOIL_SLAB = registerFakeSlab(Blocks.SOUL_SOIL, "soul_soil", Blocks.DARK_OAK_SLAB).breakBeforeClientKnowsToBreak().mineableWithShovel().soulSpeed().soulFireBase();
+    public static final Block RAW_COPPER_SLAB = registerFakeRawMetalSlab(Blocks.RAW_COPPER_BLOCK, "copper", Blocks.CUT_COPPER_SLAB);
+    public static final Block RAW_GOLD_SLAB = registerFakeRawMetalSlab(Blocks.RAW_GOLD_BLOCK, "gold", Blocks.OAK_SLAB).guardedByPiglins();
+    public static final Block RAW_IRON_SLAB = registerFakeRawMetalSlab(Blocks.RAW_IRON_BLOCK, "iron", Blocks.JUNGLE_SLAB);
+    public static final Block ANCIENT_DEBRIS_SLAB = registerFakeSlab(Blocks.ANCIENT_DEBRIS, null, "ancient_debris", NamespacedKeyWithoutIntention.minecraft("ancient_debris"), NamespacedKeyWithoutIntention.minecraft("ancient_debris_side"), NamespacedKeyWithoutIntention.minecraft("ancient_debris_top"), null, null, null, Blocks.POLISHED_GRANITE_SLAB, null).mineableWithPickaxe();
+    public static final Block DIRT_BRICK_SLAB = registerFakeSlab(DIRT_BRICKS, "dirt_brick", null, Blocks.MUD_BRICK_SLAB).breakBeforeClientKnowsToBreak().mineableWithShovel().dirt();
+    public static final Block STONE_PILLAR = registerStonePillar("stone", Blocks.STONE, MaterialColor.STONE);
+    public static final Block STONE_PILLAR_SLAB = registerFakeCustomStonePillarSlab(STONE_PILLAR, "stone", Blocks.STONE_SLAB);
+    public static final Block OAK_LOG_SLAB = registerFakeLogSlab(Blocks.OAK_LOG, "oak", Blocks.OAK_SLAB);
+    public static final Block SPRUCE_LOG_SLAB = registerFakeLogSlab(Blocks.SPRUCE_LOG, "spruce", Blocks.SPRUCE_SLAB);
+    public static final Block BIRCH_LOG_SLAB = registerFakeLogSlab(Blocks.BIRCH_LOG, "birch", Blocks.BIRCH_SLAB);
+    public static final Block JUNGLE_LOG_SLAB = registerFakeLogSlab(Blocks.JUNGLE_LOG, "jungle", Blocks.JUNGLE_SLAB);
+    public static final Block ACACIA_LOG_SLAB = registerFakeLogSlab(Blocks.ACACIA_LOG, "acacia", Blocks.ACACIA_SLAB);
+    public static final Block DARK_OAK_LOG_SLAB = registerFakeLogSlab(Blocks.DARK_OAK_LOG, "dark_oak", Blocks.DARK_OAK_SLAB);
+    public static final Block WARPED_STEM_SLAB = registerFakeStemSlab(Blocks.WARPED_STEM, "warped", Blocks.WARPED_SLAB);
+    public static final Block CRIMSON_STEM_SLAB = registerFakeStemSlab(Blocks.CRIMSON_STEM, "crimson", Blocks.CRIMSON_SLAB);
+    public static final Block MANGROVE_LOG_SLAB = registerFakeLogSlab(Blocks.MANGROVE_LOG, "mangrove", Blocks.MANGROVE_SLAB);
+    public static final Block STRIPPED_OAK_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.OAK_LOG, "oak", Blocks.OAK_SLAB);
+    public static final Block STRIPPED_SPRUCE_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_SPRUCE_LOG, "spruce", Blocks.SPRUCE_SLAB);
+    public static final Block STRIPPED_BIRCH_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_BIRCH_LOG, "birch", Blocks.BIRCH_SLAB);
+    public static final Block STRIPPED_JUNGLE_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_JUNGLE_LOG, "jungle", Blocks.JUNGLE_SLAB);
+    public static final Block STRIPPED_ACACIA_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_ACACIA_LOG, "acacia", Blocks.ACACIA_SLAB);
+    public static final Block STRIPPED_DARK_OAK_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_DARK_OAK_LOG, "dark_oak", Blocks.DARK_OAK_SLAB);
+    public static final Block STRIPPED_WARPED_STEM_SLAB = registerFakeStrippedStemSlab(Blocks.STRIPPED_WARPED_STEM, "warped", Blocks.WARPED_SLAB);
+    public static final Block STRIPPED_CRIMSON_STEM_SLAB = registerFakeStrippedStemSlab(Blocks.STRIPPED_CRIMSON_STEM, "crimson", Blocks.CRIMSON_SLAB);
+    public static final Block STRIPPED_MANGROVE_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_MANGROVE_LOG, "mangrove", Blocks.MANGROVE_SLAB);
+    public static final Block OAK_WOOD_SLAB = registerFakeWoodSlab(Blocks.OAK_WOOD, "oak", Blocks.OAK_SLAB);
+    public static final Block SPRUCE_WOOD_SLAB = registerFakeWoodSlab(Blocks.SPRUCE_WOOD, "spruce", Blocks.SPRUCE_SLAB);
+    public static final Block BIRCH_WOOD_SLAB = registerFakeWoodSlab(Blocks.BIRCH_WOOD, "birch", Blocks.BIRCH_SLAB);
+    public static final Block JUNGLE_WOOD_SLAB = registerFakeWoodSlab(Blocks.JUNGLE_WOOD, "jungle", Blocks.JUNGLE_SLAB);
+    public static final Block ACACIA_WOOD_SLAB = registerFakeWoodSlab(Blocks.ACACIA_WOOD, "acacia", Blocks.ACACIA_SLAB);
+    public static final Block DARK_OAK_WOOD_SLAB = registerFakeWoodSlab(Blocks.DARK_OAK_WOOD, "dark_oak", Blocks.DARK_OAK_SLAB);
+    public static final Block WARPED_HYPHAE_SLAB = registerFakeHyphaeSlab(Blocks.WARPED_HYPHAE, "warped", Blocks.WARPED_SLAB);
+    public static final Block CRIMSON_HYPHAE_SLAB = registerFakeHyphaeSlab(Blocks.CRIMSON_HYPHAE, "crimson", Blocks.CRIMSON_SLAB);
+    public static final Block MANGROVE_WOOD_SLAB = registerFakeWoodSlab(Blocks.MANGROVE_WOOD, "mangrove", Blocks.MANGROVE_SLAB);
+    public static final Block STRIPPED_OAK_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.OAK_WOOD, "oak", Blocks.OAK_SLAB);
+    public static final Block STRIPPED_SPRUCE_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_SPRUCE_WOOD, "spruce", Blocks.SPRUCE_SLAB);
+    public static final Block STRIPPED_BIRCH_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_BIRCH_WOOD, "birch", Blocks.BIRCH_SLAB);
+    public static final Block STRIPPED_JUNGLE_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_JUNGLE_WOOD, "jungle", Blocks.JUNGLE_SLAB);
+    public static final Block STRIPPED_ACACIA_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_ACACIA_WOOD, "acacia", Blocks.ACACIA_SLAB);
+    public static final Block STRIPPED_DARK_OAK_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_DARK_OAK_WOOD, "dark_oak", Blocks.DARK_OAK_SLAB);
+    public static final Block STRIPPED_WARPED_HYPHAE_SLAB = registerFakeStrippedHyphaeSlab(Blocks.STRIPPED_WARPED_HYPHAE, "warped", Blocks.WARPED_SLAB);
+    public static final Block STRIPPED_CRIMSON_HYPHAE_SLAB = registerFakeStrippedHyphaeSlab(Blocks.STRIPPED_CRIMSON_HYPHAE, "crimson", Blocks.CRIMSON_SLAB);
+    public static final Block STRIPPED_MANGROVE_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_MANGROVE_WOOD, "mangrove", Blocks.MANGROVE_SLAB);
+    public static final Block BONE_SLAB = registerFakeSlab(Blocks.BONE_BLOCK, null, "bone", NamespacedKeyWithoutIntention.minecraft("bone_block"), NamespacedKeyWithoutIntention.minecraft("bone_block_side"), NamespacedKeyWithoutIntention.minecraft("bone_block_top"), null, null, null, Blocks.SMOOTH_QUARTZ_SLAB, null).mineableWithPickaxe();//registerFakeSlabFromYPillarVanillaBlock(Blocks.BONE_BLOCK, null, "bone", "bone_block", Blocks.SMOOTH_QUARTZ_SLAB).mineableWithPickaxe();
+
+    /**
+     * Based on {@link Blocks#BONE_BLOCK}
+     */
+    public static final Block WITHER_BONE_BLOCK = register(
+        "wither_bone_block",
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
+            .withNoteBlockHosts()
+            .withFallback(Blocks.COAL_BLOCK)
+            .withDefaultModelCreationsForRotatedPillarBlock()
+            .withFullBlockBoundingBoxItem(),
+        new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).strength(2.0F).sound(SoundType.BONE_BLOCK)).mineableWithPickaxe(),
+        SuCraftBlockLoot::dropSelf
+    );
+
+    public static final Block WITHER_BONE_SLAB = registerFakeSlabFromYPillarCustomBlock(WITHER_BONE_BLOCK, null, "wither_bone", "wither_bone_block", Blocks.BLACKSTONE_SLAB).mineableWithPickaxe();
+    public static final Block BASALT_SLAB = registerFakeSlab(Blocks.BASALT, null, "basalt", NamespacedKeyWithoutIntention.minecraft("basalt"), NamespacedKeyWithoutIntention.minecraft("basalt_side"), NamespacedKeyWithoutIntention.minecraft("basalt_top"), null, null, null, Blocks.COBBLESTONE_SLAB, null).mineableWithPickaxe();
+    public static final Block POLISHED_BASALT_SLAB = registerFakeSlab(Blocks.POLISHED_BASALT, null, "polished_basalt", NamespacedKeyWithoutIntention.minecraft("polished_basalt"), NamespacedKeyWithoutIntention.minecraft("polished_basalt_side"), NamespacedKeyWithoutIntention.minecraft("polished_basalt_top"), null, null, null, Blocks.STONE_SLAB, null).mineableWithPickaxe();
+    public static final Block SMOOTH_BASALT_SLAB = registerFakeSlab(Blocks.SMOOTH_BASALT, "smooth_basalt", Blocks.COBBLED_DEEPSLATE_SLAB);
+
+    /**
+     * Based on {@link Blocks#COAL_BLOCK}
+     */
+    public static final Block CHARCOAL_BLOCK = register(
+        "charcoal_block",
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
+            .withNoteBlockHost()
+            .withFallback(Blocks.COAL_BLOCK)
+            .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+            .withFullBlockBoundingBoxItem(),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).strength(5.0F, 6.0F)).mineableWithPickaxe(),
+        SuCraftBlockLoot::dropSelf
+    );
+
+    public static final Block CHARCOAL_SLAB = registerFakeSlab(CHARCOAL_BLOCK, "charcoal", null, Blocks.BLACKSTONE_SLAB);
+
+    /**
+     * Based on {@link Blocks#LIGHT_GRAY_CONCRETE_POWDER}
+     */
+    public static final Block GUNPOWDER_BLOCK = register(
+        "gunpowder_block",
+        new SingleMultiStateRealBlockReplacementRuleBuilder()
+            .withNoteBlockHost()
+            .withFallback(Blocks.LIGHT_GRAY_CONCRETE_POWDER)
+            .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+            .withFullBlockBoundingBoxItem(),
+        new Block(BlockBehaviour.Properties.of(Material.SAND, DyeColor.LIGHT_GRAY).strength(0.5F).sound(SoundType.SAND)).breakBeforeClientKnowsToBreak().mineableWithShovel(),
+        SuCraftBlockLoot::dropSelf
+    );
+
+    public static final Block GUNPOWDER_SLAB = registerFakeSlab(GUNPOWDER_BLOCK, "gunpowder", null, Blocks.SMOOTH_STONE_SLAB);
+    public static final Block PEAT = registerPeat(null);
+    public static final Block SMOULDERING_PEAT = registerPeat("smouldering");
+    public static final Block PEAT_SLAB = registerFakeSlab(PEAT, "peat", null, Blocks.MUD_BRICK_SLAB).breakBeforeClientKnowsToBreak().mineableWithShovel();
+    public static final Block SCULK_SLAB = registerFakeSlab(Blocks.SCULK, "sculk", Blocks.BLACKSTONE_SLAB).breakBeforeClientKnowsToBreak().mineableWithHoe();
+    public static final Block CHISELED_QUARTZ_SLAB = registerFakeSlabFromYPillarVanillaBlock(Blocks.CHISELED_QUARTZ_BLOCK, null, "chiseled_quartz", "chiseled_quartz_block", Blocks.QUARTZ_SLAB).mineableWithPickaxe();
+    public static final Block QUARTZ_PILLAR_SLAB = registerFakeVanillaStonePillarSlab(Blocks.QUARTZ_PILLAR, "quartz", Blocks.QUARTZ_SLAB);
+    public static final Block QUARTZ_BRICK_SLAB = registerFakeVanillaBrickSlab(Blocks.QUARTZ_BRICKS, "quartz", Blocks.QUARTZ_SLAB);
+    public static final Block DRIED_KELP_SLAB = registerFakeSlab(Blocks.DRIED_KELP_BLOCK, null, "dried_kelp", NamespacedKeyWithoutIntention.minecraft("dried_kelp_block"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_side"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_bottom"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_top"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_bottom"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_top"), Blocks.DARK_PRISMARINE_SLAB, null).mineableWithHoe();
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
@@ -489,7 +616,7 @@ public class SuCraftBlocks {
         );
     }
 
-    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull ModelCreation doubleSlabModelCreation, @NotNull Texture sideTexture, @Nullable Texture bottomHalfBottomTexture, @Nullable Texture bottomHalfTopTexture, @Nullable Texture topHalfBottomTexture, @Nullable Texture topHalfTopTexture, @NotNull Block host, @Nullable Block fallback) {
+    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull ModelCreation doubleSlabModelCreation, @NotNull Texture sideTexture, @Nullable Texture bottomHalfBottomTexture, @Nullable Texture bottomHalfTopTexture, @Nullable Texture topHalfBottomTexture, @Nullable Texture topHalfTopTexture, @NotNull Block host, @Nullable Block fallback) {
         if (fallback == null) {
             fallback = host;
         }
@@ -501,26 +628,135 @@ public class SuCraftBlocks {
                 .withAnalogousFallbacks(fallback)
                 .withDefaultModelCreationsForSlabReplacedBySlab(doubleSlabModelCreation, sideTexture, bottomHalfBottomTexture, bottomHalfTopTexture, topHalfBottomTexture, topHalfTopTexture)
                 .withRealItemRuleFromHostBlock(),
-            new SlabBlock(fullBlock.properties).withAddedTagsLike(fullBlock).slab(),
+            new SlabBlock(properties == null ? fullBlock.properties : properties).withAddedTagsLike(fullBlock).slab(),
             SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
         );
     }
 
+    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull NamespacedKeyWithoutIntention doubleSlabKey, @Nullable NamespacedKeyWithoutIntention sideTextureKey, @Nullable NamespacedKeyWithoutIntention bottomHalfBottomTextureKey, @Nullable NamespacedKeyWithoutIntention bottomHalfTopTextureKey, @Nullable NamespacedKeyWithoutIntention topHalfBottomTextureKey, @Nullable NamespacedKeyWithoutIntention topHalfTopTextureKey, @NotNull Block host, @Nullable Block fallback) {
+        if (sideTextureKey == null) {
+            sideTextureKey = doubleSlabKey;
+        }
+        return registerFakeSlab(
+            fullBlock,
+            properties,
+            type,
+            (intention, key) -> new Model(ResourcePackAssetIntention.BLOCK, doubleSlabKey, ModelContent.Existing.getInstance(ModelContent.Existing.ExistingModelContentOutwardExpansionType.CUBE)),
+            new Texture(ResourcePackAssetIntention.BLOCK, sideTextureKey, TextureContent.Existing.getInstance()),
+            bottomHalfBottomTextureKey == null ? null : new Texture(ResourcePackAssetIntention.BLOCK, bottomHalfBottomTextureKey, TextureContent.Existing.getInstance()),
+            bottomHalfTopTextureKey == null ? null : new Texture(ResourcePackAssetIntention.BLOCK, bottomHalfTopTextureKey, TextureContent.Existing.getInstance()),
+            topHalfBottomTextureKey == null ? null : new Texture(ResourcePackAssetIntention.BLOCK, topHalfBottomTextureKey, TextureContent.Existing.getInstance()),
+            topHalfTopTextureKey == null ? null : new Texture(ResourcePackAssetIntention.BLOCK, topHalfTopTextureKey, TextureContent.Existing.getInstance()),
+            host,
+            fallback
+        );
+    }
+
+    private static @NotNull Block registerFakeSlabFromYPillar(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull NamespacedKeyWithoutIntention doubleSlabNamespacedKey, @NotNull Block host) {
+        return registerFakeSlab(fullBlock, properties, type, doubleSlabNamespacedKey, doubleSlabNamespacedKey, doubleSlabNamespacedKey.withKeySuffix("_top"), null, null, null, host, null);
+    }
+
+    private static @NotNull Block registerFakeSlabFromYPillarVanillaBlock(@NotNull Block fullVanillaBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull String textureType, @NotNull Block host) {
+        return registerFakeSlabFromYPillar(fullVanillaBlock, properties, type, NamespacedKeyWithoutIntention.minecraft(textureType), host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromYPillarVanillaBlock(@NotNull Block fullVanillaBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromYPillarVanillaBlock(fullVanillaBlock, properties, type, type, host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromYPillarCustomBlock(@NotNull Block fullCustomBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull String textureType, @NotNull Block host) {
+        return registerFakeSlabFromYPillar(fullCustomBlock, properties, type, NamespacedKeyWithoutIntention.sucraft(textureType), host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromYPillarCustomBlock(@NotNull Block fullCustomBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromYPillarCustomBlock(fullCustomBlock, properties, type, type, host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromBottomTopPillar(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull NamespacedKeyWithoutIntention doubleSlabNamespacedKey, @NotNull Block host) {
+        NamespacedKeyWithoutIntention bottomKey = doubleSlabNamespacedKey.withKeySuffix("_bottom");
+        NamespacedKeyWithoutIntention topKey = doubleSlabNamespacedKey.withKeySuffix("_top");
+        return registerFakeSlab(fullBlock, properties, type, doubleSlabNamespacedKey, doubleSlabNamespacedKey, bottomKey, topKey, bottomKey, topKey, host, null);
+    }
+
+    private static @NotNull Block registerFakeSlabFromBottomTopPillarVanillaBlock(@NotNull Block fullVanillaBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull String textureType, @NotNull Block host) {
+        return registerFakeSlabFromBottomTopPillar(fullVanillaBlock, properties, type, NamespacedKeyWithoutIntention.minecraft(textureType), host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromBottomTopPillarVanillaBlock(@NotNull Block fullVanillaBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromBottomTopPillarVanillaBlock(fullVanillaBlock, properties, type, type, host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromBottomTopPillarCustomBlock(@NotNull Block fullCustomBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull String textureType, @NotNull Block host) {
+        return registerFakeSlabFromBottomTopPillar(fullCustomBlock, properties, type, NamespacedKeyWithoutIntention.sucraft(textureType), host);
+    }
+
+    private static @NotNull Block registerFakeSlabFromBottomTopPillarCustomBlock(@NotNull Block fullCustomBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromBottomTopPillarCustomBlock(fullCustomBlock, properties, type, type, host);
+    }
+
     private static @NotNull Block registerFakeBookshelfSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
         String typedBookshelf = type + "_bookshelf";
         String typedBookshelfIfNotOak = fullBlock.equals(Blocks.BOOKSHELF) ? "bookshelf" : typedBookshelf;
         NamespacedKeyWithoutIntention doubleSlabNamespacedKey = fullBlock.equals(Blocks.BOOKSHELF) ? NamespacedKeyWithoutIntention.minecraft(typedBookshelfIfNotOak) : NamespacedKeyWithoutIntention.sucraft(typedBookshelfIfNotOak);
-        Texture sideTexture = new Texture(ResourcePackAssetIntention.BLOCK, doubleSlabNamespacedKey, TextureContent.Existing.getInstance());
-        Texture endTexture = new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft(type + "_planks"), TextureContent.Existing.getInstance());
-        return registerFakeSlab(fullBlock, typedBookshelf, (intention, key) -> new Model(ResourcePackAssetIntention.BLOCK, doubleSlabNamespacedKey, ModelContent.Existing.getInstance(ModelContent.Existing.ExistingModelContentOutwardExpansionType.CUBE)), sideTexture, endTexture, null, null, null, host, null).mineableWithAxe();
+        return registerFakeSlab(fullBlock, null, typedBookshelf, doubleSlabNamespacedKey, doubleSlabNamespacedKey,  NamespacedKeyWithoutIntention.minecraft(type + "_planks"), null, null, null, host, null).mineableWithAxe();
+    }
+
+    private static @NotNull Block registerFakeCustomStonePillarSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromYPillarCustomBlock(fullBlock, null, type + "_pillar", host).mineableWithPickaxe();
+    }
+
+    private static @NotNull Block registerFakeVanillaStonePillarSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromYPillarVanillaBlock(fullBlock, null, type + "_pillar", host).mineableWithPickaxe();
+    }
+
+    private static @NotNull Block registerFakeLogOrStemSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlabFromYPillarVanillaBlock(fullBlock, BlockBehaviour.Properties.of(Material.WOOD, fullBlock.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), type, host).mineableWithAxe();
+    }
+
+    private static @NotNull Block registerFakeLogSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeLogOrStemSlab(fullBlock, type + "_log", host);
+    }
+
+    private static @NotNull Block registerFakeStemSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeLogOrStemSlab(fullBlock, type + "_stem", host);
+    }
+
+    private static @NotNull Block registerFakeStrippedLogOrStemSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeLogOrStemSlab(fullBlock, "stripped_" + type, host);
+    }
+
+    private static @NotNull Block registerFakeStrippedLogSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeStrippedLogOrStemSlab(fullBlock, type + "_log", host);
+    }
+
+    private static @NotNull Block registerFakeStrippedStemSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeStrippedLogOrStemSlab(fullBlock, type + "_stem", host);
+    }
+
+    private static @NotNull Block registerFakeWoodOrHyphaeSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull String textureType, @NotNull Block host) {
+        NamespacedKeyWithoutIntention doubleSlabKey = NamespacedKeyWithoutIntention.minecraft(type);
+        NamespacedKeyWithoutIntention textureKey = NamespacedKeyWithoutIntention.minecraft(textureType);
+        return registerFakeSlab(fullBlock, BlockBehaviour.Properties.of(Material.WOOD, fullBlock.defaultMaterialColor()).strength(2.0F, 3.0F).sound(SoundType.WOOD), type, doubleSlabKey, textureKey, null, null, null, null, host, null).mineableWithAxe();
     }
 
-    private static @NotNull Block registerFakeStonePillarSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
-        String typedPillar = type + "_pillar";
-        NamespacedKeyWithoutIntention doubleSlabNamespacedKey = NamespacedKeyWithoutIntention.sucraft(typedPillar);
-        Texture sideTexture = new Texture(ResourcePackAssetIntention.BLOCK, doubleSlabNamespacedKey, TextureContent.Existing.getInstance());
-        Texture endTexture = new Texture(ResourcePackAssetIntention.BLOCK, new NamespacedKeyWithoutIntention(doubleSlabNamespacedKey.namespace(), doubleSlabNamespacedKey.keyWithoutIntention() + "_top"), TextureContent.Existing.getInstance());
-        return registerFakeSlab(fullBlock, typedPillar, (intention, key) -> new Model(ResourcePackAssetIntention.BLOCK, doubleSlabNamespacedKey, ModelContent.Existing.getInstance(ModelContent.Existing.ExistingModelContentOutwardExpansionType.CUBE)), sideTexture, endTexture, null, null, null, host, null).mineableWithPickaxe();
+    private static @NotNull Block registerFakeWoodSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeWoodOrHyphaeSlab(fullBlock, type + "_wood", type + "_log", host);
+    }
+
+    private static @NotNull Block registerFakeHyphaeSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeWoodOrHyphaeSlab(fullBlock, type + "_hyphae", type + "_stem", host);
+    }
+
+    private static @NotNull Block registerFakeStrippedWoodOrHyphaeSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull String textureType, @NotNull Block host) {
+        return registerFakeWoodOrHyphaeSlab(fullBlock, "stripped_" + type, "stripped_" + textureType, host);
+    }
+
+    private static @NotNull Block registerFakeStrippedWoodSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeStrippedWoodOrHyphaeSlab(fullBlock, type + "_wood", type + "_log", host);
+    }
+
+    private static @NotNull Block registerFakeStrippedHyphaeSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeStrippedWoodOrHyphaeSlab(fullBlock, type + "_hyphae", type + "_stem", host);
     }
 
     /**
@@ -528,7 +764,7 @@ public class SuCraftBlocks {
      * @param textureBlock If null, will be the based on the model of the full block, else it will be assumed to be a default Minecraft model as well as texture namespaced key path (for example 'dirt' will mean the model used as double slab is 'minecraft:block/dirt' and the texture used is 'minecraft:block/dirt')
      * @param fallback If null, will be the same as host
      */
-    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @NotNull String type, @Nullable String textureBlock, @NotNull Block host, @Nullable Block fallback) {
+    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @Nullable String textureBlock, @NotNull Block host, @Nullable Block fallback) {
         if (fallback == null) {
             fallback = host;
         }
@@ -540,11 +776,15 @@ public class SuCraftBlocks {
                 .withAnalogousFallbacks(fallback)
                 .withDefaultModelCreationsForSlabReplacedBySlab(textureBlock != null ? NamespacedKeyWithoutIntention.minecraft(textureBlock) : fullBlock.replacementRule.getModel(fullBlock.defaultBlockState()).model().getKey(), ModelContent.Existing.ExistingModelContentOutwardExpansionType.CUBE)
                 .withRealItemRuleFromHostBlock(),
-            new SlabBlock(fullBlock.properties).withAddedTagsLike(fullBlock).slab(),
+            new SlabBlock(properties == null ? fullBlock.properties : properties).withAddedTagsLike(fullBlock).slab(),
             SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
         );
     }
 
+    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @NotNull String type, @Nullable String textureBlock, @NotNull Block host, @Nullable Block fallback) {
+        return registerFakeSlab(fullBlock, null, type, textureBlock, host, fallback);
+    }
+
     private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @NotNull String type, @Nullable String textureBlock, @NotNull Block host) {
         return registerFakeSlab(fullBlock, type, textureBlock, host, null);
     }
@@ -577,10 +817,35 @@ public class SuCraftBlocks {
         return registerFakeSlab(fullBlock, "polished_" + type, null, host).mineableWithPickaxe();
     }
 
-    private static @NotNull Block registerFakeBrickSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+    private static @NotNull Block registerFakeCustomBrickSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
         return registerFakeSlab(fullBlock, type + "_brick", null, host).mineableWithPickaxe();
     }
 
+    private static @NotNull Block registerFakeVanillaBrickSlab(@NotNull Block fullBlock, @NotNull String type, @NotNull Block host) {
+        return registerFakeSlab(fullBlock, type + "_brick", type + "_bricks", host).mineableWithPickaxe();
+    }
+
+    private static @NotNull Block registerFakeSandstoneBrickSlab(@NotNull Block fullBlock, @Nullable String type, @NotNull Block host) {
+        return registerFakeCustomBrickSlab(fullBlock, (type == null ? "" : type + "_") + "sandstone", host);
+    }
+
+    private static @NotNull Block registerFakeRawMetalSlab(@NotNull Block fullBlock, @Nullable String type, @NotNull Block host) {
+        return registerFakeSlab(fullBlock, "raw_" + type, "raw_" + type + "_block", host).mineableWithPickaxe();
+    }
+
+    private static @NotNull Block registerPeat(@NotNull String type) {
+        return register(
+            (type == null ? "" : type + "_") + "peat",
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
+                .withNoteBlockHost()
+                .withFallback(Blocks.COARSE_DIRT)
+                .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
+                .withFullBlockBoundingBoxItem(),
+            new Block(BlockBehaviour.Properties.of(Material.DIRT, MaterialColor.DIRT).strength(1.0F, 2.0F).sound(SoundType.GRAVEL)).breakBeforeClientKnowsToBreak().mineableWithShovel(),
+            SuCraftBlockLoot::dropSelf
+        );
+    }
+
     public static Block bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         return SNOWY_STONE_BRICKS;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
index c9302c950cb161831deba9970f4417a0a6531e9d..f39a72dd4ea3d472d788924be8b58714213dba47 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
@@ -320,7 +320,7 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
 //                    }).withNoParameters();
 //                }
                 case BOTTOM -> {
-                    return Model.creation(ModelContent.BottomSlab.creationCompanion.creation(finalTopHalfBottomTexture, sideTexture, finalTopHalfTopTexture)).withNoParameters();
+                    return Model.creation(ModelContent.BottomSlab.creationCompanion.creation(finalBottomHalfBottomTexture, sideTexture, finalBottomHalfTopTexture)).withNoParameters();
                 }
                 case DOUBLE -> {
                     return doubleSlabModelCreation.withNoParameters();
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 78e620dc158b0d8e8b0262f5459f9c860613ee72..f0548955eed8db28af1bbb416ad819517e77c3db 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -13,6 +13,7 @@ import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.block.Blocks;
 import nl.martijnmuijsers.paper.block.SuCraftBlocks;
 import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import org.jetbrains.annotations.NotNull;
@@ -76,21 +77,21 @@ public class SuCraftItems {
     /**
      * Based on {@link Items#SANDSTONE}
      */
-    public static final Item SOUL_SANDSTONE = registerBlock(SuCraftBlocks.SOUL_SANDSTONE, "Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SAND));
+    public static final Item SOUL_SANDSTONE = registerBlock(SuCraftBlocks.SOUL_SANDSTONE, "Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SOIL));
 
     public static final Item SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.SANDSTONE_BRICKS, "Sandstone", () -> Items.SANDSTONE);
     public static final Item RED_SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.RED_SANDSTONE_BRICKS, "Red Sandstone", () -> Items.RED_SANDSTONE);
-    public static final Item SOUL_SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.SOUL_SANDSTONE_BRICKS, "Soul Sandstone", () -> Items.SOUL_SAND);
+    public static final Item SOUL_SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.SOUL_SANDSTONE_BRICKS, "Soul Sandstone", () -> Items.SOUL_SOIL);
 
     /**
      * Based on {@link Items#CHISELED_SANDSTONE}
      */
-    public static final Item CHISELED_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CHISELED_SOUL_SANDSTONE, "Chiseled Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SAND));
+    public static final Item CHISELED_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CHISELED_SOUL_SANDSTONE, "Chiseled Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SOIL));
 
     /**
      * Based on {@link Items#CUT_SANDSTONE}
      */
-    public static final Item CUT_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CUT_SOUL_SANDSTONE, "Cut Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SAND));
+    public static final Item CUT_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CUT_SOUL_SANDSTONE, "Cut Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SOIL));
 
     public static final Item ANDESITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.ANDESITE_COBBLESTONE, "Andesite", () -> Items.ANDESITE);
     public static final Item DIORITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.DIORITE_COBBLESTONE, "Diorite", () -> Items.DIORITE);
@@ -223,6 +224,97 @@ public class SuCraftItems {
     public static final Item DRIPSTONE_PILLAR_SLAB = registerPillarSlab(SuCraftBlocks.DRIPSTONE_PILLAR_SLAB, "Dripstone");
     public static final Item GRANITE_PILLAR_SLAB = registerPillarSlab(SuCraftBlocks.GRANITE_PILLAR_SLAB, "Granite");
     public static final Item TUFF_PILLAR_SLAB = registerPillarSlab(SuCraftBlocks.TUFF_PILLAR_SLAB, "Tuff");
+    public static final Item SOUL_SANDSTONE_SLAB = registerSlab(SuCraftBlocks.SOUL_SANDSTONE_SLAB, "Soul Sandstone");
+    public static final Item SANDSTONE_BRICK_SLAB = registerSandstoneBrickSlab(SuCraftBlocks.SANDSTONE_BRICK_SLAB, null);
+    public static final Item RED_SANDSTONE_BRICK_SLAB = registerSandstoneBrickSlab(SuCraftBlocks.RED_SANDSTONE_BRICK_SLAB, "Red");
+    public static final Item SOUL_SANDSTONE_BRICK_SLAB = registerSandstoneBrickSlab(SuCraftBlocks.SOUL_SANDSTONE_BRICK_SLAB, "Soul");
+
+    /**
+     * Based on {@link Items#SMOOTH_SANDSTONE}
+     */
+    public static final Item SMOOTH_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.SMOOTH_SOUL_SANDSTONE, "Smooth Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.SOUL_SOIL));
+
+    public static final Item SMOOTH_SOUL_SANDSTONE_SLAB = registerSlab(SuCraftBlocks.SMOOTH_SOUL_SANDSTONE_SLAB, "Smooth Soul Sandstone");
+    public static final Item CUT_SOUL_SANDSTONE_SLAB = registerSlab(SuCraftBlocks.CUT_SOUL_SANDSTONE_SLAB, "Cut Soul Sandstone");
+    public static final Item GRAVEL_SLAB = registerSlab(SuCraftBlocks.GRAVEL_SLAB, "Gravel");
+    public static final Item NETHERRACK_SLAB = registerSlab(SuCraftBlocks.NETHERRACK_SLAB, "Netherrack");
+    public static final Item SOUL_SOIL_SLAB = registerSlab(SuCraftBlocks.SOUL_SOIL_SLAB, "Soul Soil");
+    public static final Item RAW_COPPER_SLAB = registerRawMetalSlab(SuCraftBlocks.RAW_COPPER_SLAB, "Copper");
+    public static final Item RAW_GOLD_SLAB = registerRawMetalSlab(SuCraftBlocks.RAW_GOLD_SLAB, "Gold");
+    public static final Item RAW_IRON_SLAB = registerRawMetalSlab(SuCraftBlocks.RAW_IRON_SLAB, "Iron");
+    public static final Item ANCIENT_DEBRIS_SLAB = registerSlab(SuCraftBlocks.ANCIENT_DEBRIS_SLAB, "Ancient Debris");
+    public static final Item DIRT_BRICK_SLAB = registerSlab(SuCraftBlocks.DIRT_BRICK_SLAB, "Dirt Brick");
+    public static final Item STONE_PILLAR = registerPillar(SuCraftBlocks.STONE_PILLAR, "Stone", () -> Items.STONE);
+    public static final Item STONE_PILLAR_SLAB = registerPillarSlab(SuCraftBlocks.STONE_PILLAR_SLAB, "Stone");
+    public static final Item OAK_LOG_SLAB = registerLogSlab(SuCraftBlocks.OAK_LOG_SLAB, "Oak");
+    public static final Item SPRUCE_LOG_SLAB = registerLogSlab(SuCraftBlocks.SPRUCE_LOG_SLAB, "Spruce");
+    public static final Item BIRCH_LOG_SLAB = registerLogSlab(SuCraftBlocks.BIRCH_LOG_SLAB, "Birch");
+    public static final Item JUNGLE_LOG_SLAB = registerLogSlab(SuCraftBlocks.JUNGLE_LOG_SLAB, "Jungle");
+    public static final Item ACACIA_LOG_SLAB = registerLogSlab(SuCraftBlocks.ACACIA_LOG_SLAB, "Acacia");
+    public static final Item DARK_OAK_LOG_SLAB = registerLogSlab(SuCraftBlocks.DARK_OAK_LOG_SLAB, "Dark Oak");
+    public static final Item WARPED_STEM_SLAB = registerStemSlab(SuCraftBlocks.WARPED_STEM_SLAB, "Warped");
+    public static final Item CRIMSON_STEM_SLAB = registerStemSlab(SuCraftBlocks.CRIMSON_STEM_SLAB, "Crimson");
+    public static final Item MANGROVE_LOG_SLAB = registerLogSlab(SuCraftBlocks.MANGROVE_LOG_SLAB, "Mangrove");
+    public static final Item STRIPPED_OAK_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_OAK_LOG_SLAB, "Oak");
+    public static final Item STRIPPED_SPRUCE_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_SPRUCE_LOG_SLAB, "Spruce");
+    public static final Item STRIPPED_BIRCH_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_BIRCH_LOG_SLAB, "Birch");
+    public static final Item STRIPPED_JUNGLE_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_JUNGLE_LOG_SLAB, "Jungle");
+    public static final Item STRIPPED_ACACIA_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_ACACIA_LOG_SLAB, "Acacia");
+    public static final Item STRIPPED_DARK_OAK_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_DARK_OAK_LOG_SLAB, "Dark Oak");
+    public static final Item STRIPPED_WARPED_STEM_SLAB = registerStrippedStemSlab(SuCraftBlocks.STRIPPED_WARPED_STEM_SLAB, "Warped");
+    public static final Item STRIPPED_CRIMSON_STEM_SLAB = registerStrippedStemSlab(SuCraftBlocks.STRIPPED_CRIMSON_STEM_SLAB, "Crimson");
+    public static final Item STRIPPED_MANGROVE_LOG_SLAB = registerStrippedLogSlab(SuCraftBlocks.STRIPPED_MANGROVE_LOG_SLAB, "Mangrove");
+    public static final Item OAK_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.OAK_WOOD_SLAB, "Oak");
+    public static final Item SPRUCE_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.SPRUCE_WOOD_SLAB, "Spruce");
+    public static final Item BIRCH_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.BIRCH_WOOD_SLAB, "Birch");
+    public static final Item JUNGLE_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.JUNGLE_WOOD_SLAB, "Jungle");
+    public static final Item ACACIA_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.ACACIA_WOOD_SLAB, "Acacia");
+    public static final Item DARK_OAK_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.DARK_OAK_WOOD_SLAB, "Dark Oak");
+    public static final Item WARPED_HYPHAE_SLAB = registerHyphaeSlab(SuCraftBlocks.WARPED_HYPHAE_SLAB, "Warped");
+    public static final Item CRIMSON_HYPHAE_SLAB = registerHyphaeSlab(SuCraftBlocks.CRIMSON_HYPHAE_SLAB, "Crimson");
+    public static final Item MANGROVE_WOOD_SLAB = registerWoodSlab(SuCraftBlocks.MANGROVE_WOOD_SLAB, "Mangrove");
+    public static final Item STRIPPED_OAK_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_OAK_WOOD_SLAB, "Oak");
+    public static final Item STRIPPED_SPRUCE_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_SPRUCE_WOOD_SLAB, "Spruce");
+    public static final Item STRIPPED_BIRCH_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_BIRCH_WOOD_SLAB, "Birch");
+    public static final Item STRIPPED_JUNGLE_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_JUNGLE_WOOD_SLAB, "Jungle");
+    public static final Item STRIPPED_ACACIA_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_ACACIA_WOOD_SLAB, "Acacia");
+    public static final Item STRIPPED_DARK_OAK_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_DARK_OAK_WOOD_SLAB, "Dark Oak");
+    public static final Item STRIPPED_WARPED_HYPHAE_SLAB = registerStrippedHyphaeSlab(SuCraftBlocks.STRIPPED_WARPED_HYPHAE_SLAB, "Warped");
+    public static final Item STRIPPED_CRIMSON_HYPHAE_SLAB = registerStrippedHyphaeSlab(SuCraftBlocks.STRIPPED_CRIMSON_HYPHAE_SLAB, "Crimson");
+    public static final Item STRIPPED_MANGROVE_WOOD_SLAB = registerStrippedWoodSlab(SuCraftBlocks.STRIPPED_MANGROVE_WOOD_SLAB, "Mangrove");
+    public static final Item BONE_SLAB = registerSlab(SuCraftBlocks.BONE_SLAB, "Bone");
+
+    /**
+     * Based on {@link Items#BONE_BLOCK}
+     */
+    public static final Item WITHER_BONE_BLOCK = registerBlock(SuCraftBlocks.WITHER_BONE_BLOCK, "Wither Bone Block", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.COAL_BLOCK));
+
+    public static final Item WITHER_BONE_SLAB = registerSlab(SuCraftBlocks.WITHER_BONE_SLAB, "Wither Bone");
+    public static final Item BASALT_SLAB = registerSlab(SuCraftBlocks.BASALT_SLAB, "Basalt");
+    public static final Item POLISHED_BASALT_SLAB = registerSlab(SuCraftBlocks.POLISHED_BASALT_SLAB, "Polished Basalt");
+    public static final Item SMOOTH_BASALT_SLAB = registerSlab(SuCraftBlocks.SMOOTH_BASALT_SLAB, "Smooth Basalt");
+
+    /**
+     * Based on {@link Items#COAL_BLOCK}
+     */
+    public static final Item CHARCOAL_BLOCK = registerBlock(SuCraftBlocks.CHARCOAL_BLOCK, "Charcoal Block", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.COAL_BLOCK));
+
+    public static final Item CHARCOAL_SLAB = registerSlab(SuCraftBlocks.CHARCOAL_SLAB, "Charcoal");
+
+    /**
+     * Based on {@link Items#LIGHT_GRAY_CONCRETE_POWDER}
+     */
+    public static final Item GUNPOWDER_BLOCK = registerBlock(SuCraftBlocks.GUNPOWDER_BLOCK, "Gunpowder Block", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.LIGHT_GRAY_CONCRETE_POWDER));
+
+    public static final Item GUNPOWDER_SLAB = registerSlab(SuCraftBlocks.GUNPOWDER_SLAB, "Gunpowder");
+    public static final Item PEAT = registerBlock(SuCraftBlocks.PEAT, "Peat", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.COARSE_DIRT));
+    public static final Item SMOULDERING_PEAT = registerBlock(SuCraftBlocks.SMOULDERING_PEAT, "Smouldering Peat", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.COARSE_DIRT));
+    public static final Item PEAT_SLAB = registerSlab(SuCraftBlocks.PEAT_SLAB, "Peat");
+    public static final Item SCULK_SLAB = registerSlab(SuCraftBlocks.SCULK_SLAB, "Sculk");
+    public static final Item CHISELED_QUARTZ_SLAB = registerSlab(SuCraftBlocks.CHISELED_QUARTZ_SLAB, "Chiseled Quartz");
+    public static final Item QUARTZ_PILLAR_SLAB = registerPillarSlab(SuCraftBlocks.QUARTZ_PILLAR_SLAB, "Quartz");
+    public static final Item QUARTZ_BRICK_SLAB = registerBrickSlab(SuCraftBlocks.QUARTZ_BRICK_SLAB, "Quartz");
+    public static final Item DRIED_KELP_SLAB = registerSlab(SuCraftBlocks.DRIED_KELP_SLAB, "Dried Kelp");
 
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
@@ -358,6 +450,46 @@ public class SuCraftItems {
         return registerSlab(block, typeDisplayName + " Pillar");
     }
 
+    private static @NotNull Item registerSandstoneBrickSlab(@NotNull Block block, @Nullable String typeDisplayName) {
+        return registerBrickSlab(block, (typeDisplayName == null ? "" : typeDisplayName + " ") + "Sandstone");
+    }
+
+    private static @NotNull Item registerRawMetalSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerSlab(block, "Raw " + typeDisplayName);
+    }
+
+    private static @NotNull Item registerLogSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerSlab(block, typeDisplayName + " Log");
+    }
+
+    private static @NotNull Item registerStemSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerSlab(block, typeDisplayName + " Stem");
+    }
+
+    private static @NotNull Item registerStrippedLogSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerLogSlab(block, "Stripped " + typeDisplayName);
+    }
+
+    private static @NotNull Item registerStrippedStemSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerStemSlab(block, "Stripped " + typeDisplayName);
+    }
+
+    private static @NotNull Item registerWoodSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerSlab(block, typeDisplayName + " Wood");
+    }
+
+    private static @NotNull Item registerHyphaeSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerSlab(block, typeDisplayName + " Hyphae");
+    }
+
+    private static @NotNull Item registerStrippedWoodSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerWoodSlab(block, "Stripped " + typeDisplayName);
+    }
+
+    private static @NotNull Item registerStrippedHyphaeSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerHyphaeSlab(block, "Stripped " + typeDisplayName);
+    }
+
     public static Item bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         // Make sure that the item replacement rule for block items for which the block has some hosts that are potentially placed by vanilla items is registered with those vanilla items
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java
index 41a361d656b3fb8b7393830a54bdba8fbcc069f3..ccbb0e127dbc4e684190f986193af73131d1e6f9 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java
@@ -15,6 +15,14 @@ public record NamespacedKeyWithIntention(@NotNull String namespace, @Nullable Re
         return this.intention == null ? this.keyWithoutIntention : this.intention.prefix + "/" + this.keyWithoutIntention;
     }
 
+    public @NotNull NamespacedKeyWithIntention withKeySuffix(@NotNull String suffix) {
+        return new NamespacedKeyWithIntention(namespace, intention, keyWithoutIntention + suffix);
+    }
+
+    public @NotNull NamespacedKeyWithIntention withKeyPrefix(@NotNull String prefix) {
+        return new NamespacedKeyWithIntention(namespace, intention, prefix + keyWithoutIntention);
+    }
+
     @Override
     public @NotNull String toString() {
         return this.namespace + ":" + this.keyWithIntention();
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
index 2099cee212fcc73c6446dc58c79fc0ce18f00f23..d206f4b2cab32de78fb2974dc6974ad90f127f7b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
@@ -19,6 +19,14 @@ public record NamespacedKeyWithoutIntention(@NotNull String namespace, @NotNull
         return new NamespacedKeyWithIntention(namespace, null, keyWithoutIntention);
     }
 
+    public @NotNull NamespacedKeyWithoutIntention withKeySuffix(@NotNull String suffix) {
+        return new NamespacedKeyWithoutIntention(namespace, keyWithoutIntention + suffix);
+    }
+
+    public @NotNull NamespacedKeyWithoutIntention withKeyPrefix(@NotNull String prefix) {
+        return new NamespacedKeyWithoutIntention(namespace, prefix + keyWithoutIntention);
+    }
+
     @Override
     public @NotNull String toString() {
         return this.namespace + ":" + this.keyWithoutIntention();
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 219f7d3c23854324056d23244d5cc98516b3e1a1..e1bd6cbe70e2fd063aea9078cd3374a50e68bd55 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 117;
+    private static final int currentResourcePackVersion = 134;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
