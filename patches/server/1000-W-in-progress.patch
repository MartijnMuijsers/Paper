From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 29 Jun 2022 21:12:42 +0200
Subject: [PATCH] W in progress


diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index b8cd7177d82c08604bc3654cc2098e78484551d2..092f99ab1f169932f8bfe8a629a131fb97438a58 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -6,6 +6,8 @@ import java.util.Collections;
 import java.util.Map;
 import java.util.Optional;
 import net.minecraft.core.Registry;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
 
 public class ResourceKey<T> {
 
@@ -56,6 +58,14 @@ public class ResourceKey<T> {
         return this.location;
     }
 
+    // Martijn start - custom resources
+
+    public @NotNull NamespacedKey asBukkit() {
+        return location().asBukkit();
+    }
+
+    // Martijn end - custom resources
+
     public ResourceLocation registry() {
         return this.registryName;
     }
diff --git a/src/main/java/net/minecraft/resources/ResourceLocation.java b/src/main/java/net/minecraft/resources/ResourceLocation.java
index bb92ba63e91a637b18154a154672acc413acf5ca..a4d569e63b5caf2dd7e04597588a3ee7a48a5534 100644
--- a/src/main/java/net/minecraft/resources/ResourceLocation.java
+++ b/src/main/java/net/minecraft/resources/ResourceLocation.java
@@ -18,6 +18,8 @@ import net.minecraft.ResourceLocationException;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.GsonHelper;
 import org.apache.commons.lang3.StringUtils;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
 
 public class ResourceLocation implements Comparable<ResourceLocation> {
     public static final Codec<ResourceLocation> CODEC = Codec.STRING.comapFlatMap(ResourceLocation::read, ResourceLocation::toString).stable();
@@ -53,6 +55,10 @@ public class ResourceLocation implements Comparable<ResourceLocation> {
         return new ResourceLocation(SUCRAFT_NAMESPACE, id);
     }
 
+    public @NotNull NamespacedKey asBukkit() {
+        return new NamespacedKey(this.namespace, this.path);
+    }
+
     // Martijn end - custom resources
 
     public static ResourceLocation of(String id, char delimiter) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
index 0dd5bb5c8565c1f3c0fbc46770ad6eb05eabe06f..7febcb64b8d335e8219e4c196792cbe48dac1f92 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
@@ -2,10 +2,17 @@
 
 package nl.martijnmuijsers.paper.block;
 
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
+import nl.martijnmuijsers.paper.resourcepack.PathConstants;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.NamespacedKey;
 import org.checkerframework.checker.units.qual.N;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -30,8 +37,12 @@ public interface BlockReplacementRule {
 
     @Nullable Item getFallbackItem();
 
+    @Nullable BlockModel getModelForStatePlacedByItem();
+
     void writeToStateIdReplacementArrays();
 
+    void addToResourcePack(@NotNull MemoryResourcePack resourcePack);
+
     default void updateMinDestroyTimes() {
         updateMinDestroyTimeOfReal(); // Some will see it as the host, others as the fallback
         updateMinDestroyTimeOfHost(); // Some may see it as the host replacement
@@ -59,6 +70,7 @@ public interface BlockReplacementRule {
             private @Nullable BlockState hostReplacement;
             private @Nullable BlockState fallback;
             private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
+            private @Nullable BlockModel model;
 
             @Override
             public @NotNull StatelessBlockReplacementRule.Builder withReal(@NotNull Block real) {
@@ -108,13 +120,19 @@ public interface BlockReplacementRule {
                 return this.withFallbackItem(() -> this.fallback.getBlock().asItem());
             }
 
+            public @NotNull StatelessBlockReplacementRule.Builder withModel(@NotNull BlockModel model) {
+                this.model = model;
+                return this;
+            }
+
             @Override
             public @NotNull StatelessBlockReplacementRule build() {
                 Validate.notNull(this.real);
                 Validate.notNull(this.host);
                 Validate.notNull(this.hostReplacement);
                 Validate.notNull(this.fallback);
-                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.fallback, fallbackItemSupplier);
+                Validate.notNull(this.model);
+                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.fallback, this.fallbackItemSupplier, this.model);
             }
 
         }
@@ -130,6 +148,8 @@ public interface BlockReplacementRule {
          */
         private @Nullable Item fallbackItem = null;
 
+        private final @NotNull BlockModel model;
+
         /**
          * This is used to get the fallback item the first time it is needed: this is to ensure no calls to the Items class are made before the blocks have finished initializing, otherwise we cannot refer to the blocks when we wish to create items for them
          *
@@ -173,6 +193,11 @@ public interface BlockReplacementRule {
             return this.fallbackItem;
         }
 
+        @Override
+        public @Nullable BlockModel getModelForStatePlacedByItem() {
+            return this.model;
+        }
+
         @Override
         public void updateMinDestroyTimeOfHost() {
             this.host.getBlock().properties.destroyTime(this.getMinDestroyTimeOfHostAndHostReplacement());
@@ -205,6 +230,20 @@ public interface BlockReplacementRule {
             Block.stateIdReplacementArrayWithoutResourcePack[realId] = fallbackId;
         }
 
+        @Override
+        public void addToResourcePack(@NotNull MemoryResourcePack resourcePack) {
+            @NotNull NamespacedKey hostKey = Registry.BLOCK.getResourceKey(this.host.getBlock()).get().asBukkit();
+            @NotNull NamespacedKey realKey =  Registry.BLOCK.getResourceKey(this.real).get().asBukkit();
+            @NotNull NamespacedKey realBlockKey = PathConstants.getBlockModel(realKey);
+            @NotNull ResourcePackBlockStates minecraftBlockStates = resourcePack.getAsset(ResourcePackAssetType.BLOCK_STATES, hostKey);
+            minecraftBlockStates.setNoVariantModel(realBlockKey);
+            @NotNull ResourcePackBlockModel blockModel = resourcePack.getAsset(ResourcePackAssetType.BLOCK_MODEL, realBlockKey);
+            blockModel.set(this.model);
+            this.model.addToResourcePack(resourcePack);
+            //TODO
+            return null;
+        }
+
     }
 
     // Blocks with item form
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index adeb08b1302798643b55b4f5ab5ed187de0f203b..59d22a886fe25660fb8655002a340df8da6eea10 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -10,6 +10,7 @@ import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.block.BlockReplacementRule;
+import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
@@ -33,6 +34,10 @@ public interface ItemReplacementRule {
 
     @NotNull Item getReal();
 
+    @NotNull ItemModel getModel();
+
+    void addToResourcePack(@NotNull MemoryResourcePack resourcePack);
+
     class SimpleItemReplacementRule implements ItemReplacementRule {
 
         public static class Builder implements ItemReplacementRule.Builder {
@@ -41,6 +46,7 @@ public interface ItemReplacementRule {
             private @Nullable Supplier<@NotNull Item> hostSupplier;
             private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
             private @Nullable Supplier<@NotNull Item> fallbackSupplier;
+            private @Nullable ItemModel model;
 
             @Override
             public @NotNull SimpleItemReplacementRule.Builder withReal(@NotNull Item real) {
@@ -68,11 +74,17 @@ public interface ItemReplacementRule {
                 return this;
             }
 
+            public @NotNull SimpleItemReplacementRule.Builder withModel(@NotNull ItemModel model) {
+                this.model = model;
+                return this;
+            }
+
             public @NotNull SimpleItemReplacementRule.Builder forBlock(@NotNull Block block) {
                 return this
                     .withHost(() -> Items.BARRIER)
                     .withNextUnusedHostCustomModelData()
-                    .withFallback(() -> block.replacementRule.getFallbackItem());
+                    .withFallback(() -> block.replacementRule.getFallbackItem())
+                    .withModel(block.replacementRule.getModelForStatePlacedByItem().asItemModel());
             }
 
             @Override
@@ -81,7 +93,8 @@ public interface ItemReplacementRule {
                 Validate.notNull(this.hostSupplier);
                 Validate.notNull(this.computeHostCustomModelData);
                 Validate.notNull(this.fallbackSupplier);
-                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier);
+                Validate.notNull(this.model);
+                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier, this.model);
             }
 
         }
@@ -93,12 +106,14 @@ public interface ItemReplacementRule {
         private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
         private @Nullable Item fallback = null;
         private @Nullable Supplier<@NotNull Item> fallbackSupplier;
+        private @NotNull ItemModel model;
 
-        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier) {
+        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull ItemModel model) {
             this.real = real;
             this.hostSupplier = hostSupplier;
             this.computeHostCustomModelData = computeHostCustomModelData;
             this.fallbackSupplier = fallbackSupplier;
+            this.model = model;
         }
 
         @Override
@@ -154,6 +169,12 @@ public interface ItemReplacementRule {
             return this.fallback;
         }
 
+        @Override
+        public void addToResourcePack(@NotNull MemoryResourcePack resourcePack) {
+            //TODO
+            return null;
+        }
+
     }
 
     static @NotNull SimpleItemReplacementRule.Builder simple() {
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
new file mode 100644
index 0000000000000000000000000000000000000000..ace0ae80ea5ee8c280b128c1724bd8a9637f3717
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
@@ -0,0 +1,21 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Concrete implementation of {@link MutableResourcePackBlockStates}
+ */
+public class ConcreteResourcePackBlockStates extends JsonResourcePackAsset<ConcreteResourcePackBlockStates> implements MutableResourcePackBlockStates {
+
+    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull String namespace, @NotNull String key) {
+        super(ConcreteResourcePackBlockStates::new, json, namespace, key);
+    }
+
+    public ConcreteResourcePackBlockStates(@NotNull ResourcePackBlockStates reference) {
+        this(reference.getJson().deepCopy(), reference.getNamespace(), reference.getKey());
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
new file mode 100644
index 0000000000000000000000000000000000000000..f698967df5518819a4657e1c695e37845a9be201
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
@@ -0,0 +1,16 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A {@link ResourcePackAssetType} that can be initialized to some empty state
+ */
+public class InitializableResourcePackAssetType<T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> extends ResourcePackAssetType<T, MT> {
+
+    protected InitializableResourcePackAssetType(@NotNull String folderName) {
+        super(folderName);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonMerging.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonMerging.java
new file mode 100644
index 0000000000000000000000000000000000000000..05902f4a2a87c2a4f67992db7e8fe58ccb19bdd7
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonMerging.java
@@ -0,0 +1,19 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Utility class to merge JSON data, with the first provided instance taking precedent over the second one when any conflict arises
+ */
+public final class JsonMerging {
+
+    private JsonMerging() {}
+
+    public static @NotNull JsonObject merge(@NotNull JsonObject json1, @NotNull JsonObject json2) {
+
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..056a472e22f9f6446e4b803c7321445c9da937f2
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
@@ -0,0 +1,33 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Base implementation of {@link MutableResourcePackAsset} for JSON assets
+ */
+public abstract class JsonResourcePackAsset<T extends JsonResourcePackAsset<T>> extends SimpleResourcePackAsset<T> {
+
+    protected interface JsonResourcePackAssetConstructor<T extends JsonResourcePackAsset<T>> {
+
+        @NotNull T construct(@NotNull JsonObject json, @NotNull String namespace, @NotNull String key);
+
+    }
+
+    private final @NotNull JsonResourcePackAssetConstructor<T> constructor;
+    protected final @NotNull JsonObject json;
+
+    protected JsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T> constructor, @NotNull JsonObject json, @NotNull String namespace, @NotNull String key) {
+        super(namespace, key);
+        this.constructor = constructor;
+        this.json = json;
+    }
+
+    @Override
+    public @NotNull T mergeToMutable(@NotNull T other) {
+        return this.constructor.construct(JsonMerging.merge(this.json, other.json), this.getNamespace(), this.getKey());
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b302087d440fe012e2ec6d75da58bed0b1554d0
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
@@ -0,0 +1,24 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A utility class providing the keys of JSON elements in the resource pack format
+ */
+public final class KeyConstants {
+
+    private KeyConstants() {}
+
+    /**
+     * The key for the global pack instance in pack.mcmeta
+     */
+    public static final @NotNull String pack = "pack";
+
+    /**
+     * The description of a resource pack
+     */
+    public static final @NotNull String packDescription = "description";
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8fd6c2dd80d6ba1550efdd3e5dd8b34d8363e26
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
@@ -0,0 +1,47 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonObject;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A mutable {@link ResourcePack}
+ */
+public interface MutableResourcePack extends ResourcePack {
+
+    @NotNull ResourcePackSettings getSettings();
+
+    @Override
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException {
+        //noinspection unchecked
+        return (T) this.getMutableAsset(type, namespace, key);
+    }
+
+    <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException;
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable MT getOptionalMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) {
+        try {
+            return this.getMutableAsset(type, namespace, key);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException;
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+        return this.getMutableAsset(type, key.getNamespace(), key.getKey());
+    }
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable MT getOptionalMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) {
+        return this.getOptionalMutableAsset(type, key.getNamespace(), key.getKey());
+    }
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+        return this.getOrCreateAsset(type, key.getNamespace(), key.getKey());
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..79e97f62e3e15c7d0f38d5d560d0d6c0bf236d0e
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
@@ -0,0 +1,25 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A mutable {@link ResourcePackAsset}
+ */
+public interface MutableResourcePackAsset<T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> extends ResourcePackAsset<T> {
+
+    @Override
+    default @NotNull T merge(@NotNull T other) {
+        //noinspection unchecked
+        return (T) mergeToMutable(other);
+    }
+
+    /**
+     * Gets the result of merging this asset with the given one
+     * <br>
+     * In any conflicts, this asset will take precedence over the given one
+     */
+    @NotNull MT mergeToMutable(@NotNull T other);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b665378bb8be1106ba3282edf5daff1bb16e910
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
@@ -0,0 +1,8 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+/**
+ * A mutable {@link ResourcePackBlockStates}
+ */
+public interface MutableResourcePackBlockStates extends MutableResourcePackAsset<ResourcePackBlockStates, MutableResourcePackBlockStates>, ResourcePackBlockStates {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
new file mode 100644
index 0000000000000000000000000000000000000000..2430507485d55e6ce404bc92dc840aa9a9f65bd7
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
@@ -0,0 +1,74 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import net.minecraft.resources.ResourceLocation;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A utility class providing the paths of files in the resource pack format
+ */
+public final class PathConstants {
+
+    private PathConstants() {}
+
+    /**
+     * The pack.mcmeta file
+     */
+    public static final class PackMeta {
+
+        public static final @NotNull String name = "pack.mcmeta";
+        public static final @NotNull String path = name;
+
+    }
+
+    /**
+     * The blockstates folder
+     */
+    public static final class BlockStates {
+
+        public static final @NotNull String name = "blockstates";
+        public static final @NotNull String path = name;
+
+    }
+
+    /**
+     * The models folder
+     */
+    public static final class Models {
+
+        public static final @NotNull String name = "models";
+        public static final @NotNull String path = name;
+
+        /**
+         * The block models folder
+         */
+        public static final class Block {
+
+            public static final @NotNull String name = "block";
+            public static final @NotNull String path = Models.path + "/" + name;
+
+        }
+
+        /**
+         * The item models folder
+         */
+        public static final class Item {
+
+            public static final @NotNull String name = "item";
+            public static final @NotNull String path = Models.path + "/" + name;
+
+        }
+
+    }
+
+    public static @NotNull NamespacedKey getBlockModel(@NotNull NamespacedKey block) {
+        return new NamespacedKey(block.getNamespace(), Models.Block.name + "/" + block.getKey());
+    }
+
+    public static @NotNull NamespacedKey getItemModel(@NotNull NamespacedKey item) {
+        return new NamespacedKey(item.getNamespace(), Models.Item.name + "/" + item.getKey());
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..392860791bfa139630905a8a1109ccefea33968c
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
@@ -0,0 +1,34 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * An interface that provides getters to get things out of an existing resource pack, for example one defined by an archive filename, or one currently being built in memory.
+ */
+public interface ResourcePack {
+
+    @NotNull ResourcePackSettings getSettings();
+
+    <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException;
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) {
+        try {
+            return this.getAsset(type, namespace, key);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull T getAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+        return this.getAsset(type, key.getNamespace(), key.getKey());
+    }
+
+    default <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull NamespacedKey key) {
+      return this.getOptionalAsset(type, key.getNamespace(), key.getKey());
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..e6e5bdcb012e8a415dddd71b6395ba7120a747f6
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
@@ -0,0 +1,26 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * An asset (element of some asset type) in a {@link ResourcePack}
+ */
+public interface ResourcePackAsset<T extends ResourcePackAsset<T>> {
+
+    @NotNull String getNamespace();
+
+    /**
+     * This is the part of the key without the namespace
+     */
+    @NotNull String getKey();
+
+    /**
+     * Gets the result of merging this asset with the given one
+     * <br>
+     * In any conflicts, this asset will take precedence over the given one
+     */
+    @NotNull T merge(@NotNull T other);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
new file mode 100644
index 0000000000000000000000000000000000000000..500b0946fe5da97956712e118e14214681ee78e8
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
@@ -0,0 +1,24 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A type of {@link ResourcePackAsset}
+ */
+public class ResourcePackAssetType<T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> {
+
+    public static final @NotNull ResourcePackAssetType<ResourcePackBlockStates, MutableResourcePackBlockStates> BLOCK_STATES = new InitializableResourcePackAssetType<>(PathConstants.blockStates);
+
+    private final @NotNull String folderName;
+
+    protected ResourcePackAssetType(@NotNull String folderName) {
+        this.folderName = folderName;
+    }
+
+    public @NotNull String getFolderName() {
+        return this.folderName;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
new file mode 100644
index 0000000000000000000000000000000000000000..9237b48ac30d10c2657b7e23a0712dde0dc16643
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
@@ -0,0 +1,8 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+/**
+ * An element of 'blockstates' in a {@link ResourcePack}
+ */
+public interface ResourcePackBlockStates extends ResourcePackAsset<ResourcePackBlockStates> {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..35e37144d853f3e65513c608d7acad52c799b2b9
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java
@@ -0,0 +1,15 @@
+package nl.martijnmuijsers.paper.resourcepack;
+
+import com.google.gson.JsonElement;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The top-level settings of a {@link ResourcePack}
+ */
+public interface ResourcePackSettings {
+
+    @NotNull String getName();
+
+    @NotNull JsonElement getDescription();
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..7ae87bc9b430d820a3657861158c6e94a2d0f80b
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
@@ -0,0 +1,30 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Base implementation of {@link MutableResourcePackAsset}
+ */
+public abstract class SimpleResourcePackAsset<T extends SimpleResourcePackAsset<T>> implements MutableResourcePackAsset<T, T> {
+
+    private final @NotNull String namespace;
+    private final @NotNull String key;
+
+    protected SimpleResourcePackAsset(@NotNull String namespace, @NotNull String key) {
+        this.namespace = namespace;
+        this.key = key;
+    }
+
+    @Override
+    public @NotNull String getNamespace() {
+        return this.namespace;
+    }
+
+    @Override
+    public @NotNull String getKey() {
+        return this.key;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..94ad976fe4a49e40f685661edc2cac76edfdec08
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
@@ -0,0 +1,140 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.memory;
+
+import com.google.common.collect.ImmutableList;
+import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.InitializableResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackBlockStates;
+import org.apache.commons.lang3.tuple.ImmutableTriple;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * A resource pack available in memory. Can be written to a file. May be backed by a default resource pack (such as the Minecraft default resource pack), and may be based on (and always fully include) a list of other resource packs.
+ */
+public class MemoryResourcePack implements MutableResourcePack {
+
+    /**
+     * The resource pack to pull defaults from (that will be included in this resource pack only if they are modified)
+     * <br>
+     * The resource packs with the lowest index are polled for the requested asset first
+     */
+    private final @NotNull List<@NotNull ResourcePack> defaultResourcePacks = new ArrayList<>();
+
+    /**
+     * The resource pack to inherit values from, that will be always be included in this resource pack
+     * <br>
+     * On a merge conflict, the resource pack with the lowest index determines the used value
+     * (of course, unless also overwritten by this resource pack itself, in which case that value becomes the used value)
+     */
+    private final @NotNull List<@NotNull ResourcePack> includedResourcePacks = new ArrayList<>();
+
+    private final @NotNull MemoryResourcePackSettings settings = new MemoryResourcePackSettings(this);
+
+    private final @NotNull Map<@NotNull ImmutableTriple<@NotNull ResourcePackAssetType<?, ?>, @NotNull String, @NotNull String>, @NotNull ResourcePackAsset<?>> assets = new HashMap<>(0);
+
+    public MemoryResourcePack() {}
+
+    public @NotNull List<@NotNull ResourcePack> getDefaultResourcePacks() {
+        return ImmutableList.copyOf(this.defaultResourcePacks);
+    }
+
+    public void addDefaultResourcePack(@NotNull ResourcePack resourcePack) {
+        if (!this.defaultResourcePacks.contains(resourcePack)) {
+            this.defaultResourcePacks.add(resourcePack);
+        }
+    }
+
+    public @NotNull List<@NotNull ResourcePack> getIncludedResourcePacks() {
+        return ImmutableList.copyOf(this.includedResourcePacks);
+    }
+
+    public void addIncludedResourcePack(@NotNull ResourcePack resourcePack) {
+        if (!this.includedResourcePacks.contains(resourcePack)) {
+            this.includedResourcePacks.add(resourcePack);
+        }
+    }
+
+    @Override
+    public @NotNull MemoryResourcePackSettings getSettings() {
+        return this.settings;
+    }
+
+    private <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT copyToMutable(@NotNull ResourcePackAssetType<T, MT> type, @NotNull T asset) {
+        if (type.equals(ResourcePackAssetType.BLOCK_STATES)) {
+            if (asset instanceof ConcreteResourcePackBlockStates) {
+                //noinspection unchecked
+                return (MT) asset;
+            }
+            //noinspection unchecked
+            return (MT) new ConcreteResourcePackBlockStates((ResourcePackBlockStates) asset);
+        } else {
+            throw new IllegalArgumentException("Attempted to create mutable asset for memory resource pack by cloning a given asset, but the type (" + type.getFolderName() + ") is not a known copiable type");
+        }
+    }
+
+    @Override
+    public <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getMutableAsset(@NotNull ResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException {
+        @SuppressWarnings("unchecked")
+        @Nullable MT foundOrDerivedAsset = (MT) this.assets.computeIfAbsent(new ImmutableTriple<>(type, namespace, key), namespacedKey -> {
+            // Try creating a merged asset from the included resource packs
+            @Nullable MT derivedAsset = null;
+            for (@NotNull ResourcePack includedResourcePack : this.getIncludedResourcePacks()) {
+                @Nullable T includedAsset = includedResourcePack.getOptionalAsset(type, namespace, key);
+                if (includedAsset != null) {
+                    if (derivedAsset == null) {
+                        derivedAsset = this.copyToMutable(type, includedAsset);
+                    } else {
+                        derivedAsset = derivedAsset.mergeToMutable(includedAsset);
+                    }
+                }
+            }
+            if (derivedAsset != null) {
+                return derivedAsset;
+            }
+            // Try finding the default form of the asset in the default resource packs
+            for (@NotNull ResourcePack defaultResourcePack : this.getDefaultResourcePacks()) {
+                @Nullable T defaultAsset = defaultResourcePack.getOptionalAsset(type, namespace, key);
+                if (defaultAsset != null) {
+                    return this.copyToMutable(type, defaultAsset);
+                }
+            }
+            // We can't initially derive this asset from any inherited resource packs
+            return null;
+        });
+        if (foundOrDerivedAsset != null) {
+            return foundOrDerivedAsset;
+        }
+        throw new IllegalArgumentException("Attempted to load required asset from memory resource pack, but none was already created or present in inherited resource packs");
+    }
+
+    @Override
+    public <T extends ResourcePackAsset<T>, MT extends MutableResourcePackAsset<T, MT>> @NotNull MT getOrCreateAsset(InitializableResourcePackAssetType<T, MT> type, @NotNull String namespace, @NotNull String key) throws IllegalArgumentException {
+        @Nullable MT existingAsset = getOptionalMutableAsset(type, namespace, key);
+        if (existingAsset != null) {
+            return existingAsset;
+        }
+        @NotNull MT newAsset;
+        if (type.equals(ResourcePackAssetType.BLOCK_STATES)) {
+            //noinspection unchecked
+            newAsset = (MT) new ConcreteResourcePackBlockStates(new JsonObject(), namespace, key);
+        } else {
+            throw new IllegalArgumentException("Attempted to create asset for memory resource pack, but the type (" + type.getFolderName() + ") is not a known initializable type");
+        }
+        this.assets.put(new ImmutableTriple<>(type, namespace, key), newAsset);
+        return newAsset;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePackSettings.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePackSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..504f1da6c1018950ef154b461c5e1e6abfa38603
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePackSettings.java
@@ -0,0 +1,80 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.memory;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackSettings;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.List;
+
+/**
+ * The top-level settings of a {@link MemoryResourcePack}
+ */
+public class MemoryResourcePackSettings implements ResourcePackSettings {
+
+    private static final @NotNull String DEFAULT_NAME = "Resource pack";
+    private static final @NotNull JsonElement DEFAULT_DESCRIPTION = JsonParser.parseString("[\"A resource pack\"]");
+
+    private final @NotNull MemoryResourcePack pack;
+
+    /**
+     * The name of the resource pack, which is not defined within the resource pack anywhere, but is defined by its filename without the extension
+     * <br>
+     * Note: because the filename of downloaded server resource packs is changed, this value is not relevant for resource packs used as a server resource pack
+     */
+    private @Nullable String name;
+
+    /**
+     * The description of the resource pack, displayed in the resource pack GUI
+     */
+    private @Nullable JsonElement description;
+
+    MemoryResourcePackSettings(@NotNull MemoryResourcePack pack) {
+        this.pack = pack;
+    }
+
+    @Override
+    public @NotNull String getName() {
+        if (this.name == null) {
+            // Get the name from the first included resource pack
+            List<@NotNull ResourcePack> includedResourcePacks = this.pack.getDefaultResourcePacks();
+            if (!includedResourcePacks.isEmpty()) {
+                this.name = includedResourcePacks.get(0).getSettings().getName();
+            }
+            if (this.name == null) {
+                // Use the default name
+                this.name = DEFAULT_NAME;
+            }
+        }
+        return this.name;
+    }
+
+    public void setName(@NotNull String name) {
+        this.name = name;
+    }
+
+    @Override
+    public @NotNull JsonElement getDescription() {
+        if (this.description == null) {
+            // Get the description from the first included resource pack
+            List<@NotNull ResourcePack> includedResourcePacks = this.pack.getDefaultResourcePacks();
+            if (!includedResourcePacks.isEmpty()) {
+                this.description = includedResourcePacks.get(0).getSettings().getDescription();
+            }
+            if (this.description == null) {
+                // Use the default description
+                this.description = DEFAULT_DESCRIPTION;
+            }
+        }
+        return this.description;
+    }
+
+    public void setDescription(@NotNull JsonElement description) {
+        this.description = description;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/BlockModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/BlockModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..fbaef52623e18b214d27f69a476396383e823666
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/BlockModel.java
@@ -0,0 +1,5 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+public interface BlockModel extends Model, UnnamedBlockModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ItemModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ItemModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..fef2209b78f82bb5329ad568bca85e41e4e41c4e
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ItemModel.java
@@ -0,0 +1,7 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+import nl.martijnmuijsers.paper.resourcepack.model.Model;
+
+public interface ItemModel extends Model, UnnamedItemModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
new file mode 100644
index 0000000000000000000000000000000000000000..2c3bf5c8262e8b52f2121ff0ea59d76a53bb1e39
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
@@ -0,0 +1,16 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A named {@link UnnamedModel}
+ */
+public interface Model extends UnnamedModel {
+
+    public @NotNull String getNamespace();
+
+    public @NotNull String getKey();
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
new file mode 100644
index 0000000000000000000000000000000000000000..be61e2b967913e738999a5c08997a1f122930092
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
@@ -0,0 +1,10 @@
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+/**
+ * A type of model: either for blocks or items
+ */
+public enum ModelType {
+
+
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedBlockModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedBlockModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..3665936eb3f2efde37c8e48ded2ba4111c78c260
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedBlockModel.java
@@ -0,0 +1,8 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+/**
+ * A model for a block, but only the content (not a name to reference it by in a resource pack)
+ */
+public interface UnnamedBlockModel extends UnnamedModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedItemModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedItemModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ad6f03cadf13b7896ac4251dd42b3d53b0c24d7
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedItemModel.java
@@ -0,0 +1,8 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+/**
+ * A model for a block, but only the content (not a name to reference it by in a resource pack)
+ */
+public interface UnnamedItemModel extends UnnamedModel {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedModel.java
new file mode 100644
index 0000000000000000000000000000000000000000..f3713c59042027714e632a1cf44a3ad239e3ba4f
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/UnnamedModel.java
@@ -0,0 +1,12 @@
+package nl.martijnmuijsers.paper.resourcepack.model;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A model for a block or item, but only the content (not a name to reference it by in a resource pack)
+ */
+public interface UnnamedModel {
+
+    @NotNull ModelType getType();
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf987810d6eed987f17fb43f401c5dc12897efde
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
@@ -0,0 +1,87 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.readfromarchive;
+
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.nio.file.Path;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+/**
+ * Implementation of {@link ResourcePack} based on existing ZIP archive file
+ */
+public class ReadFromArchiveResourcePack implements ResourcePack, Closeable {
+
+    private final @NotNull Path path;
+
+    private @Nullable ZipFile zipFile;
+
+    private final ReadFromArchiveResourcePackSettings settings = new ReadFromArchiveResourcePackSettings(this);
+
+    public ReadFromArchiveResourcePack(@NotNull Path path) {
+        this.path = path;
+    }
+
+    public ReadFromArchiveResourcePack(@NotNull String path) {
+        this(Path.of(path));
+    }
+
+    @NotNull Path getPath() {
+        return this.path;
+    }
+
+    private @NotNull ZipFile getZipFile() throws IOException {
+        if (this.zipFile == null) {
+            this.zipFile = new ZipFile(this.path.toFile());
+        }
+        return this.zipFile;
+    }
+
+    public void close() throws IOException {
+        if (this.zipFile != null) {
+            this.zipFile.close();
+            this.zipFile = null;
+        }
+    }
+
+    private @NotNull ZipEntry getZipFileEntry(@NotNull String path) throws IOException, NullPointerException {
+        return Validate.notNull(this.getZipFile().getEntry(path));
+    }
+
+    private @NotNull InputStream getZipFileEntryInputStream(@NotNull String path) throws IOException, NullPointerException {
+        return Validate.notNull(this.getZipFile().getInputStream(this.getZipFileEntry(path)));
+    }
+
+    @NotNull JsonObject readJsonAsset(@NotNull String path) throws IllegalArgumentException {
+        try {
+            @NotNull InputStream inputStream = this.getZipFileEntryInputStream(path);
+            return Validate.notNull(JsonParser.parseReader(new InputStreamReader(inputStream)).getAsJsonObject());
+        } catch (Exception e) {
+            throw new IllegalArgumentException("Attempted to load required JSON asset at internal path '" + path + "' from resource pack with path '" + this.path + "' but it did not exist", e);
+        }
+    }
+
+    @Nullable JsonObject readOptionalJsonAsset(@NotNull String path) {
+        try {
+            return readJsonAsset(path);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    @Override
+    public @NotNull ReadFromArchiveResourcePackSettings getSettings() {
+        return this.settings;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java
new file mode 100644
index 0000000000000000000000000000000000000000..f31ea37ff1ea0d69996d32d24304194cf9af9f4a
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePackSettings.java
@@ -0,0 +1,69 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.readfromarchive;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
+import nl.martijnmuijsers.paper.resourcepack.PathConstants;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePackSettings;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Implementation of {@link ResourcePackSettings} for a {@link ReadFromArchiveResourcePack}
+ */
+public class ReadFromArchiveResourcePackSettings implements ResourcePackSettings {
+
+    private final @NotNull ReadFromArchiveResourcePack pack;
+
+    private @Nullable JsonObject packMetaJson;
+
+    private @Nullable String name;
+
+    private @Nullable JsonElement description;
+
+    ReadFromArchiveResourcePackSettings(@NotNull ReadFromArchiveResourcePack pack) {
+        this.pack = pack;
+    }
+
+    private @NotNull JsonObject getPackMetaJson() {
+        if (this.packMetaJson == null) {
+            this.packMetaJson = this.pack.readJsonAsset(PathConstants.packMeta);
+        }
+        return this.packMetaJson;
+    }
+
+    @Override
+    public @NotNull String getName() {
+        if (this.name == null) {
+            // Read the name from the pack path
+            String filename = this.pack.getPath().getFileName().toString();
+            int dotIndex = filename.lastIndexOf('.');
+            if (dotIndex != -1) {
+                if (dotIndex == 0) {
+                    this.name = "";
+                } else {
+                    this.name = filename.substring(0, dotIndex);
+                }
+            } else {
+                this.name = filename;
+            }
+        }
+        return this.name;
+    }
+
+    @Override
+    public @NotNull JsonElement getDescription() {
+        if (this.description == null) {
+            // Read the description from the archive
+            this.description = this.getPackMetaJson().getAsJsonObject(KeyConstants.pack).get(KeyConstants.packDescription);
+        }
+        return this.description;
+    }
+
+    public void setDescription(@NotNull JsonElement description) {
+        this.description = description;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
new file mode 100644
index 0000000000000000000000000000000000000000..7b7fb04ab329d036f0e080a3dda90dd2d37bd0e4
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -0,0 +1,63 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.sucraft;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import net.minecraft.core.Registry;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import nl.martijnmuijsers.paper.block.BlockReplacementRule;
+import nl.martijnmuijsers.paper.item.ItemReplacementRule;
+import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePackSettings;
+import nl.martijnmuijsers.paper.resourcepack.readfromarchive.ReadFromArchiveResourcePack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Utility class to create and write the server resource pack.
+ */
+public final class CreateSuCraftResourcePack {
+
+    private CreateSuCraftResourcePack() {}
+
+    private static final String VANILLA_RESOURCE_PACK_ARCHIVE_PATH = "resourcepack/vanilla_client_1.19_only_assets_minecraft.zip";
+
+    private static final String NAME = "SuCraft";
+    private static final JsonElement DESCRIPTION = JsonParser.parseString("[{\"text\":\"\\u2764 Made with love\",\"color\":\"gray\"},{\"text\":\"\\n\"},{\"text\":\"~SuCraft\",\"color\":\"gold\"}]");
+
+    private static final String OUTPUT_FOLDER_PATH = "resourcepack";
+
+    public static void createAndWrite() {
+
+        // Construct the resource pack
+        @NotNull MemoryResourcePack resourcePack = new MemoryResourcePack();
+
+        // Add the vanilla JAR as default resource pack
+        resourcePack.addDefaultResourcePack(new ReadFromArchiveResourcePack(VANILLA_RESOURCE_PACK_ARCHIVE_PATH));
+
+        // Set the settings
+        @NotNull MemoryResourcePackSettings settings = resourcePack.getSettings();
+        settings.setName(NAME);
+        settings.setDescription(DESCRIPTION);
+
+        // Add all custom blocks
+        for (Block block : Registry.BLOCK) {
+            @Nullable BlockReplacementRule replacementRule = block.replacementRule;
+            if (replacementRule != null) {
+                replacementRule.addToResourcePack(resourcePack);
+            }
+        }
+
+        // Add all custom items
+        for (Item item : Registry.ITEM) {
+            @Nullable ItemReplacementRule replacementRule = item.replacementRule;
+            if (replacementRule != null) {
+                replacementRule.addToResourcePack(resourcePack);
+            }
+        }
+
+    }
+
+}
