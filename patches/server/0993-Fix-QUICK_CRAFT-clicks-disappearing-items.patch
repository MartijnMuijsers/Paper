From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sat, 2 Jul 2022 00:06:06 +0200
Subject: [PATCH] Fix QUICK_CRAFT clicks disappearing items


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 8e6acb8d6abd5ecfed6b0a72e68ea6320e08fc17..5a736a2ba972f91c6b01604890824d088197a69c 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -29,15 +29,20 @@ import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.util.Optional;
 import java.util.Queue;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.stream.IntStream;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import net.minecraft.Util;
+import net.minecraft.core.Registry;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket;
+import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.MinecraftServer;
@@ -47,6 +52,7 @@ import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.util.LazyLoadedValue;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.chunk.LevelChunk;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
@@ -430,6 +436,11 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         this.writePacket(packet, callback, Boolean.TRUE);
     }
     private void writePacket(Packet<?> packet, @Nullable GenericFutureListener<? extends Future<? super Void>> callback, Boolean flushConditional) {
+        if (packet instanceof ClientboundContainerSetSlotPacket setSlotPacket) {
+//            LOGGER.info("TEMP DEBUG - send set slot : " + setSlotPacket.getContainerId() + " @ " + setSlotPacket.getStateId() + " : " + setSlotPacket.getSlot() + " -> " + Registry.ITEM.getKey(setSlotPacket.getItem().getItem()) + Optional.ofNullable(setSlotPacket.getItem().getTag()).map(it -> " " + it.getAsString()).orElse(""));
+        } else if (packet instanceof ClientboundContainerSetContentPacket setContentPacket) {
+//            LOGGER.info("TEMP DEBUG - send set content : " + setContentPacket.getContainerId() + " @ " + setContentPacket.getStateId() + " : " + IntStream.range(0, setContentPacket.getItems().size()).mapToObj(index -> it.unimi.dsi.fastutil.Pair.of(index, setContentPacket.getItems().get(index))).filter(pair -> !pair.right().getItem().equals(Items.AIR)).map(pair -> pair.left() + " -> " + Registry.ITEM.getKey(pair.right().getItem()) + Optional.ofNullable(pair.right().getTag()).map(it -> " " + it.getAsString()).orElse("")).toList() + " ( and carried item is: " + Registry.ITEM.getKey(setContentPacket.getCarriedItem().getItem()) + Optional.ofNullable(setContentPacket.getCarriedItem().getTag()).map(it -> " " + it.getAsString()).orElse("") + ")");
+        }
         this.packetWrites.getAndIncrement(); // must be befeore using canFlush
         boolean effectiveFlush = flushConditional == null ? this.canFlush : flushConditional.booleanValue();
         // Martijn start - more packets without delay
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 40712b51b84a812737f6c5f58eefece1e11608a3..3c6db8e35a1f33a26893de914294d15bdf138fac 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -30,6 +30,7 @@ import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.UnaryOperator;
 import java.util.stream.Collectors;
+import java.util.stream.IntStream;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
@@ -2833,6 +2834,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     @Override
     public void handleContainerClick(ServerboundContainerClickPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
+//        LOGGER.info("TEMP DEBUG - receive click : " + packet.getContainerId() + " @ " + packet.getStateId() + " : " + packet.getClickType() + " with " + packet.getButtonNum() + " on " + packet.getSlotNum() + " : " + packet.getChangedSlots().int2ObjectEntrySet().stream().filter(entry -> !entry.getValue().getItem().equals(Items.AIR)).map(entry -> entry.getIntKey() + " -> " + Registry.ITEM.getKey(entry.getValue().getItem()) + Optional.ofNullable(entry.getValue().getTag()).map(it -> " " + it.getAsString()).orElse("")).toList() + " ( and carried item is: " + Registry.ITEM.getKey(packet.getCarriedItem().getItem()) + Optional.ofNullable(packet.getCarriedItem().getTag()).map(it -> " " + it.getAsString()).orElse("") + ")");
         if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         if (this.player.containerMenu.containerId == packet.getContainerId() && this.player.containerMenu.stillValid(this.player)) { // CraftBukkit
@@ -3009,7 +3011,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                             }
                             break;
                         case QUICK_CRAFT:
+                            LOGGER.info("TEMP DEBUG - before quick craft: " + IntStream.range(0, player.getInventory().items.size()).mapToObj(index -> it.unimi.dsi.fastutil.Pair.of(index, player.getInventory().items.get(index))).filter(pair -> !pair.right().getItem().equals(Items.AIR)).map(pair -> pair.left() + " : " + pair.right().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(pair.right().getItem())).toList() + " ( carried item = " + player.containerMenu.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(player.containerMenu.getCarried().getItem()) + " )");
                             this.player.containerMenu.clicked(packet.getSlotNum(), packet.getButtonNum(), packet.getClickType(), this.player);
+                            LOGGER.info("TEMP DEBUG - after quick craft: " + IntStream.range(0, player.getInventory().items.size()).mapToObj(index -> it.unimi.dsi.fastutil.Pair.of(index, player.getInventory().items.get(index))).filter(pair -> !pair.right().getItem().equals(Items.AIR)).map(pair -> pair.left() + " : " + pair.right().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(pair.right().getItem())).toList() + " ( carried item = " + player.containerMenu.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(player.containerMenu.getCarried().getItem()) + " )");
                             break;
                         case PICKUP_ALL:
                             click = ClickType.DOUBLE_CLICK;
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 79d8bcf3f9b0fe4a65ad7899f858efefac6feaa7..99adceff30675c3a222b360f5ce185292bf0f449 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -417,6 +417,7 @@ public abstract class AbstractContainerMenu {
                 if (AbstractContainerMenu.isValidQuickcraftType(this.quickcraftType, player)) {
                     this.quickcraftStatus = 1;
                     this.quickcraftSlots.clear();
+                    LOGGER.info("TEMP DEBUG - started left drag with carried: " + this.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(this.getCarried().getItem()));
                 } else {
                     this.resetQuickCraft();
                 }
@@ -425,9 +426,14 @@ public abstract class AbstractContainerMenu {
                 itemstack = this.getCarried();
                 if (AbstractContainerMenu.canItemQuickReplace(slot, itemstack, true) && slot.mayPlace(itemstack) && (this.quickcraftType == 2 || itemstack.getCount() > this.quickcraftSlots.size()) && this.canDragTo(slot)) {
                     this.quickcraftSlots.add(slot);
+                    LOGGER.info("TEMP DEBUG - added left drag slot " + slot + " and carried: " + this.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(this.getCarried().getItem()));
+
+                } else {
+                    LOGGER.info("TEMP DEBUG - failed to add left drag slot with index " + slotIndex + " and carried: " + this.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(this.getCarried().getItem()));
                 }
             } else if (this.quickcraftStatus == 2) {
                 if (!this.quickcraftSlots.isEmpty()) {
+                    LOGGER.info("TEMP DEBUG - finishing left drag with carried: " + this.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(this.getCarried().getItem()));
                     if (false && this.quickcraftSlots.size() == 1) { // CraftBukkit - treat everything as a drag since we are unable to easily call InventoryClickEvent instead
                         k = ((Slot) this.quickcraftSlots.iterator().next()).index;
                         this.resetQuickCraft();
@@ -443,13 +449,17 @@ public abstract class AbstractContainerMenu {
                     while (iterator.hasNext()) {
                         Slot slot1 = (Slot) iterator.next();
                         ItemStack itemstack2 = this.getCarried();
+                        LOGGER.info("TEMP DEBUG - Doing slot " + slot1);
 
                         if (slot1 != null && AbstractContainerMenu.canItemQuickReplace(slot1, itemstack2, true) && slot1.mayPlace(itemstack2) && (this.quickcraftType == 2 || itemstack2.getCount() >= this.quickcraftSlots.size()) && this.canDragTo(slot1)) {
                             ItemStack itemstack3 = itemstack1.copy();
                             int j1 = slot1.hasItem() ? slot1.getItem().getCount() : 0;
+                            LOGGER.info("TEMP DEBUG - It's actually valid with itemstack3: " + itemstack3.getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(itemstack3.getItem()));
 
                             AbstractContainerMenu.getQuickCraftSlotCount(this.quickcraftSlots, this.quickcraftType, itemstack3, j1);
                             int k1 = Math.min(itemstack3.getMaxStackSize(), slot1.getMaxStackSize(itemstack3));
+                            LOGGER.info("TEMP DEBUG - checking whether " + itemstack3.getCount() + " > " + k1);
+
 
                             if (itemstack3.getCount() > k1) {
                                 itemstack3.setCount(k1);
@@ -460,6 +470,7 @@ public abstract class AbstractContainerMenu {
                             draggedSlots.put(slot1.index, itemstack3); // CraftBukkit - Put in map instead of setting
                         }
                     }
+                    LOGGER.info("TEMP DEBUG - when finishing left drag the dragged slots afterwards are " + draggedSlots.entrySet().stream().map(entry -> entry.getKey() + " -> " + entry.getValue().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(entry.getValue().getItem())).toList());
 
                     // CraftBukkit start - InventoryDragEvent
                     InventoryView view = this.getBukkitView();
@@ -473,9 +484,12 @@ public abstract class AbstractContainerMenu {
                     // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
                     ItemStack oldCursor = this.getCarried();
                     this.setCarried(CraftItemStack.asNMSCopy(newcursor));
+                    LOGGER.info("TEMP DEBUG - before Bukkit event the eventmap is: " + eventmap.entrySet().stream().map(entry -> entry.getKey() + " -> " + entry.getValue().getAmount() + " x " + entry.getValue().getType() + " (" + entry.getValue().getType().getKey() + ")").toList());
 
                     InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
                     player.level.getCraftServer().getPluginManager().callEvent(event);
+                    LOGGER.info("TEMP DEBUG - after Bukkit event the eventmap is: " + eventmap.entrySet().stream().map(entry -> entry.getKey() + " -> " + entry.getValue().getAmount() + " x " + entry.getValue().getType() + " (" + entry.getValue().getType().getKey() + ")").toList());
+                    LOGGER.info("TEMP DEBUG - and the event result is: " + event.getResult());
 
                     // Whether or not a change was made to the inventory that requires an update.
                     boolean needsUpdate = event.getResult() != Result.DEFAULT;
@@ -483,6 +497,8 @@ public abstract class AbstractContainerMenu {
                     if (event.getResult() != Result.DENY) {
                         for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
                             view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                            LOGGER.info("TEMP DEBUG - set item in slot " + dslot.getKey() + " to " + dslot.getValue().getCount() + " x " + Registry.ITEM.getKey(dslot.getValue().getItem()) + " , which becomes " + CraftItemStack.asBukkitCopy(dslot.getValue()).getAmount() + " x " + CraftItemStack.asBukkitCopy(dslot.getValue()).getType());
+                            LOGGER.info("TEMP DEBUG - ^ the result is: " + view.getItem(dslot.getKey()).getAmount() + " x " + view.getItem(dslot.getKey()).getType() + " (" + view.getItem(dslot.getKey()).getType().getKey() + ")");
                         }
                         // The only time the carried item will be set to null is if the inventory is closed by the server.
                         // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
@@ -492,12 +508,15 @@ public abstract class AbstractContainerMenu {
                         }
                     } else {
                         this.setCarried(oldCursor);
+                        LOGGER.info("TEMP DEBUG - noped, reset cursor");
                     }
 
                     if (needsUpdate && player instanceof ServerPlayer) {
                         this.sendAllDataToRemote();
                     }
                     // CraftBukkit end
+                } else {
+                    LOGGER.info("TEMP DEBUG - cannot finish left drag because no slots were added, with carried: " + this.getCarried().getBukkitStack().getAmount() + " x " + Registry.ITEM.getKey(this.getCarried().getItem()));
                 }
 
                 this.resetQuickCraft();
