From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 16 Sep 2021 22:00:02 +0200
Subject: [PATCH] Add per-player chunk send rate


diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 2407af793f667f68da102bed131d1a1dac090f2d..ade1fb45f277add58a21d9ffb99b34c6c1ff8429 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -351,9 +351,13 @@ public final class PlayerChunkLoader {
         return (int)Math.ceil(Math.min(config * MinecraftServer.getServer().getPlayerCount(), max <= 1.0 ? Double.MAX_VALUE : max));
     }
 
-    protected long getTargetSendPerPlayerAddend() {
-        return PaperConfig.playerTargetChunkSendRate <= 1.0 ? 0L : (long)Math.round(1.0e9 / PaperConfig.playerTargetChunkSendRate);
+    // Martijn in Paper start - per-player chunk send rate
+    protected long getTargetSendPerPlayerAddend(ServerPlayer player) {
+        final double chunkSendRate = player.getBukkitEntity().getTargetChunkSendRate();
+        // disable the limit for any given negative rate (with -1 the intended value to denote this)
+        return chunkSendRate < 0 ? 0L : (long) Math.round(1.0e9 / chunkSendRate);
     }
+    // Martijn in Paper end - per-player chunk send rate
 
     protected long getMaxSendAddend() {
         return PaperConfig.globalMaxChunkSendRate <= 1.0 ? 0L : (long)Math.round(1.0e9 / PaperConfig.globalMaxChunkSendRate);
@@ -503,7 +507,6 @@ public final class PlayerChunkLoader {
         }
 
         final int maxSends = this.getMaxConcurrentChunkSends();
-        final long nextPlayerDeadline = this.getTargetSendPerPlayerAddend() + time;
         for (;;) {
             if (this.chunkSendQueue.isEmpty()) {
                 break;
@@ -536,6 +539,7 @@ public final class PlayerChunkLoader {
                 throw new IllegalStateException();
             }
 
+            final long nextPlayerDeadline = getTargetSendPerPlayerAddend(data.player) + time; // Martijn in Paper - per-player chunk send rate
             data.nextChunkSendTarget = nextPlayerDeadline;
             this.chunkSendWaitQueue.add(data);
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 6d2d2ba4a83d887f4d52188305a4a28c2ee2f014..9d38866a11416ad69ddbde8f9ef2a5764c394eb9 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -240,6 +240,10 @@ public class ServerPlayer extends Player {
     public final int[] mobCounts = new int[MOBCATEGORY_TOTAL_ENUMS]; // Paper
     public final com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleMobDistanceMap;
     // Paper end
+    // Martijn in Minecraft start - per-player chunk send rate
+    // the target chunk send rate (in chunks per second) for this player, or null if no specific value for this player is set
+    public Double targetChunkSendRate = null;
+    // Martijn in Minecraft end - per-player chunk send rate
 
     // CraftBukkit start
     public String displayName;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index a3008aaef611e3ed8e9b2637ccca7c9c50eef288..0990142c93d3a60cd736b8fc80e6f5a17e35ae6d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.destroystokyo.paper.PaperConfig; // Martijn in Bukkit
 import com.destroystokyo.paper.Title;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
@@ -624,6 +625,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         data.setTargetTickViewDistance(viewDistance);
     }
+
+    // Martijn in Paper start - per-player chunk send rate
+    @Override
+    public double getTargetChunkSendRate() {
+        final Double playerTargetChunkSendRate = this.getHandle().targetChunkSendRate;
+        final double effectiveTargetChunkSendRate = playerTargetChunkSendRate == null ? PaperConfig.playerTargetChunkSendRate : playerTargetChunkSendRate;
+        // Make sure the returned rate is -1, or >= 1
+        return effectiveTargetChunkSendRate < 0 ? -1 : (effectiveTargetChunkSendRate <= 1 ? 1 : effectiveTargetChunkSendRate);
+    }
+
+    @Override
+    public void setTargetChunkSendRate(Double chunkSendRate) {
+        this.getHandle().targetChunkSendRate = chunkSendRate;
+    }
+    // Martijn in Paper end - per-player chunk send rate
     // Paper end - implement view distances
 
     @Override
