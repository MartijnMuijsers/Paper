From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Mon, 11 Jul 2022 02:11:44 +0200
Subject: [PATCH] Before replace set entity data packet buffer writing by
 regular packet method use


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 076e3061cf500b10d3b58170864c79c60f6b8ee9..7e4e4ce59b6115590a519d35354b5db466961c47 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -63,10 +63,12 @@ import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
+import net.minecraft.network.protocol.game.ClientboundRemoveEntitiesPacket;
 import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
 import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
+import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
@@ -76,6 +78,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.decoration.ArmorStand;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
@@ -165,6 +168,14 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         buf.writeByte(byteValue);
     }
 
+    private static void writeMetadataRotation(@NotNull FriendlyByteBuf buf, int index, float x, float y, float z) {
+        buf.writeByte(index);
+        buf.writeVarInt(8);
+        buf.writeFloat(x);
+        buf.writeFloat(y);
+        buf.writeFloat(z);
+    }
+
     /**
      * Utility function used in {@link #spawnBlockEntity}
      */
@@ -193,13 +204,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
 
         // Send the set entity data packet
         var setEntityDataBuf = new FriendlyByteBuf(Unpooled.buffer());
-        setEntityDataBuf.writeVarInt(0x4D);
         setEntityDataBuf.writeVarInt(entityId);
+        setEntityDataBuf.writeVarInt(0x4D);
         // Entity shared flags
         {
             var entitySharedFlagsBitset = new BitSet(8);
             entitySharedFlagsBitset.set(0, false); // On fire
-            entitySharedFlagsBitset.set(5, true); // Invisible
+            entitySharedFlagsBitset.set(5, false); // Invisible
             entitySharedFlagsBitset.set(6, false); // Glowing
             writeMetadataSharedFlags(setEntityDataBuf, 0, bitsetToInt(entitySharedFlagsBitset));
         }
@@ -212,9 +223,19 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             armorStandSharedFlagsBitset.set(4, false); // Marker
             writeMetadataSharedFlags(setEntityDataBuf, 15, bitsetToInt(armorStandSharedFlagsBitset));
         }
-        // Head rotation, body rotation, left arm rotation, right arm rotation, left leg rotation and right leg rotation are skipped (unnecessary)
+        // Head rotation, body rotation, left arm rotation, right arm rotation, left leg rotation and right leg rotation
+        writeMetadataRotation(setEntityDataBuf, 16, 0, 0, 0);
+        writeMetadataRotation(setEntityDataBuf, 17, 0, 0, 0);
+        writeMetadataRotation(setEntityDataBuf, 18, 0, 0, 0);
+        writeMetadataRotation(setEntityDataBuf, 19, 0, 0, 0);
+        writeMetadataRotation(setEntityDataBuf, 20, 0, 0, 0);
+        writeMetadataRotation(setEntityDataBuf, 21, 0, 0, 0);
         setEntityDataBuf.writeByte(0xFF);
-        this.send(new ClientboundSetEntityDataPacket(setEntityDataBuf));
+        @NotNull ClientboundSetEntityDataPacket setEntityDataPacket = new ClientboundSetEntityDataPacket(setEntityDataBuf);
+        setEntityDataPacket.getUnpackedData().stream().filter(it -> it.getAccessor() == ArmorStand.DATA_CLIENT_FLAGS).findFirst().ifPresent(item -> {
+            ((SynchedEntityData.DataItem<Byte>) item).setValue((byte) (((byte) item.getValue()) & ~(1 << 3)));
+        });
+        this.send(setEntityDataPacket);
 
     }
 
@@ -223,7 +244,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         if (!this.blockEntityEntityIdByBlockPosKey.containsKey(blockKey)) {
             return;
         }
-        this.blockEntityEntityIdByBlockPosKey.remove(blockKey);
+        int entityId = this.blockEntityEntityIdByBlockPosKey.remove(blockKey);
         this.blockEntityBlockStateByBlockPosKey.remove(blockKey);
         if (needToRemoveFromPerChunkSectionKey) {
             long chunkSectionKey = CoordinateUtils.getChunkSectionKey(blockPos);
@@ -235,6 +256,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
                 return blockPosKeys;
             });
         }
+        this.send(new ClientboundRemoveEntitiesPacket(entityId));
     }
 
     /**
@@ -273,7 +295,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     /**
      * To be called for every chunk section of a chunk when it is being unloaded from the player
      */
-    private void despawnBlockEntitiesInChunkSection(@NotNull long chunkSectionKey) {
+    public void despawnBlockEntitiesInChunkSection(@NotNull long chunkSectionKey) {
         this.blockEntityBlockPosKeysPerChunkSectionKey.computeIfPresent(chunkSectionKey, ($, blockPosKeys) -> {
             blockPosKeys.forEach(blockPosKey -> this.despawnBlockEntity(BlockPos.of(blockPosKey), false));
             return null;
@@ -582,7 +604,9 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             return; // Do nothing
         }
         // Martijn start - custom blocks and items
-        callback = packet.updateCallbackWithBlockEntityPacketSends(callback, this);
+        if (this.doesPlayerHaveSuCraftResourcePack()) {
+            callback = packet.updateCallbackWithBlockEntityPacketSends(callback, this);
+        }
         // Martijn end - custom blocks and items
         packet.onPacketDispatch(getPlayer());
         if (connected && (InnerUtil.canSendImmediate(this, packet) || (
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
index 578600a56f9461fbf3a6c1abf1d5aad614a93eb6..de5f8f44ca0be761320484347ca140a2500ad25f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundForgetLevelChunkPacket.java
@@ -1,7 +1,15 @@
 package net.minecraft.network.protocol.game;
 
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import io.papermc.paper.util.CoordinateUtils;
+import net.minecraft.core.SectionPos;
+import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 public class ClientboundForgetLevelChunkPacket implements Packet<ClientGamePacketListener> {
     private final int x;
@@ -35,4 +43,24 @@ public class ClientboundForgetLevelChunkPacket implements Packet<ClientGamePacke
     public int getZ() {
         return this.z;
     }
+
+    // Martijn start - custom blocks and items
+
+    @Override
+    public <F extends Future<? super Void>> GenericFutureListener<F> updateCallbackWithBlockEntityPacketSends(@Nullable GenericFutureListener<F> callback, @NotNull Connection connection) {
+        return future -> {
+            if (callback != null) {
+                callback.operationComplete(future);
+            }
+            if (!future.isCancelled() && future.isSuccess() && connection.isConnected()) {
+                ChunkPos chunkPos = new ChunkPos(x, z);
+                for (int y = connection.getPlayer().getLevel().getMinSection(); y <= connection.getPlayer().getLevel().getMaxSection(); y++) {
+                    connection.despawnBlockEntitiesInChunkSection(CoordinateUtils.getChunkSectionKey(chunkPos, y));
+                }
+            }
+        };
+    }
+
+    // Martijn end - custom blocks and items
+
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
index 30f6a885d700d80f1cdf8d3d2b223fd27ff1f7c0..5aef3b156d56615427a469c4ba3b2f59148a7bfd 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetEntityDataPacket.java
@@ -1,5 +1,6 @@
 package net.minecraft.network.protocol.game;
 
+import java.util.ArrayList;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
@@ -27,6 +28,15 @@ public class ClientboundSetEntityDataPacket implements Packet<ClientGamePacketLi
 
     }
 
+    // Martijn start - custom blocks and items
+
+    public ClientboundSetEntityDataPacket(int id) {
+        this.id = id;
+        this.packedItems = new ArrayList<>();
+    }
+
+    // Martijn end - custom blocks and items
+
     public ClientboundSetEntityDataPacket(FriendlyByteBuf buf) {
         this.id = buf.readVarInt();
         this.packedItems = SynchedEntityData.unpack(buf);
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 2033484b72c2071b04ae5147759cfff91fe02b65..8b6f2fa03098e3b26d40c8baa6af66ce40347ec1 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -336,11 +336,14 @@ public class LevelChunkSection {
     public boolean potentiallyContainsBlockEntity() {
         boolean[] potentiallyContainsBlockEntity = { false };
         this.getStates().getAllEarlyStop(stateInSection -> {
-            var replacementRule = stateInSection.getBlock().replacementRule;
+            Block block = stateInSection.getBlock();
+            var replacementRule = block.replacementRule;
             if (replacementRule != null) {
-                if (replacementRule.rendersAsEntity()) {
-                    potentiallyContainsBlockEntity[0] = true;
-                    return true;
+                if (replacementRule.hasAsReal(block)) {
+                    if (replacementRule.rendersAsEntity()) {
+                        potentiallyContainsBlockEntity[0] = true;
+                        return true;
+                    }
                 }
             }
             return false;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
index 81370d9e13d7071187659eb2dee3f4d6b570a340..22250fb9393df149646bfc53ce5e239ab9a16097 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -6,6 +6,7 @@ import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
@@ -21,6 +22,7 @@ import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePa
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
 import org.apache.commons.lang3.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -213,7 +215,41 @@ public interface BlockReplacementRule {
         return this.getModel(this.getHost(this.getRepresentativeRealState())).model().getReference(ResourcePackAssetIntention.ITEM);
     }
 
+    /**
+     * Non-null if {@link #rendersAsEntity} is true, null otherwise
+     * <br>
+     * This method will assume (not verify) that the given state is in fact a state of this rule's real block
+     */
+    @Nullable Model getBlockEntityItemModel(@NotNull BlockState realState);
+
+    /**
+     * Non-null if {@link #rendersAsEntity} is true, null otherwise
+     * <br>
+     * This method will assume (not verify) that the given state is in fact a state of this rule's real block
+     */
+    @Nullable Integer getBlockEntityItemCustomModelData(@NotNull BlockState realState);
+
+    /**
+     * Non-null if {@link #rendersAsEntity} is true, null otherwise
+     * <br>
+     * This method will assume (not verify) that the given state is in fact a state of this rule's real block
+     */
+    @Nullable ItemStack getBlockEntityItemStack(@NotNull BlockState realState);
+
+    default void addBlockEntityItemToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        if (!this.rendersAsEntity()) {
+            return;
+        }
+        @NotNull Item itemHost = Validate.notNull(this.getHost(this.getReal().defaultBlockState()).getBlock().asItem());
+        @NotNull NamespacedKeyWithoutIntention itemHostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(itemHost));
+        @NotNull MutableResourcePackModel itemHostKeyMinecraftItemModel = resourcePack.getModel(ResourcePackAssetIntention.ITEM, itemHostKey);
+        for (@NotNull BlockState realState : this.getReal().getStateDefinition().getPossibleStates()) {
+            itemHostKeyMinecraftItemModel.addModelOverride(Validate.notNull(this.getBlockEntityItemCustomModelData(realState)), Validate.notNull(this.getBlockEntityItemModel(realState)), resourcePack, false);
+        }
+    }
+
     default void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        this.addBlockEntityItemToResourcePack(resourcePack);
         @NotNull List<@NotNull BlockState> hosts = this.getHosts();
         @NotNull List<@NotNull Block> hostBlocks = hosts.stream().map(BlockState::getBlock).distinct().toList();
         boolean everyStateOfTheHostBlockHasTheSameModel =
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
index 8c6023d457b82a17099104d16df6bf720ac32472..6758e59654a7ae972aa167763a26b8a23058e84a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
@@ -4,10 +4,15 @@ package nl.martijnmuijsers.paper.block.replacementrule;
 
 import com.google.common.collect.Streams;
 import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
+import nl.martijnmuijsers.paper.item.UsedHostCustomModelData;
+import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -17,6 +22,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
@@ -46,7 +52,21 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
 
     private final @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost;
 
-    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull List<@NotNull BlockState> hosts, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull List<@NotNull BlockState> fallbacks, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules) {
+    private final @Nullable Map<@NotNull BlockState, @NotNull Model> blockEntityItemModelPerRealState;
+
+    /**
+     * Is at least null only when not initialized yet:
+     * late initialization is used so that items are not referenced before block bootstrapping is finished
+     */
+    private @Nullable Map<@NotNull BlockState, @NotNull Integer> blockEntityItemCustomModelDataPerRealState;
+
+    /**
+     * Is at least null only when not initialized yet:
+     * late initialization is used so that items are not referenced before block bootstrapping is finished
+     */
+    private @Nullable Map<@NotNull BlockState, @NotNull ItemStack> blockEntityItemStackPerRealState;
+
+    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull List<@NotNull BlockState> hosts, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull List<@NotNull BlockState> fallbacks, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules, @Nullable Map<@NotNull BlockState, @NotNull Model> blockEntityItemModelPerRealState) {
         super(real, realItemRule, rendersAsEntity, hostItemRules);
         this.hostSet = Collections.newSetFromMap(new IdentityHashMap<>());
         this.hostSet.addAll(hosts);
@@ -62,6 +82,7 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
             .distinct()
             .toList();
         this.modelPerHost = new IdentityHashMap<>(modelPerHost);
+        this.blockEntityItemModelPerRealState = blockEntityItemModelPerRealState;
     }
 
     @Override
@@ -109,4 +130,44 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
         return this.modelPerHost.get(host);
     }
 
+    @Override
+    public @Nullable Model getBlockEntityItemModel(@NotNull BlockState realState) {
+        return this.blockEntityItemModelPerRealState == null ? null : blockEntityItemModelPerRealState.get(realState);
+    }
+
+    @Override
+    public @Nullable Integer getBlockEntityItemCustomModelData(@NotNull BlockState realState) {
+        if (this.blockEntityItemCustomModelDataPerRealState == null) {
+            if (this.rendersAsEntity) {
+                this.blockEntityItemCustomModelDataPerRealState = new IdentityHashMap<>(0);
+                @NotNull Item item = Validate.notNull(hostPerRealState.get(this.real.defaultBlockState()).getBlock().asItem());
+                for (@NotNull BlockState possibleRealState : this.getReal().getStateDefinition().getPossibleStates()) {
+                    this.blockEntityItemCustomModelDataPerRealState.put(possibleRealState, UsedHostCustomModelData.generateUnusedHostCustomModelData(item));
+                }
+            } else {
+                return null;
+            }
+        }
+        return this.blockEntityItemCustomModelDataPerRealState.get(realState);
+    }
+
+    @Override
+    public @Nullable ItemStack getBlockEntityItemStack(@NotNull BlockState realState) {
+        if (this.blockEntityItemStackPerRealState == null) {
+            if (this.rendersAsEntity) {
+                this.blockEntityItemStackPerRealState = new IdentityHashMap<>(0);
+                @NotNull Item item = Validate.notNull(hostPerRealState.get(this.real.defaultBlockState()).getBlock().asItem());
+                for (@NotNull BlockState possibleRealState : this.real.getStateDefinition().getPossibleStates()) {
+                    int customModelData = this.getBlockEntityItemCustomModelData(possibleRealState);
+                    @NotNull ItemStack itemStack = new ItemStack(item);
+                    itemStack.getOrCreateTag().putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, customModelData);
+                    this.blockEntityItemStackPerRealState.put(possibleRealState, itemStack);
+                }
+            } else {
+                return null;
+            }
+        }
+        return this.blockEntityItemStackPerRealState.get(realState);
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
index 32a31c7f7621b2647aaf13b89d3a1ae0641b0296..8c973c9637668856637b91cf732ce5b65afddc55 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
@@ -4,14 +4,17 @@ package nl.martijnmuijsers.paper.block.replacementrule;
 
 import net.minecraft.core.Registry;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreationWithParameters;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
+import nl.martijnmuijsers.paper.item.UsedHostCustomModelData;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -198,6 +201,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
             @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
             @NotNull BlockState fallback = Validate.notNull(this.fallbackForRealState.apply(realState));
             @NotNull ModelWithParameters model = Validate.notNull(this.modelForRealState.apply(realState));
+            @Nullable Model blockEntityItemModel = !this.rendersAsEntity ? null : model.model().getBlockEntityItemReference();
             return new SingleStateRealBlockReplacementRule(
                 this.real,
                 realItemRule,
@@ -206,7 +210,8 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
                 hostReplacement,
                 fallback,
                 model,
-                hostItemRules
+                hostItemRules,
+                blockEntityItemModel
             );
         }
         @NotNull List<@NotNull BlockState> hosts = new ArrayList<>();
@@ -215,6 +220,8 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
         @NotNull List<@NotNull BlockState> fallbacks = new ArrayList<>();
         @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState = new IdentityHashMap<>(0);
         @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost = new IdentityHashMap<>(0);
+        @Nullable Map<@NotNull BlockState, @NotNull Model> blockEntityItemModelPerRealState = this.rendersAsEntity ? new IdentityHashMap<>(0) : null;
+        @Nullable Map<@NotNull BlockState, @NotNull Integer> blockEntityItemCustomModelDataPerRealState = this.rendersAsEntity ? new IdentityHashMap<>(0) : null;
         for (@NotNull BlockState realState : realStates) {
             @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(realState));
             if (!hosts.contains(host)) {
@@ -242,6 +249,11 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
                 hostReplacementPerHost.put(host, hostReplacement);
             }
         }
+        if (this.rendersAsEntity) {
+            for (@NotNull BlockState realState : realStates) {
+                blockEntityItemModelPerRealState.put(realState, modelPerHost.get(hostPerRealState.get(realState)).model().getBlockEntityItemReference());
+            }
+        }
         return new MultiStateRealBlockReplacementRule(
             this.real,
             realItemRule,
@@ -252,7 +264,8 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
             fallbacks,
             fallbackPerRealState,
             modelPerHost,
-            hostItemRules
+            hostItemRules,
+            blockEntityItemModelPerRealState
         );
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
index eaf1e534cd9050c17fd4c91d6e241a75b793b271..12ada2758dd1014330afa82b3ecaebb2038c9207 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
@@ -4,20 +4,27 @@ package nl.martijnmuijsers.paper.block.replacementrule;
 
 import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.core.Registry;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
+import nl.martijnmuijsers.paper.item.UsedHostCustomModelData;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Collections;
+import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.Set;
+import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
@@ -53,7 +60,21 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
 
     private final @NotNull ModelWithParameters model;
 
-    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
+    private final @Nullable Model blockEntityItemModel;
+
+    /**
+     * Is at least null only when not initialized yet:
+     * late initialization is used so that items are not referenced before block bootstrapping is finished
+     */
+    private @Nullable Integer blockEntityItemCustomModelData;
+
+    /**
+     * Is at least null only when not initialized yet:
+     * late initialization is used so that items are not referenced before block bootstrapping is finished
+     */
+    private @Nullable ItemStack blockEntityItemStack;
+
+    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules, @Nullable Model blockEntityItemModel) {
         super(real, realItemRule, rendersAsEntity, hostItemRules);
         this.host = host;
         this.hosts = Collections.singletonList(this.host);
@@ -67,6 +88,7 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
             Pair.of(this.real, this.fallback.getBlock())
         ).filter(pair -> !pair.left().equals(pair.right())).distinct().toList();
         this.model = model;
+        this.blockEntityItemModel = blockEntityItemModel;
     }
 
     @Override
@@ -130,8 +152,42 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
         return this.model;
     }
 
+    @Override
+    public @Nullable Model getBlockEntityItemModel(@NotNull BlockState realState) {
+        return this.blockEntityItemModel;
+    }
+
+    @Override
+    public @Nullable Integer getBlockEntityItemCustomModelData(@NotNull BlockState realState) {
+        if (this.blockEntityItemCustomModelData == null) {
+            if (this.rendersAsEntity) {
+                @NotNull Item item = Validate.notNull(this.host.getBlock().asItem());
+                this.blockEntityItemCustomModelData = UsedHostCustomModelData.generateUnusedHostCustomModelData(item);
+            } else {
+                return null;
+            }
+        }
+        return this.blockEntityItemCustomModelData;
+    }
+
+    @Override
+    public @Nullable ItemStack getBlockEntityItemStack(@NotNull BlockState realState) {
+        if (this.blockEntityItemStack == null) {
+            if (this.rendersAsEntity) {
+                @NotNull Item item = Validate.notNull(this.host.getBlock().asItem());
+                int customModelData = this.getBlockEntityItemCustomModelData(realState);
+                this.blockEntityItemStack = new ItemStack(item);
+                this.blockEntityItemStack.getOrCreateTag().putInt(CraftMetaItem.CUSTOM_MODEL_DATA.NBT, customModelData);
+            } else {
+                return null;
+            }
+        }
+        return this.blockEntityItemStack;
+    }
+
     @Override
     public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        this.addBlockEntityItemToResourcePack(resourcePack);
         @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(this.host.getBlock())).withEmptyIntention();
         @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
         if (this.host.getBlock().getStateDefinition().getPossibleStates().size() == 1) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
index 013807b1ba51a2e02824e4cfc62a129acd6e79ff..648ffc1abc1028fe2bdee7317ea00aa182310a85 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
@@ -38,6 +38,10 @@ public class Model extends ResourcePackIntentionedAssetDataByContent<ModelConten
         return new Model(newIntention, this.key, new ModelContent.Reference(this));
     }
 
+    public @NotNull Model getBlockEntityItemReference() {
+        return new Model(ResourcePackAssetIntention.ITEM, new NamespacedKeyWithoutIntention(this.key.namespace(), this.key.keyWithoutIntention() + "_as_entity"), new ModelContent.AsBlockEntityReference(this));
+    }
+
     public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
         @NotNull MutableResourcePackModel resourcePackModel = resourcePack.getOrCreateModel(this.intention, this.key);
         if (!resourcePackModel.isJsonEmpty() && !overwriteExisting) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index 7422bebadc44ce98f14f58fa2e9f09dd69f07afe..bee142aa3a0d5a5397a31bea5ebc3309687e28ac 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -343,6 +343,27 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
 
     }
 
+    /**
+     * A form of {@link ModelContent}: a model that refers to a parent, and is equal to it in every way execpt the size and position it appears with in an equipment head slot
+     */
+    public static final class AsBlockEntityReference extends ModelContent {
+
+        private final @NotNull Model parent;
+
+        public AsBlockEntityReference(@NotNull Model parent) {
+            super();
+            this.parent = parent;
+        }
+
+        @Override
+        void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
+            resourcePackModel.setParent(parent);
+            resourcePackModel.setBlockEntityHeadDisplay();
+            parent.addToResourcePack(resourcePack, false);
+        }
+
+    }
+
     /**
      * A reference to some model that is outside the scope of our own resource pack (for example a model already existing) that we do not seek to modify
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
index 779c53bb0b00dd088c2982cfdadb29dd9eaeb5a4..960b2a84a67a56763f183c30a97710deae20cd6d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
@@ -91,4 +91,24 @@ public final class KeyConstants {
      */
     public static final @NotNull String customModelData = "custom_model_data";
 
+    /**
+     * The key for a model display
+     */
+    public static final @NotNull String display = "display";
+
+    /**
+     * The key for model display settings for the head slot
+     */
+    public static final @NotNull String displayHead = "head";
+
+    /**
+     * The key for a translation model display setting
+     */
+    public static final @NotNull String displayTranslation = "translation";
+
+    /**
+     * The key for a scale model display setting
+     */
+    public static final @NotNull String displayScale = "scale";
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
index 104d1c26f188d83d6eb590c6b4713a5457ffa19c..e0d6e3d54a44f45926a0c26d548dd1f33051361e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
@@ -42,6 +42,34 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
         this.setDirty();
     }
 
+    @Override
+    public void setBlockEntityHeadDisplay() {
+        @NotNull JsonObject displayJson;
+        if (this.json.has(KeyConstants.display)) {
+            displayJson = this.json.getAsJsonObject(KeyConstants.display);
+        } else {
+            displayJson = new JsonObject();
+            this.json.add(KeyConstants.display, displayJson);
+        }
+        @NotNull JsonObject headJson;
+        if (displayJson.has(KeyConstants.displayHead)) {
+            headJson = displayJson.getAsJsonObject(KeyConstants.displayHead);
+        } else {
+            headJson = new JsonObject();
+            displayJson.add(KeyConstants.displayHead, headJson);
+        }
+        @NotNull JsonArray translationJson = new JsonArray(3);
+        translationJson.add(0);
+        translationJson.add(-30.425);
+        translationJson.add(0);
+        headJson.add(KeyConstants.displayTranslation, translationJson);
+        @NotNull JsonArray scaleJson = new JsonArray(3);
+        for (int i = 0; i < 3; i++) {
+            translationJson.add(1.605);
+        }
+        headJson.add(KeyConstants.displayScale, scaleJson);
+    }
+
     @Override
     public void setAllTextures(@NotNull Texture texture) {
         @NotNull JsonObject texturesJson = new JsonObject();
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
index 91d6b17c7ba142b5d3519b63bd41138d1ec5291c..54375ef54683365486c271504832e80b888d91ec 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
@@ -19,6 +19,8 @@ public interface MutableResourcePackModel extends MutableJsonResourcePackAsset,
 
     void setParent(@NotNull Model parent);
 
+    void setBlockEntityHeadDisplay();
+
     void setAllTextures(@NotNull Texture texture);
 
     void setColumnTextures(@NotNull Texture endTexture, @NotNull Texture sideTexture);
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 66f0a66074cc3278ecc082903001a5029fbb388b..79a40a9fec79d4d2a2f63ef074684f0c1bd562df 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 57;
+    private static final int currentResourcePackVersion = 59;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
