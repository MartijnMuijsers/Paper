From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Fri, 1 Jul 2022 19:38:24 +0200
Subject: [PATCH] Resource pack generation is finished


diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index c62894e88f9960a728c8f40717738b292f77e639..3f51ff05e21190b828c10e098bf96ec70ca3ea9b 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -598,8 +598,11 @@ public class FriendlyByteBuf extends ByteBuf {
 
             // Martijn start - custom blocks and items
             if (item.replacementRule != null && doesNetworkTargetHaveResourcePack != null) {
-                stack = item.replacementRule.replace(stack, doesNetworkTargetHaveResourcePack);
-                item = stack.getItem();
+                ItemStack replacedStack = item.replacementRule.replace(stack, doesNetworkTargetHaveResourcePack);
+                if (replacedStack != null) {
+                    stack = replacedStack;
+                    item = replacedStack.getItem();
+                }
             }
             // Martijn end - custom blocks and items
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index 6a4a9d78ff2e7dc184211e3d000b6ed98859bb9e..71a6b1ce0f4116578a99ed255ae94ab9896f95f9 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -59,7 +59,7 @@ public class ClientboundBlockUpdatePacket implements Packet<ClientGamePacketList
     }
 
     @Override
-    public ClientboundBlockUpdatePacket copy() {
+    public @NotNull ClientboundBlockUpdatePacket copy() {
         return new ClientboundBlockUpdatePacket(
             this.pos,
             this.blockState
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 62827c6d9ddb57694c2de27c0b0ff56abb9102a6..2198a52553c569d5b7ec9588e412b8f9e7314ee3 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -121,7 +121,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
     }
 
     @Override
-    public ClientboundSectionBlocksUpdatePacket copy() {
+    public @NotNull ClientboundSectionBlocksUpdatePacket copy() {
         return new ClientboundSectionBlocksUpdatePacket(
             this.sectionPos,
             this.positions,
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 8b2ec41bcbc085129875633ab72e5f4f957a1d39..7d16c59dd196e24d313d3146fb74a201c9063ae0 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -90,6 +90,11 @@ public class Item implements ItemLike {
      */
     public @Nullable String customDisplayNameJSON = null;
 
+    /**
+     * Must be non-null for SuCraft items
+     */
+    public @Nullable String customDisplayNameInLoreJSON = null;
+
     // Martijn end - custom blocks and items
 
     public static int getId(Item item) {
diff --git a/src/main/java/net/minecraft/world/item/Items.java b/src/main/java/net/minecraft/world/item/Items.java
index 0b987d94b77d1c2c64f4892e0c477389b9aef810..fa7dfe52155bf93e60f28d8af1b33961cb97f2e2 100644
--- a/src/main/java/net/minecraft/world/item/Items.java
+++ b/src/main/java/net/minecraft/world/item/Items.java
@@ -15,6 +15,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.material.Fluids;
 import nl.martijnmuijsers.paper.item.SuCraftItems;
+import nl.martijnmuijsers.paper.resourcepack.sucraft.CreateSuCraftResourcePack;
 
 public class Items {
     public static final Item AIR = registerBlock(Blocks.AIR, new AirItem(Blocks.AIR, new Item.Properties()));
@@ -1226,6 +1227,8 @@ public class Items {
         ECHO_SHARD.asItem();
         // Then bootstrap SuCraftItems
         SuCraftItems.bootstrap();
+        // This is the a reasonable time to create the resource pack
+        CreateSuCraftResourcePack.createAndWrite();
     }
 
     // Martijn end - custom blocks and items
diff --git a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerAntiXrayCustom.java b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerAntiXrayCustom.java
index 6b1c7b68d566f352cf0534f5f9ec62d98c8c6b49..8437ad716fc469e43579c7197aad7b541162a48e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerAntiXrayCustom.java
+++ b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerAntiXrayCustom.java
@@ -2,51 +2,12 @@
 
 package nl.martijnmuijsers.paper.antixray;
 
-import com.destroystokyo.paper.antixray.BitStorageReader;
-import com.destroystokyo.paper.antixray.BitStorageWriter;
-import com.destroystokyo.paper.antixray.ChunkPacketBlockController;
 import com.destroystokyo.paper.antixray.ChunkPacketBlockControllerAntiXray;
-import com.destroystokyo.paper.antixray.ChunkPacketInfo;
 import com.destroystokyo.paper.antixray.ChunkPacketInfoAntiXray;
-import io.papermc.paper.configuration.WorldConfiguration;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.core.Registry;
-import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.ServerPlayerGameMode;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.biome.Biomes;
-import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.EntityBlock;
-import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.EmptyLevelChunk;
-import net.minecraft.world.level.chunk.GlobalPalette;
 import net.minecraft.world.level.chunk.LevelChunk;
-import net.minecraft.world.level.chunk.LevelChunkSection;
-import net.minecraft.world.level.chunk.MissingPaletteEntryException;
-import net.minecraft.world.level.chunk.Palette;
-import org.bukkit.Bukkit;
-import org.spongepowered.configurate.serialize.ScalarSerializer;
-import org.spongepowered.configurate.serialize.SerializationException;
-
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.LinkedHashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ThreadLocalRandom;
-import java.util.function.IntSupplier;
-import java.util.function.Predicate;
 
 public final class ChunkPacketBlockControllerAntiXrayCustom extends ChunkPacketBlockControllerAntiXray {
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java
index 5fceb9573c706977e2357e0cc8e39bd36befd7bb..d2ffa53275aee4a582e88f3560244b5a2e7da901 100644
--- a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java
+++ b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerCustom.java
@@ -14,21 +14,16 @@ import it.unimi.dsi.fastutil.ints.IntArraySet;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.ints.IntSet;
 import net.minecraft.network.FriendlyByteBuf;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.util.Mth;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.GlobalPalette;
 import net.minecraft.world.level.chunk.HashMapPalette;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LinearPalette;
 import net.minecraft.world.level.chunk.Palette;
-import net.minecraft.world.level.chunk.PalettedContainer;
 import net.minecraft.world.level.chunk.SingleValuePalette;
-import nl.martijnmuijsers.paper.block.SuCraftBlocks;
 
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java
index 4c35a3e8ff7eb63018b173e495f3cb5022cc2c4b..a50c702b7e653d74a1f8f7d0f472c6ae5ac624e2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java
+++ b/src/main/java/nl/martijnmuijsers/paper/antixray/ChunkPacketBlockControllerModifierBase.java
@@ -2,51 +2,21 @@
 
 package nl.martijnmuijsers.paper.antixray;
 
-import com.destroystokyo.paper.antixray.BitStorageReader;
-import com.destroystokyo.paper.antixray.BitStorageWriter;
 import com.destroystokyo.paper.antixray.ChunkPacketBlockController;
 import com.destroystokyo.paper.antixray.ChunkPacketInfo;
 import com.destroystokyo.paper.antixray.ChunkPacketInfoAntiXray;
-import io.papermc.paper.configuration.WorldConfiguration;
-import net.minecraft.core.BlockPos;
-import net.minecraft.core.Direction;
-import net.minecraft.core.Registry;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
-import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
-import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.level.ServerLevel;
-import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.ServerPlayerGameMode;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.level.biome.Biomes;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.EntityBlock;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.chunk.EmptyLevelChunk;
 import net.minecraft.world.level.chunk.GlobalPalette;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
-import net.minecraft.world.level.chunk.MissingPaletteEntryException;
 import net.minecraft.world.level.chunk.Palette;
 import org.bukkit.Bukkit;
-import org.jetbrains.annotations.Nullable;
-import org.spongepowered.configurate.serialize.ScalarSerializer;
-import org.spongepowered.configurate.serialize.SerializationException;
 
-import java.lang.reflect.Type;
-import java.util.ArrayList;
-import java.util.LinkedHashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Objects;
-import java.util.Set;
 import java.util.concurrent.Executor;
-import java.util.concurrent.ThreadLocalRandom;
-import java.util.function.IntSupplier;
-import java.util.function.Predicate;
 
 public abstract class ChunkPacketBlockControllerModifierBase extends ChunkPacketBlockController implements ChunkPacketBlockControllerModifier { // Martijn - custom blocks and items
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
index 32968e6a64a234b6715b90b9d73aa7c74a88d846..ecf2ed96a5a55dcf328b03db19fe94cdb085405a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
@@ -2,29 +2,42 @@
 
 package nl.martijnmuijsers.paper.block;
 
+import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackBlockStates;
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
 import org.apache.commons.lang3.Validate;
-import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collections;
+import java.util.Set;
+import java.util.function.Function;
 import java.util.function.Supplier;
 
 public interface BlockReplacementRule {
 
-    interface Builder {
+    interface Builder<B extends Builder<B>> {
 
-        @NotNull BlockReplacementRule.Builder withReal(@NotNull Block real);
+        @NotNull B withHostItem(@NotNull Supplier<@NotNull Item> hostItemSupplier);
 
-        @NotNull BlockReplacementRule.Builder withFallbackItem(@NotNull Supplier<@NotNull Item> fallbackItemSupplier);
+        default @NotNull B withFullBlockBoundingBoxHostItem() {
+            return this.withHostItem(() -> Items.BARRIER);
+        }
+
+        @NotNull B withReal(@NotNull Block real);
+
+        @NotNull B withFallbackItem(@NotNull Supplier<@NotNull Item> fallbackItemSupplier);
 
         @NotNull BlockReplacementRule build();
 
@@ -34,8 +47,22 @@ public interface BlockReplacementRule {
 
     @NotNull Block getReal();
 
+    @Nullable Item getHostItem();
+
     @Nullable Item getFallbackItem();
 
+    /**
+     * Returns whether this item, when placing it as a block, would place a block state that serves as a host for this block
+     */
+    boolean isHostReplacing(@NotNull Item item);
+
+    /**
+     * Returns all items for which {@link #isHostReplacing} is true
+     */
+    @NotNull Iterable<@NotNull Item> getHostReplacingItems();
+
+    @Nullable Item getHostReplacingItemReplacement(@NotNull Item item);
+
     @Nullable Model getModelForStatePlacedByItem();
 
     void writeToStateIdReplacementArrays();
@@ -62,13 +89,16 @@ public interface BlockReplacementRule {
 
     class StatelessBlockReplacementRule implements BlockReplacementRule {
 
-        public static class Builder implements BlockReplacementRule.Builder {
+        public static class Builder implements BlockReplacementRule.Builder<Builder> {
 
             private @Nullable Block real;
             private @Nullable BlockState host;
+            private @Nullable Supplier<@NotNull Item> hostItemSupplier;
             private @Nullable BlockState hostReplacement;
             private @Nullable BlockState fallback;
             private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
+            private @Nullable Supplier<@NotNull Item> hostReplacingItemSupplier;
+            private @Nullable Supplier<@NotNull Item> hostReplacingItemReplacementSupplier;
             private @Nullable Supplier<@NotNull Model> modelSupplier;
 
             @Override
@@ -99,6 +129,12 @@ public interface BlockReplacementRule {
                 return this.withHostReplacement(this.host.getBlock().defaultBlockState());
             }
 
+            @Override
+            public @NotNull StatelessBlockReplacementRule.Builder withHostItem(@NotNull Supplier<@NotNull Item> hostItemSupplier) {
+                this.hostItemSupplier = hostItemSupplier;
+                return this;
+            }
+
             public @NotNull StatelessBlockReplacementRule.Builder withFallback(@NotNull BlockState fallback) {
                 this.fallback = fallback;
                 return this;
@@ -114,7 +150,7 @@ public interface BlockReplacementRule {
                 return this;
             }
 
-            public @NotNull StatelessBlockReplacementRule.Builder withFallbackBlockAsItem() {
+            public @NotNull StatelessBlockReplacementRule.Builder withFallbackBlockAsFallbackItem() {
                 Validate.notNull(this.fallback);
                 return this.withFallbackItem(() -> this.fallback.getBlock().asItem());
             }
@@ -124,22 +160,58 @@ public interface BlockReplacementRule {
                 return this;
             }
 
-            public @NotNull StatelessBlockReplacementRule.Builder withModelContent(@NotNull ModelContent modelContent) {
+            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItem(@NotNull Supplier<@NotNull Item> hostReplacingItemSupplier) {
+                this.hostReplacingItemSupplier = hostReplacingItemSupplier;
+                return this;
+            }
+
+            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItemFromHostBlock() {
+                Validate.notNull(this.host);
+                return this.withHostReplacingItem(() -> this.host.getBlock().asItem());
+            }
+
+            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItemReplacement(@NotNull Supplier<@NotNull Item> hostReplacingItemReplacementSupplier) {
+                this.hostReplacingItemReplacementSupplier = hostReplacingItemReplacementSupplier;
+                return this;
+            }
+
+            public @NotNull StatelessBlockReplacementRule.Builder withHostReplacingItemReplacementFromHostReplacementBlock() {
+                Validate.notNull(this.hostReplacement);
+                return this.withHostReplacingItemReplacement(() -> this.hostReplacement.getBlock().asItem());
+            }
+
+            /**
+             * The provided function will be called with the {@link ResourceLocation} of the real block of this rule
+             */
+            public @NotNull StatelessBlockReplacementRule.Builder withModel(@NotNull Function<@NotNull ResourceLocation, @NotNull Model> modelFunction) {
                 this.modelSupplier = () -> {
                     Validate.notNull(this.real);
-                    return modelContent.asModel(ModelType.BLOCK, Registry.BLOCK.getKey(this.real).asBukkit());
+                    @NotNull ResourceLocation key = Registry.BLOCK.getKey(this.real);
+                    return modelFunction.apply(key);
                 };
                 return this;
             }
 
+            public @NotNull StatelessBlockReplacementRule.Builder withModelContent(@NotNull ModelContent modelContent) {
+                return this.withModel(resourceLocation ->
+                    modelContent.asModel(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.forMinecraft(resourceLocation)));
+            }
+
             @Override
             public @NotNull StatelessBlockReplacementRule build() {
                 Validate.notNull(this.real);
                 Validate.notNull(this.host);
                 Validate.notNull(this.hostReplacement);
+                Validate.notNull(this.hostItemSupplier);
                 Validate.notNull(this.fallback);
                 Validate.notNull(this.modelSupplier);
-                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.fallback, this.fallbackItemSupplier, this.modelSupplier.get());
+                @Nullable Supplier<@NotNull Pair<@NotNull Item, @NotNull Item>> hostReplacingItemAndReplacementSupplier = null;
+                if (this.hostReplacingItemSupplier != null || this.hostReplacingItemReplacementSupplier != null) {
+                    Validate.notNull(this.hostReplacingItemSupplier);
+                    Validate.notNull(this.hostReplacingItemReplacementSupplier);
+                    hostReplacingItemAndReplacementSupplier = () -> Pair.of(this.hostReplacingItemSupplier.get(), this.hostReplacingItemReplacementSupplier.get());
+                }
+                return new StatelessBlockReplacementRule(this.real, this.host, this.hostReplacement, this.hostItemSupplier, this.fallback, this.fallbackItemSupplier, hostReplacingItemAndReplacementSupplier, this.modelSupplier.get());
             }
 
         }
@@ -147,32 +219,74 @@ public interface BlockReplacementRule {
         private final @NotNull Block real;
         private final @NotNull BlockState host;
         private final @NotNull BlockState hostReplacement;
+
+        /**
+         * May be null if this block has no item form, must be non-null if this block has an item form
+         * <br>
+         * Will also be null if not initialized yet
+         */
+        private @Nullable Item hostItem;
+
+        /**
+         * This is used to get the host item the first time it is needed: this is to ensure no calls to the Items class are made before the blocks have finished initializing, otherwise we cannot refer to the blocks when we wish to create items for them
+         * <br><br>
+         * May be null if this block has no item form, must be non-null if this block has an item form
+         * <br>
+         * Will also be set to null after the first evaluation
+         */
+        private @Nullable Supplier<@NotNull Item> hostItemSupplier;
+
         private final @NotNull BlockState fallback;
 
         /**
          * May be null if this block has no item form, must be non-null if this block has an item form
+         * <br>
          * Will also be null if not initialized yet
          */
         private @Nullable Item fallbackItem = null;
 
-        private final @NotNull Model model;
-
         /**
          * This is used to get the fallback item the first time it is needed: this is to ensure no calls to the Items class are made before the blocks have finished initializing, otherwise we cannot refer to the blocks when we wish to create items for them
-         *
+         * <br><br>
          * May be null if this block has no item form, must be non-null if this block has an item form
+         * <br>
          * Will also be set to null after the first evaluation
          */
         private @Nullable Supplier<@NotNull Item> fallbackItemSupplier;
 
-        private StatelessBlockReplacementRule(@NotNull Block real, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @Nullable Supplier<@NotNull Item> fallbackItemSupplier, @NotNull Model model) {
+        /**
+         * May be null if this block has no host for which an item exists that would replace it on being used to place as a block
+         * <br>
+         * Will also be set to null after the first evaluation
+         */
+        private @Nullable Item hostReplacingItem;
+
+        /**
+         * May be null if this block has no host for which an item exists that would replace it on being used to place as a block
+         * <br>
+         * Will also be set to null after the first evaluation
+         */
+        private @Nullable Item hostReplacingItemReplacement;
+
+        /**
+         * May be null if this block has no host for which an item exists that would replace it on being used to place as a block
+         * <br>
+         * Will also be set to null after the first evaluation
+         */
+        private @Nullable Supplier<@NotNull Pair<@NotNull Item, @NotNull Item>> hostReplacingItemAndReplacementSupplier;
+
+        private final @NotNull Model model;
+
+        private StatelessBlockReplacementRule(@NotNull Block real, @NotNull BlockState host, @NotNull BlockState hostReplacement, @Nullable Supplier<@NotNull Item> hostItemSupplier, @NotNull BlockState fallback, @Nullable Supplier<@NotNull Item> fallbackItemSupplier, @Nullable Supplier<@NotNull Pair<@NotNull Item, @NotNull Item>> hostReplacingItemAndReplacementSupplier, @NotNull Model model) {
             this.real = real;
             this.host = host;
             this.hostReplacement = hostReplacement;
+            this.hostItemSupplier = hostItemSupplier;
             this.fallback = fallback;
             this.fallbackItemSupplier = fallbackItemSupplier;
+            this.hostReplacingItemAndReplacementSupplier = hostReplacingItemAndReplacementSupplier;
             this.model = model;
-            Validate.isTrue(this.model.getType() == ModelType.BLOCK);
+            Validate.isTrue(this.model.getIntention() == ResourcePackAssetIntention.BLOCK);
         }
 
         @Override
@@ -190,6 +304,18 @@ public interface BlockReplacementRule {
             return this.real;
         }
 
+        @Override
+        public @Nullable Item getHostItem() {
+            if (this.hostItem == null) {
+                if (this.hostItemSupplier == null) {
+                    return null;
+                }
+                this.hostItem = this.hostItemSupplier.get();
+                this.hostItemSupplier = null;
+            }
+            return this.hostItem;
+        }
+
         @Override
         public @Nullable Item getFallbackItem() {
             if (this.fallbackItem == null) {
@@ -202,6 +328,53 @@ public interface BlockReplacementRule {
             return this.fallbackItem;
         }
 
+        private @Nullable Item getHostReplacingItem() {
+            if (this.hostReplacingItem == null) {
+                if (this.hostReplacingItemAndReplacementSupplier != null) {
+                    @NotNull Pair<@NotNull Item, @NotNull Item> hostReplacingItemAndReplacement = this.hostReplacingItemAndReplacementSupplier.get();
+                    this.hostReplacingItem = hostReplacingItemAndReplacement.left();
+                    this.hostReplacingItemReplacement = hostReplacingItemAndReplacement.right();
+                    this.hostReplacingItemAndReplacementSupplier = null;
+                }
+            }
+            return this.hostReplacingItem;
+        }
+
+        private @Nullable Item getHostReplacingItemReplacement() {
+            if (this.hostReplacingItemReplacement == null) {
+                if (this.hostReplacingItemAndReplacementSupplier != null) {
+                    @NotNull Pair<@NotNull Item, @NotNull Item> hostReplacingItemAndReplacement = this.hostReplacingItemAndReplacementSupplier.get();
+                    this.hostReplacingItem = hostReplacingItemAndReplacement.left();
+                    this.hostReplacingItemReplacement = hostReplacingItemAndReplacement.right();
+                    this.hostReplacingItemAndReplacementSupplier = null;
+                }
+            }
+            return this.hostReplacingItemReplacement;
+        }
+
+        @Override
+        public boolean isHostReplacing(@NotNull Item item) {
+            return item.equals(this.getHostReplacingItem());
+        }
+
+        @Override
+        public @NotNull Iterable<@NotNull Item> getHostReplacingItems() {
+            @Nullable Item hostReplacingItem = this.getHostReplacingItem();
+            if (hostReplacingItem == null) {
+                return Collections.emptyList();
+            } else {
+                return Collections.singletonList(hostReplacingItem);
+            }
+        }
+
+        @Override
+        public @Nullable Item getHostReplacingItemReplacement(@NotNull Item item) {
+            if (this.isHostReplacing(item)) {
+                return this.getHostReplacingItemReplacement();
+            }
+            return null;
+        }
+
         @Override
         public @Nullable Model getModelForStatePlacedByItem() {
             return this.model;
@@ -241,7 +414,7 @@ public interface BlockReplacementRule {
 
         @Override
         public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
-            @NotNull NamespacedKey hostKey = Registry.BLOCK.getKey(this.host.getBlock()).asBukkit();
+            @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(this.host.getBlock())).withEmptyIntention();
             @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
             minecraftBlockStates.setNoVariantModel(this.model, resourcePack, false);
         }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java
index ce940682b37914fa8b41992b6ffe7fb69536aaa9..49c1bb5766ff2766bf106412633d788e3b08a4a7 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java
@@ -4,7 +4,6 @@ package nl.martijnmuijsers.paper.block;
 
 import net.minecraft.data.loot.BlockLoot;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.storage.loot.LootTable;
 
 import java.util.function.BiConsumer;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index a2989d009e73d07a4948d2881d4826a0e0dd77ef..19c70f29f8d8165387a5604722fe5709c1b875f2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -4,13 +4,12 @@ package nl.martijnmuijsers.paper.block;
 
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
-import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Material;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
 
 /**
  * Based on {@link net.minecraft.world.level.block.Blocks}
@@ -25,13 +24,16 @@ public class SuCraftBlocks {
         BlockReplacementRule.stateless()
             .withHost(Blocks.INFESTED_STONE_BRICKS)
             .withHostReplacement(Blocks.STONE_BRICKS)
+            .withFullBlockBoundingBoxHostItem()
             .withFallback(Blocks.STONE_BRICKS)
-            .withFallbackBlockAsItem()
-            .withModelContent(ModelContent.cube(TODOFilePathToImage)),
+            .withFallbackBlockAsFallbackItem()
+            .withHostReplacingItemFromHostBlock()
+            .withHostReplacingItemReplacementFromHostReplacementBlock()
+            .withModel(Model.DEFAULT_CUBE_MODEL(ResourcePackAssetIntention.BLOCK)),
         new Block(BlockBehaviour.Properties.of(Material.STONE).requiresCorrectToolForDrops().strength(1.5F, 6.0F))
     );
 
-    private static Block register(String id, BlockReplacementRule.Builder replacementRuleBuilder, Block block) {
+    private static Block register(String id, BlockReplacementRule.Builder<?> replacementRuleBuilder, Block block) {
         Block registeredBlock = Registry.register(Registry.BLOCK, ResourceLocation.sucraft(id), block);
         registeredBlock.isVanilla = false;
         registeredBlock.replacementRule = replacementRuleBuilder.withReal(registeredBlock).build();
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ExistingModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ExistingModelContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..df9aa99f4928a6be33f9db9f104ba462c4d5ad08
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ExistingModelContent.java
@@ -0,0 +1,35 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A reference to some model that is outside the scope of our own resource pack (for example a model already existing) that we do not seek to modify
+ */
+public class ExistingModelContent extends ModelContent {
+
+    private static @Nullable ExistingModelContent instance;
+
+    public static @NotNull ExistingModelContent getInstance() {
+        if (instance == null) {
+            instance = new ExistingModelContent();
+        }
+        return instance;
+    }
+
+    private ExistingModelContent() {}
+
+    /**
+     * Since this is content that already exists, it does not need to be written
+     */
+    @Override
+    void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {}
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
new file mode 100644
index 0000000000000000000000000000000000000000..f0a5d8043d1eb970f4cd7842ed3f9765d062d5b9
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
@@ -0,0 +1,52 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackIntentionedAssetDataByContent;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.function.Function;
+
+/**
+ * An immutable item or block model
+ */
+public class Model extends ResourcePackIntentionedAssetDataByContent<ModelContent> {
+
+    public Model(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key, @NotNull ModelContent content) {
+       super(intention, key, content);
+    }
+
+    public @NotNull Model getReference(@NotNull ResourcePackAssetIntention newIntention) {
+        return new Model(newIntention, this.key, ModelContent.reference(this));
+    }
+
+    public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
+        @NotNull MutableResourcePackModel resourcePackModel = resourcePack.getOrCreateModel(this.intention, this.key);
+        if (!resourcePackModel.isJsonEmpty() && !overwriteExisting) {
+            return;
+        }
+        if (!resourcePackModel.isJsonEmpty()) {
+            resourcePackModel.clearJson();
+        }
+        this.content.writeToClearResourcePackModel(resourcePackModel, resourcePack);
+    }
+
+    // Some default model builder method argument functions (easy to pass to StatelessBlockReplacementRule.Builder.withModel and similar methods)
+
+    // Model by content (for replacement rule builders)
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull Model> MODEL_BY_MODEL_CONTENT(@NotNull Function<@NotNull ResourceLocation, @NotNull ModelContent> modelContentFunction) {
+        return resourceLocation -> new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.forMinecraft(resourceLocation), modelContentFunction.apply(resourceLocation));
+    }
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull Model> DEFAULT_CUBE_MODEL(@NotNull ResourcePackAssetIntention intention) {
+        return MODEL_BY_MODEL_CONTENT(ModelContent.DEFAULT_CUBE_MODEL_CONTENT(intention));
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..58aabc4fc0f4b9f2feba2c47e13ed3f98a5b3cc3
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -0,0 +1,56 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import net.minecraft.resources.ResourceLocation;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.ExistingTextureContent;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetDataContent;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.function.Function;
+
+/**
+ * The immutable content of a model: a {@link Model} without any information about its appropriate location in a resource pack
+ */
+public abstract class ModelContent implements ResourcePackAssetDataContent {
+
+    protected ModelContent() {}
+
+    public @NotNull Model asModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        return new Model(intention, key, this);
+    }
+
+    /**
+     * Note that this method will attempt to add any used textures to the resource pack, but will not overwrite any existing ones
+     */
+    abstract void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack);
+
+    public static @NotNull ModelContent existing() {
+        return ExistingModelContent.getInstance();
+    }
+
+    public static @NotNull ModelContent reference(@NotNull Model parent) {
+        return new ReferenceModelContent(parent);
+    }
+
+    public static @NotNull ModelContent cube(@NotNull Texture texture) {
+        return new OneTextureCubeModelContent(texture);
+    }
+
+    // Model content by textures (for replacement rule builders)
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull ModelContent> CUBE_MODEL_CONTENT_BY_TEXTURE(@NotNull Function<@NotNull ResourceLocation, @NotNull Texture> textureFunction) {
+        return resourceLocation -> ModelContent.cube(textureFunction.apply(resourceLocation));
+    }
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull ModelContent> DEFAULT_CUBE_MODEL_CONTENT(@NotNull ResourcePackAssetIntention intention) {
+        return CUBE_MODEL_CONTENT_BY_TEXTURE(Texture.DEFAULT_TEXTURE(intention));
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/OneTextureCubeModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/OneTextureCubeModelContent.java
similarity index 58%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/model/OneTextureCubeModelContent.java
rename to src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/OneTextureCubeModelContent.java
index 038b4192f828e90f0c918506cca3dc08effcb0bd..2b162b6151be105b8724c7aaa1939a4e06e2f283 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/OneTextureCubeModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/OneTextureCubeModelContent.java
@@ -1,11 +1,12 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack.model;
+package nl.martijnmuijsers.paper.blockanditemdata.model;
 
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import nl.martijnmuijsers.paper.resourcepack.texture.Texture;
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -13,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class OneTextureCubeModelContent extends ModelContent {
 
-    private static final @NotNull Model parent = Model.reference(ModelType.BLOCK, NamespacedKey.minecraft("cube_all"));
+    private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("cube_all"), ModelContent.existing());
 
     private final @NotNull Texture texture;
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ReferenceModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ReferenceModelContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..80f830be5b604b1189822cad2fe0a32bf7b395fa
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ReferenceModelContent.java
@@ -0,0 +1,29 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.model;
+
+import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A reference to some model that is outside the scope of our own resource pack (for example a model already existing, for use as a parent)
+ */
+public class ReferenceModelContent extends ModelContent {
+
+    private final @NotNull Model parent;
+
+    ReferenceModelContent(@NotNull Model parent) {
+        this.parent = parent;
+    }
+
+    @Override
+    void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
+        resourcePackModel.setParent(parent);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/ExistingTextureContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/ExistingTextureContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..555dae6ead496d78ea6bdccff33b22a657136c35
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/ExistingTextureContent.java
@@ -0,0 +1,31 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.texture;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A reference to some texture that is outside the scope of our own resource pack (for example a texture already existing)
+ */
+public class ExistingTextureContent extends TextureContent {
+
+    private static @Nullable ExistingTextureContent instance;
+
+    public static @NotNull ExistingTextureContent getInstance() {
+        if (instance == null) {
+            instance = new ExistingTextureContent();
+        }
+        return instance;
+    }
+
+    private ExistingTextureContent() {}
+
+    /**
+     * Since this is content that already exists, it does not need to be written
+     */
+    @Override
+    void writeToResourcePackTexture(@NotNull MutableResourcePackTexture resourcePackTexture) {}
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/FileToImportPathTextureContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/FileToImportPathTextureContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..d31d9dca41de97c57c51e0ca9c19abea7ea19e8a
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/FileToImportPathTextureContent.java
@@ -0,0 +1,39 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.texture;
+
+import net.minecraft.resources.ResourceLocation;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
+import nl.martijnmuijsers.paper.resourcepack.sucraft.CreateSuCraftResourcePack;
+import org.jetbrains.annotations.NotNull;
+
+import java.nio.file.Path;
+import java.util.function.Function;
+
+/**
+ * A basic form of {@link TextureContent}: whatever is in the file that the stored path points to
+ */
+public class FileToImportPathTextureContent extends TextureContent {
+
+    private final @NotNull String fileToImportPath;
+
+    FileToImportPathTextureContent(@NotNull String fileToImportPath) {
+        super();
+        this.fileToImportPath = fileToImportPath;
+    }
+
+    @Override
+    void writeToResourcePackTexture(@NotNull MutableResourcePackTexture resourcePackTexture) {
+        resourcePackTexture.setBasedOnFileToImport(this.fileToImportPath);
+    }
+
+    // Default import file path (for replacement rule builders)
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull String> DEFAULT_FILE_TO_IMPORT_PATH(@NotNull ResourcePackAssetIntention intention) {
+        return resourceLocation -> Path.of(CreateSuCraftResourcePack.INPUT_TEXTURES_FOLDER_PATH, NamespacedKeyWithoutIntention.forMinecraft(resourceLocation).withIntention(intention).keyWithIntention() + ResourcePackAssetType.TEXTURE.getDefaultFileExtension()).toString();
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
new file mode 100644
index 0000000000000000000000000000000000000000..541fabcc1f0205235d980fc934101aa630aa8bbc
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
@@ -0,0 +1,42 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.texture;
+
+import net.minecraft.resources.ResourceLocation;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackIntentionedAssetDataByContent;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.function.Function;
+
+/**
+ * An immutable item or block texture
+ */
+public class Texture extends ResourcePackIntentionedAssetDataByContent<TextureContent> {
+
+    public Texture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key, @NotNull TextureContent content) {
+        super(intention, key, content);
+    }
+
+    public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
+        @NotNull MutableResourcePackTexture resourcePackTexture = resourcePack.getOrCreateTexture(this.intention, this.key);
+        if (!resourcePackTexture.hasData() && !overwriteExisting) {
+            return;
+        }
+        this.content.writeToResourcePackTexture(resourcePackTexture);
+    }
+
+    // Texture by texture content (for replacement rule builders)
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull Texture> TEXTURE_BY_TEXTURE_CONTENT(@NotNull Function<@NotNull ResourceLocation, @NotNull TextureContent> textureContentFunction) {
+        return resourceLocation -> new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.forMinecraft(resourceLocation), textureContentFunction.apply(resourceLocation));
+    }
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull Texture> DEFAULT_TEXTURE(@NotNull ResourcePackAssetIntention intention) {
+        return TEXTURE_BY_TEXTURE_CONTENT(TextureContent.DEFAULT_TEXTURE_CONTENT(intention));
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..243b3072f942f044239f793443c03aa5d2cbbd13
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
@@ -0,0 +1,45 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.blockanditemdata.texture;
+
+import net.minecraft.resources.ResourceLocation;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetDataContent;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.function.Function;
+
+/**
+ * The immutable content of a texture: a {@link Texture} without any information about its appropriate location in a resource pack
+ */
+public abstract class TextureContent implements ResourcePackAssetDataContent {
+
+    protected TextureContent() {}
+
+    public @NotNull Texture asTexture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        return new Texture(intention, key, this);
+    }
+
+    abstract void writeToResourcePackTexture(@NotNull MutableResourcePackTexture resourcePackTexture);
+
+    public static @NotNull TextureContent existing() {
+        return ExistingTextureContent.getInstance();
+    }
+
+    public static @NotNull TextureContent fileToImport(@NotNull String fileToImportPath) {
+        return new FileToImportPathTextureContent(fileToImportPath);
+    }
+
+    // Texture content by file path (for replacement rule builders)
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull TextureContent> TEXTURE_CONTENT_BY_FILE_TO_IMPORT_PATH(@NotNull Function<@NotNull ResourceLocation, @NotNull String> fileToImportFunction) {
+        return resourceLocation -> TextureContent.fileToImport(fileToImportFunction.apply(resourceLocation));
+    }
+
+    public static @NotNull Function<@NotNull ResourceLocation, @NotNull TextureContent> DEFAULT_TEXTURE_CONTENT(@NotNull ResourcePackAssetIntention intention) {
+        return TEXTURE_CONTENT_BY_FILE_TO_IMPORT_PATH(FileToImportPathTextureContent.DEFAULT_FILE_TO_IMPORT_PATH(intention));
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/data/BlackHoleCachedOutput.java b/src/main/java/nl/martijnmuijsers/paper/data/BlackHoleCachedOutput.java
index 6af9cb40f08526365030843ca609220c6c16b120..9f609f9b9df23040416b3907f92cdda28153d0ad 100644
--- a/src/main/java/nl/martijnmuijsers/paper/data/BlackHoleCachedOutput.java
+++ b/src/main/java/nl/martijnmuijsers/paper/data/BlackHoleCachedOutput.java
@@ -4,8 +4,8 @@ package nl.martijnmuijsers.paper.data;
 
 import com.google.common.hash.HashCode;
 import net.minecraft.data.CachedOutput;
+import org.jetbrains.annotations.NotNull;
 
-import java.io.IOException;
 import java.nio.file.Path;
 
 /**
@@ -14,6 +14,6 @@ import java.nio.file.Path;
 public class BlackHoleCachedOutput implements CachedOutput {
 
     @Override
-    public void writeIfNeeded(Path path, byte[] data, HashCode hashCode) {}
+    public void writeIfNeeded(@NotNull Path path, byte @NotNull [] data, @NotNull HashCode hashCode) {}
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java b/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java
index 1491d5ff59ee49cd230f67eebf705d81c4e17dfb..4b30f9b23f095e6850d34161547c15cb23ac839e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java
+++ b/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java
@@ -11,6 +11,7 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.TagBuilder;
 import net.minecraft.tags.TagEntry;
 import net.minecraft.tags.TagKey;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -43,13 +44,13 @@ public abstract class SuCraftTagsProvider<T> {
 
             @Nullable
             @Override
-            public T element(ResourceLocation elementId) {
+            public T element(@NotNull ResourceLocation elementId) {
                 return SuCraftTagsProvider.this.registry.get(elementId);
             }
 
             @Nullable
             @Override
-            public Collection<T> tag(ResourceLocation otherTagId) {
+            public Collection<T> tag(@NotNull ResourceLocation otherTagId) {
                 TagKey<T> otherTagKey = TagKey.create(SuCraftTagsProvider.this.registry.key(), otherTagId);
                 return updatedRegistryTagEntries.get(otherTagKey).stream().map(Holder::value).toList();
             }
@@ -63,10 +64,10 @@ public abstract class SuCraftTagsProvider<T> {
             TagKey<T> tagKey = TagKey.create(SuCraftTagsProvider.this.registry.key(), tagId);
             // Get the tag entries that were added for this tag in addTags
             List<TagEntry> tagEntriesToMerge = builder.build();
-            // Filter only thetag  entries that exist (i.e. elements that exist in the registry, or tags that were defined earlier)
+            // Filter only the tag entries that exist (i.e. elements that exist in the registry, or tags that were defined earlier)
             List<TagEntry> validTagEntriesToMerge = new ArrayList<>(tagEntriesToMerge.size());
             tagEntriesToMerge.forEach(tagEntry -> {
-                if (tagEntry.verifyIfPresent(this.registry::containsKey, this.builders::containsKey)) { // Actually using existingRegistryEntries instead of this.builders seems more logical but the vanilla code uses builders so we'll just go with that
+                if (tagEntry.verifyIfPresent(this.registry::containsKey, this.builders::containsKey)) { // Actually using existingRegistryEntries instead of this.builders seems more logical but the vanilla code uses builders, so we'll just go with that
                     validTagEntriesToMerge.add(tagEntry);
                 } else {
                     MinecraftServer.LOGGER.error(String.format("The tag definition %s could not be fully defined as it is missing following reference: %s", tagId, tagEntry));
@@ -76,7 +77,7 @@ public abstract class SuCraftTagsProvider<T> {
             validTagEntriesToMerge.forEach(tagEntry ->
                 tagEntry.build(
                     lookup,
-                    newElement -> {
+                    newElement ->
                         updatedRegistryTagEntries.compute(tagKey, (sameTagKey, elementsForTag) -> {
                             if (elementsForTag == null) {
                                 // Make sure the list of elements for this tag exists
@@ -90,8 +91,7 @@ public abstract class SuCraftTagsProvider<T> {
                             elementsForTag.add(holder);
                             // Return the new list of elements for this tag
                             return elementsForTag;
-                        });
-                    }
+                        })
                 )
             );
         });
@@ -106,9 +106,7 @@ public abstract class SuCraftTagsProvider<T> {
     }
 
     protected TagBuilder getOrCreateRawBuilder(TagKey<T> tag) {
-        return this.builders.computeIfAbsent(tag.location(), (id) -> {
-            return TagBuilder.create();
-        });
+        return this.builders.computeIfAbsent(tag.location(), (id) -> TagBuilder.create());
     }
 
     protected static class TagAppender<T> {
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index 86d0a36f489018674a7abc930728276f268e4547..be9a7e40394c5a7bd705b4e5c44240e71a96eeea 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -1,26 +1,32 @@
 package nl.martijnmuijsers.paper.item;
 
+import com.google.common.collect.Lists;
+import net.minecraft.ChatFormatting;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.Style;
+import net.minecraft.network.chat.TextColor;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.item.Rarity;
 import net.minecraft.world.level.block.Block;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackBlockStates;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import org.apache.commons.lang3.Validate;
-import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.function.Function;
+import java.util.function.Predicate;
 import java.util.function.Supplier;
 
 public interface ItemReplacementRule {
@@ -49,6 +55,8 @@ public interface ItemReplacementRule {
             private @Nullable Supplier<@NotNull Item> hostSupplier;
             private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
             private @Nullable Supplier<@NotNull Item> fallbackSupplier;
+            private @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate = item -> false;
+            private @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction = item -> null;
             private @Nullable Supplier<@NotNull Model> modelSupplier;
 
             @Override
@@ -68,7 +76,7 @@ public interface ItemReplacementRule {
             }
 
             public @NotNull SimpleItemReplacementRule.Builder withNextUnusedHostCustomModelData() {
-                this.computeHostCustomModelData = host -> UsedHostCustomModelData.generateUnusedHostCustomModelData(host);
+                this.computeHostCustomModelData = UsedHostCustomModelData::generateUnusedHostCustomModelData;
                 return this;
             }
 
@@ -77,6 +85,16 @@ public interface ItemReplacementRule {
                 return this;
             }
 
+            public @NotNull SimpleItemReplacementRule.Builder withIsBlockHostReplacing(@NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate) {
+                this.isBlockHostReplacingPredicate = isBlockHostReplacingPredicate;
+                return this;
+            }
+
+            public @NotNull SimpleItemReplacementRule.Builder withBlockHostReplacingItemReplacement(@NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction) {
+                this.blockHostReplacingItemReplacementFunction = blockHostReplacingItemReplacementFunction;
+                return this;
+            }
+
             public @NotNull SimpleItemReplacementRule.Builder withModel(@NotNull Model model) {
                 this.modelSupplier = () -> model;
                 return this;
@@ -85,17 +103,19 @@ public interface ItemReplacementRule {
             public @NotNull SimpleItemReplacementRule.Builder withModelContent(@NotNull ModelContent modelContent) {
                 this.modelSupplier = () -> {
                     Validate.notNull(this.real);
-                    return modelContent.asModel(ModelType.ITEM, Registry.ITEM.getKey(this.real).asBukkit());
+                    return modelContent.asModel(ResourcePackAssetIntention.ITEM, NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(this.real)));
                 };
                 return this;
             }
 
             public @NotNull SimpleItemReplacementRule.Builder forBlock(@NotNull Block block) {
                 return this
-                    .withHost(() -> Items.BARRIER)
+                    .withHost(() -> block.replacementRule.getHostItem())
                     .withNextUnusedHostCustomModelData()
                     .withFallback(() -> block.replacementRule.getFallbackItem())
-                    .withModel(block.replacementRule.getModelForStatePlacedByItem().getReference(ModelType.ITEM));
+                    .withIsBlockHostReplacing(item -> block.replacementRule.isHostReplacing(item))
+                    .withBlockHostReplacingItemReplacement(item -> block.replacementRule.getHostReplacingItemReplacement(item))
+                    .withModel(block.replacementRule.getModelForStatePlacedByItem().getReference(ResourcePackAssetIntention.ITEM));
             }
 
             @Override
@@ -105,7 +125,7 @@ public interface ItemReplacementRule {
                 Validate.notNull(this.computeHostCustomModelData);
                 Validate.notNull(this.fallbackSupplier);
                 Validate.notNull(this.modelSupplier);
-                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier, this.modelSupplier.get());
+                return new SimpleItemReplacementRule(this.real, this.hostSupplier, this.computeHostCustomModelData, this.fallbackSupplier, this.isBlockHostReplacingPredicate, this.blockHostReplacingItemReplacementFunction, this.modelSupplier.get());
             }
 
         }
@@ -117,15 +137,52 @@ public interface ItemReplacementRule {
         private @Nullable Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData;
         private @Nullable Item fallback = null;
         private @Nullable Supplier<@NotNull Item> fallbackSupplier;
-        private @NotNull Model model;
+        private final @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate;
+        private final @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction;
+        private final @NotNull Model model;
 
-        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull Model model) {
+        private SimpleItemReplacementRule(@NotNull Item real, @NotNull Supplier<@NotNull Item> hostSupplier, @NotNull Function<@NotNull Item, @NotNull Integer> computeHostCustomModelData, @NotNull Supplier<@NotNull Item> fallbackSupplier, @NotNull Predicate<@NotNull Item> isBlockHostReplacingPredicate, @NotNull Function<@NotNull Item, @Nullable Item> blockHostReplacingItemReplacementFunction, @NotNull Model model) {
             this.real = real;
             this.hostSupplier = hostSupplier;
             this.computeHostCustomModelData = computeHostCustomModelData;
             this.fallbackSupplier = fallbackSupplier;
+            this.isBlockHostReplacingPredicate = isBlockHostReplacingPredicate;
+            this.blockHostReplacingItemReplacementFunction = blockHostReplacingItemReplacementFunction;
             this.model = model;
-            Validate.isTrue(this.model.getType() == ModelType.ITEM);
+            Validate.isTrue(this.model.getIntention() == ResourcePackAssetIntention.ITEM);
+        }
+
+        /**
+         * Will set the display name if there is no custom display name set, and if a custom display name is set, will set the given string as a prefix line in lore (to avoid confusion, by avoiding players having to look at the namespaced key shown with F3+H, which would typically be wrong)
+         * @param tag Optional, just for convenience in case we already have it to avoid unnecessarily retrieving it twice
+         * @param rarity Optional as an override, will otherwise be retrieved from the item if needed
+         */
+        private void replaceItemStackDisplayName(@NotNull ItemStack item, @Nullable CompoundTag tag, @Nullable Rarity rarity, @NotNull String displayNameJSON, @NotNull String displayNameInLoreJSON) {
+            if (tag == null) {
+                tag = item.getOrCreateTag();
+            }
+            if (rarity == null) {
+                rarity = item.getRarity();
+            }
+            // Setting display name is based on CraftMetaItem.applyToItem(CompoundTag)
+            // Could potentially also be based on ItemStack.setHoverName(Component)
+            final CompoundTag display = tag.getCompound(CraftMetaItem.DISPLAY.NBT);
+            if (!tag.contains(CraftMetaItem.DISPLAY.NBT)) {
+                tag.put(CraftMetaItem.DISPLAY.NBT, display);
+            }
+            if (!display.contains(CraftMetaItem.NAME.NBT)) {
+                display.putString(CraftMetaItem.NAME.NBT, displayNameJSON);
+            } else {
+                display.putString(CraftMetaItem.NAME.NBT, Component.Serializer.toJson(Component.Serializer.fromJson(display.getString(CraftMetaItem.NAME.NBT)).withStyle(Style.EMPTY.withColor(rarity.color))));
+                ListTag lore;
+                if (!display.contains(CraftMetaItem.LORE.NBT)) {
+                    lore = new ListTag();
+                    display.put(CraftMetaItem.LORE.NBT, lore);
+                } else {
+                    lore = display.getList(CraftMetaItem.LORE.NBT, 8);
+                }
+                lore.add(0, StringTag.valueOf(displayNameInLoreJSON));
+            }
         }
 
         @Override
@@ -140,13 +197,13 @@ public interface ItemReplacementRule {
                 } else {
                     clone.setItem(this.getFallback());
                 }
-                // Setting display name is based on CraftMetaItem.applyToItem(CompoundTag)
-                // Could potentially also be based on ItemStack.setHoverName(Component)
-                final CompoundTag display = tag.getCompound(CraftMetaItem.DISPLAY.NBT);
-                if (!tag.contains(CraftMetaItem.DISPLAY.NBT)) {
-                    tag.put(CraftMetaItem.DISPLAY.NBT, display);
-                }
-                display.put(CraftMetaItem.NAME.NBT, StringTag.valueOf(this.real.customDisplayNameJSON));
+                replaceItemStackDisplayName(clone, tag, item.getRarity(), this.real.customDisplayNameJSON, this.real.customDisplayNameInLoreJSON);
+                return clone;
+            } else if (this.isBlockHostReplacing(item.getItem()) && hasResourcePack) {
+                @NotNull ItemStack clone = item.copy();
+                clone.setItem(this.getBlockHostReplacingItemReplacement(item.getItem()));
+                var description = Component.translatable(item.getDescriptionId());
+                replaceItemStackDisplayName(clone, null, item.getRarity(), Component.Serializer.toJson(description.withStyle(Style.EMPTY.withColor(clone.getRarity().color).withItalic(false))), Component.Serializer.toJson(description.withStyle(Style.EMPTY.withColor(SuCraftItems.CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR).withItalic(false))));
                 return clone;
             }
             return null;
@@ -181,6 +238,23 @@ public interface ItemReplacementRule {
             return this.fallback;
         }
 
+        /**
+         * Returns true if the given item is a block item that if placed by a player, would place a block in a state that serves as a host for this item's block,
+         * <br>
+         * or false if:
+         * <ul>
+         *     <li>this item is not for a block, or</li>
+         *     <li>if the block this item is for does not have any hosts that can be the state for a block to appear on using some host block's item to place it</li>
+         * </ul>
+         */
+        private boolean isBlockHostReplacing(@NotNull Item item) {
+            return this.isBlockHostReplacingPredicate.test(item);
+        }
+
+        private @Nullable Item getBlockHostReplacingItemReplacement(@NotNull Item item) {
+            return this.blockHostReplacingItemReplacementFunction.apply(item);
+        }
+
         @Override
         public @NotNull Model getModel() {
             return this.model;
@@ -188,9 +262,9 @@ public interface ItemReplacementRule {
 
         @Override
         public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
-            @NotNull NamespacedKey hostKey = Registry.ITEM.getKey(this.getHost()).asBukkit();
-            @NotNull MutableResourcePackModel minecraftModel = resourcePack.getModel(ModelType.ITEM, hostKey);
-            minecraftModel.addModelOverride(this.getHostCustomModelData(), this.model, resourcePack, false);
+            @NotNull NamespacedKeyWithoutIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.ITEM.getKey(this.getHost()));
+            @NotNull MutableResourcePackModel minecraftItemModel = resourcePack.getModel(ResourcePackAssetIntention.ITEM, hostKey);
+            minecraftItemModel.addModelOverride(this.getHostCustomModelData(), this.model, resourcePack, false);
         }
 
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 7de706a5c4c6c8e7951b3ea8365e193bb0591f18..5425beab643177ca22edbb721f62a13a564f0bd5 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -1,3 +1,4 @@
+
 // Martijn - custom blocks and items
 
 package nl.martijnmuijsers.paper.item;
@@ -6,21 +7,24 @@ import io.papermc.paper.adventure.PaperAdventure;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.TextDecoration;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
-import net.kyori.examination.Examinable;
+import net.minecraft.ChatFormatting;
 import net.minecraft.core.Registry;
-import net.minecraft.server.MinecraftServer;
+import net.minecraft.network.chat.TextColor;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Item;
-import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.item.Items;
+import nl.martijnmuijsers.paper.block.BlockReplacementRule;
 import nl.martijnmuijsers.paper.block.SuCraftBlocks;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Based on {@link net.minecraft.world.item.Items}
  */
 public class SuCraftItems {
 
+    public static final @NotNull ChatFormatting CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR = ChatFormatting.DARK_GRAY;
+
     /**
      * Based on {@link Items#STONE_BRICKS}
      */
@@ -32,11 +36,23 @@ public class SuCraftItems {
         registeredItem.replacementRule = ItemReplacementRule.simple().withReal(registeredItem).forBlock(block).build();
         registeredItem.customDisplayName = Component.text(displayName, PaperAdventure.asAdventure(registeredItem.rarity.color)).decoration(TextDecoration.ITALIC, false);
         registeredItem.customDisplayNameJSON = GsonComponentSerializer.gson().serialize(registeredItem.customDisplayName);
+        registeredItem.customDisplayName = Component.text(displayName, PaperAdventure.asAdventure(CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR)).decoration(TextDecoration.ITALIC, false);
+        registeredItem.customDisplayNameInLoreJSON = GsonComponentSerializer.gson().serialize(registeredItem.customDisplayName);
         return registeredItem;
     }
 
     public static Item bootstrap() {
-        return SNOWY_STONE_BRICKS.asItem();
+        SNOWY_STONE_BRICKS.toString();
+        // Make sure that the item replacement rule for block items for which the block has some hosts that are potentially placed by vanilla items is registered with those vanilla items
+        for (Block block : Registry.BLOCK) {
+            BlockReplacementRule replacementRule = block.replacementRule;
+            if (replacementRule != null) {
+                for (Item item : replacementRule.getHostReplacingItems()) {
+                    item.replacementRule = block.asItem().replacementRule;
+                }
+            }
+        }
+        return SNOWY_STONE_BRICKS;
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/UsedHostCustomModelData.java b/src/main/java/nl/martijnmuijsers/paper/item/UsedHostCustomModelData.java
index 3b510c88a719b982edaccb5c4adeb5cc4c3e273d..06a0dc24555614354b73c1d863d9e628e4ff84bc 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/UsedHostCustomModelData.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/UsedHostCustomModelData.java
@@ -5,9 +5,7 @@ package nl.martijnmuijsers.paper.item;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.world.item.Item;
-
-import java.util.HashMap;
-import java.util.Map;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * A utility class that keeps track of used custom model data in item replacement hosts
@@ -16,7 +14,7 @@ public final class UsedHostCustomModelData {
 
     private UsedHostCustomModelData() {}
 
-    private static Object2IntMap<Item> lastUsed = new Object2IntOpenHashMap<>(0);
+    private static final @NotNull Object2IntMap<@NotNull Item> lastUsed = new Object2IntOpenHashMap<>(0);
 
     static {
         lastUsed.defaultReturnValue(0); // After all, the custom model data 0 is always in use
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonMerging.java b/src/main/java/nl/martijnmuijsers/paper/json/JsonMerging.java
similarity index 97%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonMerging.java
rename to src/main/java/nl/martijnmuijsers/paper/json/JsonMerging.java
index b3a16a1c058c37d53497fe0e39b985350cd79dea..be98f3856147b681feb9895423e5f2a49a7f87f5 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonMerging.java
+++ b/src/main/java/nl/martijnmuijsers/paper/json/JsonMerging.java
@@ -1,6 +1,6 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.json;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
diff --git a/src/main/java/nl/martijnmuijsers/paper/protocol/CachableCustomContentReplaceable.java b/src/main/java/nl/martijnmuijsers/paper/protocol/CachableCustomContentReplaceable.java
index 319553033ffc4de9dfe4d4b4977fa3f1d8cee91f..c6967b23c422a0e4a0bf6f1a2bcf6465f99106cc 100644
--- a/src/main/java/nl/martijnmuijsers/paper/protocol/CachableCustomContentReplaceable.java
+++ b/src/main/java/nl/martijnmuijsers/paper/protocol/CachableCustomContentReplaceable.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
 /**
  * An interface for classes that have custom content that may need to be replaced when being sent to a player
  */
-public interface CachableCustomContentReplaceable<T extends CachableCustomContentReplaceable> {
+public interface CachableCustomContentReplaceable<T extends CachableCustomContentReplaceable<T>> {
 
     /**
      * Note: this may not make a full independent copy, merely a copy for the purpose of replacing custom content
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
index 81115881f220e9489800189f10e0da3787478613..8d002ace564f2df10f3cc47c1c569f14dd43b5c1 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
@@ -16,6 +16,11 @@ public final class KeyConstants {
      */
     public static final @NotNull String pack = "pack";
 
+    /**
+     * The resource pack format version
+     */
+    public static final @NotNull String packFormat = "pack_format";
+
     /**
      * The description of a resource pack
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
index 597c35fa286f91e94fbc54e98134917c5be90314..40482092b4e5132462d7947741366d2612f47a9e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePack.java
@@ -2,8 +2,15 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
-import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.asset.InitializableResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.MutableResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -14,64 +21,55 @@ public interface MutableResourcePack extends ResourcePack {
 
     @NotNull ResourcePackSettings getSettings();
 
-    /**
-     * Note that the key must be typed, if any
-     */
     @Override
-    @NotNull MutableResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key) throws IllegalArgumentException;
+    @NotNull MutableResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException;
 
-    /**
-     * Note that the key must be typed, if any
-     */
     @Override
-    default @Nullable MutableResourcePackAsset getOptionalAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key) {
+    default @Nullable MutableResourcePackAsset getOptionalAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) {
         return (MutableResourcePackAsset) ResourcePack.super.getOptionalAsset(type, key);
     }
 
-    /**
-     * Note that the key must be typed, if any
-     */
-    @NotNull MutableResourcePackAsset getOrCreateAsset(@NotNull InitializableResourcePackAssetType type, @NotNull NamespacedKey key) throws IllegalArgumentException;
+    @NotNull MutableResourcePackAsset getOrCreateAsset(@NotNull InitializableResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException;
 
-    /**
-     * Note that the key must be typed, if any
-     */
-    default <T extends MutableResourcePackAsset> @NotNull T getOrCreateAsset(@NotNull InitializableResourcePackAssetType type, @NotNull NamespacedKey key, @NotNull Class<T> clazz) throws IllegalArgumentException {
+    default <T extends MutableResourcePackAsset> @NotNull T getOrCreateAsset(@NotNull InitializableResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key, @NotNull Class<T> clazz) throws IllegalArgumentException {
         //noinspection unchecked
         return (T) this.getOrCreateAsset(type, key);
     }
 
-    default @NotNull MutableResourcePackBlockStates getBlockStates(@NotNull NamespacedKey key) throws IllegalArgumentException {
+    default @NotNull MutableResourcePackBlockStates getBlockStates(@NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         return this.getAsset(ResourcePackAssetType.BLOCK_STATES, key, MutableResourcePackBlockStates.class);
     }
 
-    default @Nullable MutableResourcePackBlockStates getOptionalBlockStates(@NotNull NamespacedKey key) {
+    default @Nullable MutableResourcePackBlockStates getOptionalBlockStates(@NotNull NamespacedKeyWithIntention key) {
         return this.getOptionalAsset(ResourcePackAssetType.BLOCK_STATES, key, MutableResourcePackBlockStates.class);
     }
 
-    default @NotNull MutableResourcePackBlockStates getOrCreateBlockStates(@NotNull NamespacedKey key) throws IllegalArgumentException {
+    default @NotNull MutableResourcePackBlockStates getOrCreateBlockStates(@NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         return this.getOrCreateAsset(ResourcePackAssetType.BLOCK_STATES, key, MutableResourcePackBlockStates.class);
     }
 
-    /**
-     * Note that the key must be untyped
-     */
-    default @NotNull MutableResourcePackModel getModel(@NotNull ModelType type, @NotNull NamespacedKey key) throws IllegalArgumentException {
-        return this.getAsset(ResourcePackAssetType.MODEL, type.getTypedKey(key), MutableResourcePackModel.class);
+    default @NotNull MutableResourcePackModel getModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) throws IllegalArgumentException {
+        return this.getAsset(ResourcePackAssetType.MODEL, key.withIntention(intention), MutableResourcePackModel.class);
     }
 
-    /**
-     * Note that the key must be untyped
-     */
-    default @Nullable MutableResourcePackModel getOptionalModel(@NotNull ModelType type, @NotNull NamespacedKey key) {
-        return this.getOptionalAsset(ResourcePackAssetType.MODEL, type.getTypedKey(key), MutableResourcePackModel.class);
+    default @Nullable MutableResourcePackModel getOptionalModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        return this.getOptionalAsset(ResourcePackAssetType.MODEL, key.withIntention(intention), MutableResourcePackModel.class);
     }
 
-    /**
-     * Note that the key must be untyped
-     */
-    default @NotNull MutableResourcePackModel getOrCreateModel(@NotNull ModelType type, @NotNull NamespacedKey key) throws IllegalArgumentException {
-        return this.getOrCreateAsset(ResourcePackAssetType.MODEL, type.getTypedKey(key), MutableResourcePackModel.class);
+    default @NotNull MutableResourcePackModel getOrCreateModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) throws IllegalArgumentException {
+        return this.getOrCreateAsset(ResourcePackAssetType.MODEL, key.withIntention(intention), MutableResourcePackModel.class);
+    }
+
+    default @NotNull MutableResourcePackTexture getTexture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) throws IllegalArgumentException {
+        return this.getAsset(ResourcePackAssetType.TEXTURE, key.withIntention(intention), MutableResourcePackTexture.class);
+    }
+
+    default @Nullable MutableResourcePackTexture getOptionalTexture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        return this.getOptionalAsset(ResourcePackAssetType.TEXTURE, key.withIntention(intention), MutableResourcePackTexture.class);
+    }
+
+    default @NotNull MutableResourcePackTexture getOrCreateTexture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) throws IllegalArgumentException {
+        return this.getOrCreateAsset(ResourcePackAssetType.TEXTURE, key.withIntention(intention), MutableResourcePackTexture.class);
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
index b3733430eee1dad737187d1f947ad177f65f2d61..54e79eda1d9bba343959b224e35fd3caa0f1492f 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/PathConstants.java
@@ -2,7 +2,7 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -22,16 +22,6 @@ public final class PathConstants {
 
     }
 
-    /**
-     * The prefixes (separated from the regular key with a slash) for certain asset type subtypes (meant to differentiate their intention)
-     */
-    public static final class IntentionKeyPrefixes {
-
-        public static final @NotNull String block = "block";
-        public static final @NotNull String item = "item";
-
-    }
-
     /**
      * The assets folder
      */
@@ -65,7 +55,7 @@ public final class PathConstants {
          */
         public static final class Block {
 
-            public static final @NotNull String name = IntentionKeyPrefixes.block;
+            public static final @NotNull String name = ResourcePackAssetIntention.BLOCK.prefix;
             public static final @NotNull String pathInNamespaceFolder = Models.pathInNamespaceFolder + "/" + name;
 
         }
@@ -75,7 +65,7 @@ public final class PathConstants {
          */
         public static final class Item {
 
-            public static final @NotNull String name = IntentionKeyPrefixes.item;
+            public static final @NotNull String name = ResourcePackAssetIntention.ITEM.prefix;
             public static final @NotNull String pathInNamespaceFolder = Models.pathInNamespaceFolder + "/" + name;
 
         }
@@ -95,7 +85,7 @@ public final class PathConstants {
          */
         public static final class Block {
 
-            public static final @NotNull String name = IntentionKeyPrefixes.block;
+            public static final @NotNull String name = ResourcePackAssetIntention.BLOCK.prefix;
             public static final @NotNull String pathInNamespaceFolder = Textures.pathInNamespaceFolder + "/" + name;
 
         }
@@ -105,27 +95,15 @@ public final class PathConstants {
          */
         public static final class Item {
 
-            public static final @NotNull String name = IntentionKeyPrefixes.item;
+            public static final @NotNull String name = ResourcePackAssetIntention.ITEM.prefix;
             public static final @NotNull String pathInNamespaceFolder = Textures.pathInNamespaceFolder + "/" + name;
 
         }
 
     }
 
-    public static @NotNull NamespacedKey getBlockKey(@NotNull NamespacedKey block) {
-        return new NamespacedKey(block.getNamespace(), IntentionKeyPrefixes.block + "/" + block.getKey());
-    }
-
-    public static @NotNull NamespacedKey getItemKey(@NotNull NamespacedKey item) {
-        return new NamespacedKey(item.getNamespace(), IntentionKeyPrefixes.item + "/" + item.getKey());
-    }
-
     public static @NotNull String getNamespaceFolderPathFromRoot(@NotNull String namespace) {
         return Assets.pathFromRoot + "/" + namespace;
     }
 
-    public static @NotNull String getNamespaceFolderPathFromRoot(@NotNull NamespacedKey key) {
-       return getNamespaceFolderPathFromRoot(key.getNamespace());
-    }
-
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
index 739bfd6e3a1527f156fa83944d11163ab219665e..2cd9daad642bb1a76e8173a8231d1742c74e86e9 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePack.java
@@ -2,27 +2,35 @@
 
 package nl.martijnmuijsers.paper.resourcepack;
 
-import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
-import org.bukkit.NamespacedKey;
+import it.unimi.dsi.fastutil.Pair;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.ResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.ResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.ResourcePackTexture;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.concurrent.Callable;
+import java.util.stream.Stream;
+
 /**
  * An interface that provides getters to get things out of an existing resource pack, for example one defined by an archive filename, or one currently being built in memory.
  */
 public interface ResourcePack {
 
+    @NotNull Stream<@NotNull Pair<@NotNull String, @NotNull Callable<@NotNull InputStream>>> getAllFilesStream() throws IOException;
+
     @NotNull ResourcePackSettings getSettings();
 
-    /**
-     * Note that the key must be typed, if any
-     */
-    @NotNull ResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key) throws IllegalArgumentException;
+    @NotNull ResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException;
 
-    /**
-     * Note that the key must be typed, if any
-     */
-    default @Nullable ResourcePackAsset getOptionalAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key) {
+    default @Nullable ResourcePackAsset getOptionalAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) {
         try {
             return this.getAsset(type, key);
         } catch (Exception e) {
@@ -30,42 +38,38 @@ public interface ResourcePack {
         }
     }
 
-    /**
-     * Note that the key must be typed, if any
-     */
-    default <T extends ResourcePackAsset> @NotNull T getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key, @NotNull Class<T> clazz) throws IllegalArgumentException {
+    default <T extends ResourcePackAsset> @NotNull T getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key, @NotNull Class<T> clazz) throws IllegalArgumentException {
         //noinspection unchecked
         return (T) this.getAsset(type, key);
     }
 
-    /**
-     * Note that the key must be typed, if any
-     */
-    default <T extends ResourcePackAsset> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key, @NotNull Class<T> clazz) {
+    default <T extends ResourcePackAsset> @Nullable T getOptionalAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key, @NotNull Class<T> clazz) {
         //noinspection unchecked
         return (T) this.getOptionalAsset(type, key);
     }
 
-    default @NotNull ResourcePackBlockStates getBlockStates(@NotNull NamespacedKey key) throws IllegalArgumentException {
+    default @NotNull ResourcePackBlockStates getBlockStates(@NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         return this.getAsset(ResourcePackAssetType.BLOCK_STATES, key, ResourcePackBlockStates.class);
     }
 
-    default @Nullable ResourcePackBlockStates getOptionalBlockStates(@NotNull NamespacedKey key) {
+    default @Nullable ResourcePackBlockStates getOptionalBlockStates(@NotNull NamespacedKeyWithIntention key) {
         return this.getOptionalAsset(ResourcePackAssetType.BLOCK_STATES, key, ResourcePackBlockStates.class);
     }
 
-    /**
-     * Note that the key must be untyped
-     */
-    default @NotNull ResourcePackModel getModel(@NotNull ModelType type, @NotNull NamespacedKey key) throws IllegalArgumentException {
-        return this.getAsset(ResourcePackAssetType.MODEL, type.getTypedKey(key), ResourcePackModel.class);
+    default @NotNull ResourcePackModel getModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) throws IllegalArgumentException {
+        return this.getAsset(ResourcePackAssetType.MODEL, key.withIntention(intention), ResourcePackModel.class);
+    }
+
+    default @Nullable ResourcePackModel getOptionalModel(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        return this.getOptionalAsset(ResourcePackAssetType.MODEL, key.withIntention(intention), ResourcePackModel.class);
+    }
+
+    default @NotNull ResourcePackTexture getTexture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) throws IllegalArgumentException {
+        return this.getAsset(ResourcePackAssetType.TEXTURE, key.withIntention(intention), ResourcePackTexture.class);
     }
 
-    /**
-     * Note that the key must be untyped
-     */
-    default @Nullable ResourcePackModel getOptionalModel(@NotNull ModelType type, @NotNull NamespacedKey key) {
-        return this.getOptionalAsset(ResourcePackAssetType.MODEL, type.getTypedKey(key), ResourcePackModel.class);
+    default @Nullable ResourcePackTexture getOptionalTexture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        return this.getOptionalAsset(ResourcePackAssetType.TEXTURE, key.withIntention(intention), ResourcePackTexture.class);
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java
index 35e37144d853f3e65513c608d7acad52c799b2b9..0735331150608e9ee745263ae8f2bda7ccb3aea0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackSettings.java
@@ -1,6 +1,8 @@
 package nl.martijnmuijsers.paper.resourcepack;
 
 import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.resourcepack.sucraft.CreateSuCraftResourcePack;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -12,4 +14,13 @@ public interface ResourcePackSettings {
 
     @NotNull JsonElement getDescription();
 
+    default @NotNull JsonObject createJson() {
+        JsonObject json = new JsonObject();
+        JsonObject packJson = new JsonObject();
+        json.add(KeyConstants.pack, packJson);
+        packJson.addProperty(KeyConstants.packFormat, CreateSuCraftResourcePack.RESOURCE_PACK_FORMAT);
+        packJson.add(KeyConstants.packDescription, getDescription());
+        return json;
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/InitializableResourcePackAssetType.java
similarity index 90%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/InitializableResourcePackAssetType.java
index 75106c68020ed1fc32e3d64ead0c33296b263ce7..d668f71be625cd3ad1f2de4a821146b004d665b5 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/InitializableResourcePackAssetType.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/InitializableResourcePackAssetType.java
@@ -1,6 +1,6 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset;
 
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/MutableResourcePackAsset.java
similarity index 96%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/MutableResourcePackAsset.java
index ddb6530727c68866cff73944be347517cb17854e..d85c52b3cbb4eaad314e7fe66bfd83ef50615a65 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/MutableResourcePackAsset.java
@@ -1,6 +1,6 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset;
 
 import org.jetbrains.annotations.NotNull;
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java
similarity index 53%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java
index 7c2d99389311aa736153608487157b7cf20aee9d..eb8f64afe4c505bc3703ac9ccea9bf011646c868 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAsset.java
@@ -1,10 +1,14 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset;
 
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import org.jetbrains.annotations.NotNull;
 
+import java.io.IOException;
+import java.io.OutputStream;
+
 /**
  * An asset (element of some asset type) in a {@link ResourcePack}
  */
@@ -12,12 +16,17 @@ public interface ResourcePackAsset {
 
     @NotNull ResourcePackAssetType getType();
 
-    @NotNull NamespacedKey getKey();
+    /**
+     * This key does not include the asset type folder (such as models) but does include any subfolders that are an intention (such as block)
+     */
+    @NotNull NamespacedKeyWithIntention getKey();
 
     default @NotNull String getPathInResourcePack() {
         return this.getType().getPathInResourcePack(this.getKey());
     }
 
+    void writeTo(@NotNull OutputStream outputStream) throws IOException;
+
     /**
      * Gets the result of merging this asset with the given one
      * <br>
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAssetDataContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAssetDataContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..25237ac03a56ac1e26e09c651380786cb45e7bc6
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAssetDataContent.java
@@ -0,0 +1,5 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset;
+
+public interface ResourcePackAssetDataContent {}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAssetType.java
similarity index 60%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAssetType.java
index bba7196f71c0c8d6d11b1e1a6bf1114a3210142f..fb4c1abc97dfa44b9eaa5d1843e01808c1182ef6 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackAssetType.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackAssetType.java
@@ -1,8 +1,11 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset;
 
-import org.bukkit.NamespacedKey;
+import net.minecraft.server.MinecraftServer;
+import nl.martijnmuijsers.paper.resourcepack.PathConstants;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import org.apache.commons.lang3.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -13,12 +16,13 @@ public class ResourcePackAssetType {
 
     public static final @NotNull InitializableResourcePackAssetType BLOCK_STATES = new InitializableResourcePackAssetType(PathConstants.BlockStates.pathInNamespaceFolder, ".json");
     public static final @NotNull InitializableResourcePackAssetType MODEL = new InitializableResourcePackAssetType(PathConstants.Models.pathInNamespaceFolder, ".json");
+    public static final @NotNull InitializableResourcePackAssetType TEXTURE = new InitializableResourcePackAssetType(PathConstants.Textures.pathInNamespaceFolder, ".png");
 
     private final @NotNull String folderPathInNamespaceFolder;
     /**
      * This extension includes the dot separating the filename from the extension (so this may be an empty string to indicate that this asset type's files have no extension at all)
      */
-    private final @Nullable String defaultFileExtension;
+    public final @Nullable String defaultFileExtension;
 
     protected ResourcePackAssetType(@NotNull String folderName, @Nullable String defaultFileExtension) {
         this.folderPathInNamespaceFolder = folderName;
@@ -29,14 +33,19 @@ public class ResourcePackAssetType {
         return this.folderPathInNamespaceFolder;
     }
 
-    /**
-     * Note that the given asset key must be typed
-     */
-    public @NotNull String getPathInResourcePack(@NotNull NamespacedKey assetKey) {
+    public @NotNull String getDefaultFileExtension() throws IllegalStateException {
+        try {
+            return Validate.notNull(this.defaultFileExtension);
+        } catch (NullPointerException e) {
+            throw new IllegalStateException("Called ResourcePackAssetType.getDefaultFileExtension for a type that does not have a default file extension");
+        }
+    }
+
+    public @NotNull String getPathInResourcePack(@NotNull NamespacedKeyWithIntention assetKey) {
         if (this.defaultFileExtension == null) {
             throw new IllegalStateException("Called ResourcePackAssetType.getPathInResourcePack while defaultFileExtension was not set: if a type has multiple extensions, this method cannot be used, and ResourcePackAsset.getPathInResourcePack should be overridden as appropriate");
         }
-        return PathConstants.getNamespaceFolderPathFromRoot(assetKey) + "/" + this.getFolderPathInNamespaceFolder() + "/" + assetKey.getKey() + this.defaultFileExtension;
+        return PathConstants.getNamespaceFolderPathFromRoot(assetKey.namespace()) + "/" + this.getFolderPathInNamespaceFolder() + "/" + assetKey.keyWithIntention() + this.defaultFileExtension;
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackIntentionedAssetData.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackIntentionedAssetData.java
new file mode 100644
index 0000000000000000000000000000000000000000..66e5d7775df20d785860abe085356d3c8cd379ae
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackIntentionedAssetData.java
@@ -0,0 +1,32 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.jetbrains.annotations.NotNull;
+
+public abstract class ResourcePackIntentionedAssetData {
+
+    protected final @NotNull ResourcePackAssetIntention intention;
+    protected final @NotNull NamespacedKeyWithoutIntention key;
+
+    protected ResourcePackIntentionedAssetData(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key) {
+        this.intention = intention;
+        this.key = key;
+    }
+
+    public @NotNull ResourcePackAssetIntention getIntention() {
+        return this.intention;
+    }
+
+    public @NotNull NamespacedKeyWithoutIntention getKey() {
+        return this.key;
+    }
+
+    public @NotNull NamespacedKeyWithIntention getKeyWithIntention() {
+        return this.key.withIntention(this.intention);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackIntentionedAssetDataByContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackIntentionedAssetDataByContent.java
new file mode 100644
index 0000000000000000000000000000000000000000..3c24d7070a2958d94fb925197f8f47bc70f05bfe
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/ResourcePackIntentionedAssetDataByContent.java
@@ -0,0 +1,22 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
+import org.jetbrains.annotations.NotNull;
+
+public abstract class ResourcePackIntentionedAssetDataByContent<T extends ResourcePackAssetDataContent> extends ResourcePackIntentionedAssetData {
+
+    protected final @NotNull T content;
+
+    protected ResourcePackIntentionedAssetDataByContent(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key, @NotNull T content) {
+        super(intention, key);
+        this.content = content;
+    }
+
+    public @NotNull T getContent() {
+        return this.content;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/SimpleResourcePackAsset.java
similarity index 53%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/SimpleResourcePackAsset.java
index 39efc87582c2ecff1823f83f83b4d82216aa87da..d2c7592594da0701ed1fcd03261fd8ec6a8bcc53 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/SimpleResourcePackAsset.java
@@ -1,33 +1,33 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset;
 
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import org.jetbrains.annotations.NotNull;
 
+import java.io.IOException;
+import java.io.OutputStream;
+
 /**
  * Base implementation of {@link MutableResourcePackAsset}
  */
 public abstract class SimpleResourcePackAsset implements MutableResourcePackAsset {
 
-    /**
-     * This key does not include the asset folder (such as models) but does include any subfolders (such as block)
-     */
-    private final @NotNull NamespacedKey key;
+    private final @NotNull NamespacedKeyWithIntention key;
 
     private boolean dirty;
 
-    protected SimpleResourcePackAsset(@NotNull NamespacedKey key, boolean dirty) {
+    protected SimpleResourcePackAsset(@NotNull NamespacedKeyWithIntention key, boolean dirty) {
         this.key = key;
         this.dirty = dirty;
     }
 
-    protected SimpleResourcePackAsset(@NotNull NamespacedKey key) {
+    protected SimpleResourcePackAsset(@NotNull NamespacedKeyWithIntention key) {
         this(key, false);
     }
 
     @Override
-    public @NotNull NamespacedKey getKey() {
+    public @NotNull NamespacedKeyWithIntention getKey() {
         return this.key;
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
similarity index 74%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
index f8cd866559b14d7ccfa48ca1ef6fb90f684d2f01..a39d8dc6645276d7ed997a4cc18ad93deed37a72 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
@@ -1,10 +1,13 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.blockstates;
 
 import com.google.gson.JsonObject;
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.json.SimpleJsonResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -12,11 +15,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset<ConcreteResourcePackBlockStates> implements MutableResourcePackBlockStates {
 
-    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull NamespacedKey key, boolean dirty) {
+    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key, boolean dirty) {
         super(ConcreteResourcePackBlockStates::new, json, key, dirty);
     }
 
-    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull NamespacedKey key) {
+    public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key) {
         super(ConcreteResourcePackBlockStates::new, json, key);
     }
 
@@ -45,7 +48,7 @@ public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset
             variantJson = new JsonObject();
             variantsJson.add(variant, variantJson);
         }
-        variantJson.addProperty(KeyConstants.model, model.getKeyWithType().toString());
+        variantJson.addProperty(KeyConstants.model, model.getKeyWithIntention().toString());
         this.setDirty();
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
similarity index 79%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
index 60f8a1e2b5c0ecf079e8d13e67982fd81a6ecd88..f13b28870052ee67afb3eaf6b7ff3004366fcbd3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
@@ -1,8 +1,12 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.blockstates;
 
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
+import nl.martijnmuijsers.paper.resourcepack.asset.json.MutableJsonResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ResourcePackBlockStates.java
similarity index 53%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ResourcePackBlockStates.java
index e4d69a9a415cb15550ba17215047198e9928641b..9716eca9c118700f8476661f981b31b592753c13 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ResourcePackBlockStates.java
@@ -1,7 +1,10 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.blockstates;
 
+import nl.martijnmuijsers.paper.resourcepack.asset.json.JsonResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/ImageResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/ImageResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..b6a85e9f19d80a0aacc16450fe53e1801a4e9606
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/ImageResourcePackAsset.java
@@ -0,0 +1,20 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset.image;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A {@link ResourcePackAsset} that is intended to hold an image (though, it is possible that {@link #hasData} is false, indicating that there is no data stored in this asset instance yet, although eventually, there always must be)
+ * <br>
+ * Note that this does not necessarily store any of the data referenced in memory, an image asset can also simply hold a filename that we assume points to an image
+ */
+public interface ImageResourcePackAsset extends ResourcePackAsset {
+
+    @Override
+    @NotNull ImageResourcePackAsset merge(@NotNull ResourcePackAsset other);
+
+    boolean hasData();
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/MutableImageResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/MutableImageResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..c57ae7f9074a4fd30834e59362fc7f931d4716a3
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/MutableImageResourcePackAsset.java
@@ -0,0 +1,17 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset.image;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A mutable {@link ImageResourcePackAsset}
+ */
+public interface MutableImageResourcePackAsset extends MutableResourcePackAsset, ImageResourcePackAsset {
+
+    @Override
+    @NotNull MutableImageResourcePackAsset merge(@NotNull ResourcePackAsset other);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java
new file mode 100644
index 0000000000000000000000000000000000000000..94193c7a57b64669dd06ef8e3fbccbfe9b63d10b
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/image/SimpleImageFileResourcePackAsset.java
@@ -0,0 +1,64 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset.image;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.SimpleResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+/**
+ * Base implementation of {@link MutableImageResourcePackAsset} that reference images by a file path (and thus does not support any operations or checks on the content of the image)
+ */
+public abstract class SimpleImageFileResourcePackAsset extends SimpleResourcePackAsset implements MutableImageResourcePackAsset {
+
+    private boolean existsInIncludedResourcePack;
+    private @Nullable String imageFilePath;
+
+    protected SimpleImageFileResourcePackAsset(boolean existsInIncludedResourcePack, @Nullable String imageFilePath, @NotNull NamespacedKeyWithIntention key, boolean dirty) {
+        super(key, dirty);
+        this.existsInIncludedResourcePack = existsInIncludedResourcePack;
+        this.imageFilePath = imageFilePath;
+    }
+
+    protected SimpleImageFileResourcePackAsset(boolean existsInIncludedResourcePack, @Nullable String imageFilePath, @NotNull NamespacedKeyWithIntention key) {
+        super(key);
+        this.existsInIncludedResourcePack = existsInIncludedResourcePack;
+        this.imageFilePath = imageFilePath;
+    }
+
+    @Override
+    public void writeTo(@NotNull OutputStream outputStream) throws IOException {
+        Validate.notNull(this.imageFilePath);
+        try (@NotNull FileInputStream fileInputStream = new FileInputStream(this.imageFilePath)) {
+            outputStream.write(fileInputStream.readAllBytes());
+        }
+    }
+
+    public @NotNull MutableImageResourcePackAsset merge(@NotNull ResourcePackAsset other) {
+        Validate.isInstanceOf(MutableImageResourcePackAsset.class, other);
+        if (this.hasData()) {
+            return this;
+        }
+        return (MutableImageResourcePackAsset) other;
+    }
+
+    @Override
+    public boolean hasData() {
+        return this.existsInIncludedResourcePack || this.imageFilePath != null;
+    }
+
+    public void setImageFilePath(@NotNull String imageFilePath) {
+        if (!imageFilePath.equals(this.imageFilePath)) {
+            this.imageFilePath = imageFilePath;
+            this.setDirty();
+        }
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java
new file mode 100644
index 0000000000000000000000000000000000000000..41a361d656b3fb8b7393830a54bdba8fbcc069f3
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithIntention.java
@@ -0,0 +1,23 @@
+package nl.martijnmuijsers.paper.resourcepack.asset.intention;
+
+import org.jetbrains.annotations.NotNull;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * A simple record that represents a {@link NamespacedKey} that includes the intention in the key
+ * <br>
+ * This record just indicates that the intention, if any, was certainly included: if there is no intention for the resource this key represents, the intention can be null
+ */
+public record NamespacedKeyWithIntention(@NotNull String namespace, @Nullable ResourcePackAssetIntention intention, @NotNull String keyWithoutIntention) {
+
+    public @NotNull String keyWithIntention() {
+        return this.intention == null ? this.keyWithoutIntention : this.intention.prefix + "/" + this.keyWithoutIntention;
+    }
+
+    @Override
+    public @NotNull String toString() {
+        return this.namespace + ":" + this.keyWithIntention();
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
new file mode 100644
index 0000000000000000000000000000000000000000..51d105dd82f08e41a12502d7a5642605a1a45b90
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
@@ -0,0 +1,39 @@
+package nl.martijnmuijsers.paper.resourcepack.asset.intention;
+
+import net.minecraft.resources.ResourceLocation;
+import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A simple record that represents a {@link NamespacedKey} that certainly does not include the intention in the key
+ * <br>
+ * This record just indicates that the intention, if any, was certainly excluded: if there is no intention for the resource this key represents, {@link NamespacedKeyWithIntention} should still be used when the potential (but not certainly existing) intention is required
+ */
+public record NamespacedKeyWithoutIntention(@NotNull String namespace, @NotNull String keyWithoutIntention) {
+
+    public @NotNull NamespacedKeyWithIntention withIntention(@NotNull ResourcePackAssetIntention intention) {
+        return new NamespacedKeyWithIntention(namespace, intention, keyWithoutIntention);
+    }
+
+    public @NotNull NamespacedKeyWithIntention withEmptyIntention() {
+        return new NamespacedKeyWithIntention(namespace, null, keyWithoutIntention);
+    }
+
+    @Override
+    public @NotNull String toString() {
+        return this.namespace + ":" + this.keyWithoutIntention();
+    }
+
+    public static @NotNull NamespacedKeyWithoutIntention forBukkit(@NotNull NamespacedKey key) {
+        return new NamespacedKeyWithoutIntention(key.getNamespace(), key.getKey());
+    }
+
+    public static @NotNull NamespacedKeyWithoutIntention forMinecraft(@NotNull ResourceLocation resourceLocation) {
+        return new NamespacedKeyWithoutIntention(resourceLocation.getNamespace(), resourceLocation.getPath());
+    }
+
+    public static @NotNull NamespacedKeyWithoutIntention minecraft(@NotNull String keyWithoutIntention) {
+        return new NamespacedKeyWithoutIntention(ResourceLocation.DEFAULT_NAMESPACE, keyWithoutIntention);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/ResourcePackAssetIntention.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/ResourcePackAssetIntention.java
new file mode 100644
index 0000000000000000000000000000000000000000..114b57c69156c584bd818dcd902e0b72e0c67990
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/ResourcePackAssetIntention.java
@@ -0,0 +1,22 @@
+package nl.martijnmuijsers.paper.resourcepack.asset.intention;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * The intention of a {@link ResourcePackAsset}
+ * <br>
+ * Not all asset types use intentions
+ */
+public enum ResourcePackAssetIntention {
+
+    BLOCK("block"),
+    ITEM("item");
+
+    public final @NotNull String prefix;
+
+    ResourcePackAssetIntention(@NotNull String prefix) {
+        this.prefix = prefix;
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/JsonResourcePackAsset.java
similarity index 75%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/JsonResourcePackAsset.java
index 0e99e7533d139efd6301fc9902fa74f3a306aa9a..876fe33b34243ddd37696bcdace1b8ee048e7c8e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/JsonResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/JsonResourcePackAsset.java
@@ -1,8 +1,9 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.json;
 
 import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableJsonResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/MutableJsonResourcePackAsset.java
similarity index 63%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableJsonResourcePackAsset.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/MutableJsonResourcePackAsset.java
index bdd9cc985717521aa72c5c8ee24031d061ec43f0..e36cb8277fa667532f558ced487808dbef1d6841 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableJsonResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/MutableJsonResourcePackAsset.java
@@ -1,7 +1,9 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.json;
 
+import nl.martijnmuijsers.paper.resourcepack.asset.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleJsonResourcePackAsset.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/SimpleJsonResourcePackAsset.java
similarity index 69%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleJsonResourcePackAsset.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/SimpleJsonResourcePackAsset.java
index 64fb6a615fbc36c829a66f2c6eeca14a74d0132f..57740cdc57610ed068bfe5254dde264b7f9c5e6d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/SimpleJsonResourcePackAsset.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/json/SimpleJsonResourcePackAsset.java
@@ -1,38 +1,51 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.json;
 
+import com.google.common.base.Charsets;
 import com.google.gson.JsonObject;
+import nl.martijnmuijsers.paper.json.JsonMerging;
+import nl.martijnmuijsers.paper.resourcepack.asset.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.SimpleResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import org.apache.commons.lang3.Validate;
-import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.io.IOException;
+import java.io.OutputStream;
+
 /**
- * Base implementation of {@link MutableResourcePackAsset} for JSON assets
+ * Base implementation of {@link MutableJsonResourcePackAsset}
  */
 public abstract class SimpleJsonResourcePackAsset<T extends SimpleJsonResourcePackAsset<T>> extends SimpleResourcePackAsset implements MutableJsonResourcePackAsset {
 
     protected interface JsonResourcePackAssetConstructor<T extends SimpleJsonResourcePackAsset<T>> {
 
-        @NotNull T construct(@NotNull JsonObject json, @NotNull NamespacedKey key, boolean dirty);
+        @NotNull T construct(@NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key, boolean dirty);
 
     }
 
     private final @NotNull JsonResourcePackAssetConstructor<T> constructor;
     protected @NotNull JsonObject json;
 
-    protected SimpleJsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T> constructor, @NotNull JsonObject json, @NotNull NamespacedKey key, boolean dirty) {
+    protected SimpleJsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T> constructor, @NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key, boolean dirty) {
         super(key, dirty);
         this.constructor = constructor;
         this.json = json;
     }
 
-    protected SimpleJsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T> constructor, @NotNull JsonObject json, @NotNull NamespacedKey key) {
+    protected SimpleJsonResourcePackAsset(@NotNull JsonResourcePackAssetConstructor<T> constructor, @NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key) {
         super(key);
         this.constructor = constructor;
         this.json = json;
     }
 
+    @Override
+    public void writeTo(@NotNull OutputStream outputStream) throws IOException {
+        outputStream.write(this.json.toString().getBytes(Charsets.UTF_8));
+    }
+
     public @NotNull T merge(@NotNull ResourcePackAsset other) {
         Validate.isTrue(this.getType() == other.getType());
         @NotNull JsonObject otherJson;
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
similarity index 81%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackModel.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
index 92ee1dda192cbe775c76995e376b837f2571e505..d7da1798c70e570baa6dcbb08cd74d252b19cce9 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ConcreteResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
@@ -1,13 +1,16 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.model;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-import nl.martijnmuijsers.paper.resourcepack.texture.Texture;
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
+import nl.martijnmuijsers.paper.resourcepack.asset.json.SimpleJsonResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -16,11 +19,11 @@ import org.jetbrains.annotations.Nullable;
  */
 public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<ConcreteResourcePackModel> implements MutableResourcePackModel {
 
-    public ConcreteResourcePackModel(@NotNull JsonObject json, @NotNull NamespacedKey key, boolean dirty) {
+    public ConcreteResourcePackModel(@NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key, boolean dirty) {
         super(ConcreteResourcePackModel::new, json, key, dirty);
     }
 
-    public ConcreteResourcePackModel(@NotNull JsonObject json, @NotNull NamespacedKey key) {
+    public ConcreteResourcePackModel(@NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key) {
         super(ConcreteResourcePackModel::new, json, key);
     }
 
@@ -35,14 +38,14 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
 
     @Override
     public void setParent(@NotNull Model parent) {
-        this.json.addProperty(KeyConstants.assetParent, parent.getKeyWithType().toString());
+        this.json.addProperty(KeyConstants.assetParent, parent.getKeyWithIntention().toString());
         this.setDirty();
     }
 
     @Override
     public void setAllTextures(@NotNull Texture texture) {
         @NotNull JsonObject texturesJson = new JsonObject();
-        texturesJson.addProperty(KeyConstants.allModelTextures, texture.getKeyWithType().toString());
+        texturesJson.addProperty(KeyConstants.allModelTextures, texture.getKeyWithIntention().toString());
         this.json.add(KeyConstants.modelTextures, texturesJson);
         this.setDirty();
     }
@@ -75,7 +78,7 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
             overrideJson.add(KeyConstants.overridePredicate, predicateJson);
             overridesJson.add(overrideJson);
         }
-        overrideJson.addProperty(KeyConstants.model, overridingModel.getKeyWithType().toString());
+        overrideJson.addProperty(KeyConstants.model, overridingModel.getKeyWithIntention().toString());
         this.setDirty();
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
similarity index 76%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackModel.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
index a4027d51f33e06d7ea089861cebb5ff6d73de5db..52fe7370738d0ca3bb937a172052d1d436a538a6 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/MutableResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
@@ -1,9 +1,12 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.model;
 
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-import nl.martijnmuijsers.paper.resourcepack.texture.Texture;
+import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
+import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.json.MutableJsonResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java
similarity index 52%
rename from src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackModel.java
rename to src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java
index 46a93e34908e106c1481ebf934ae8a5257354f98..319b778d805a9ab124fe0ca37dda5b9c2564c36c 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/ResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ResourcePackModel.java
@@ -1,7 +1,10 @@
 // Martijn - custom blocks and items
 
-package nl.martijnmuijsers.paper.resourcepack;
+package nl.martijnmuijsers.paper.resourcepack.asset.model;
 
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.json.JsonResourcePackAsset;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/ConcreteResourcePackTexture.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/ConcreteResourcePackTexture.java
new file mode 100644
index 0000000000000000000000000000000000000000..742d4558b13e1360a0617322681f599567b6f4cc
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/ConcreteResourcePackTexture.java
@@ -0,0 +1,41 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset.texture;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.image.SimpleImageFileResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.ResourcePackModel;
+import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Concrete implementation of {@link MutableResourcePackTexture}
+ */
+public class ConcreteResourcePackTexture extends SimpleImageFileResourcePackAsset implements MutableResourcePackTexture {
+
+    public ConcreteResourcePackTexture(boolean existsInIncludedResourcePack, @Nullable String imageFilePath, @NotNull NamespacedKeyWithIntention key, boolean dirty) {
+        super(existsInIncludedResourcePack, imageFilePath, key, dirty);
+    }
+
+    public ConcreteResourcePackTexture(boolean existsInIncludedResourcePack, @Nullable String imageFilePath, @NotNull NamespacedKeyWithIntention key) {
+        super(existsInIncludedResourcePack, imageFilePath, key);
+    }
+
+    @Override
+    public @NotNull ResourcePackAssetType getType() {
+        return ResourcePackAssetType.TEXTURE;
+    }
+
+    public @NotNull ConcreteResourcePackTexture merge(@NotNull ResourcePackAsset other) {
+        Validate.isInstanceOf(ConcreteResourcePackTexture.class, other);
+        return (ConcreteResourcePackTexture) super.merge(other);
+    }
+
+    public void setBasedOnFileToImport(@NotNull String fileToImport) {
+        this.setImageFilePath(fileToImport);
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/MutableResourcePackTexture.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/MutableResourcePackTexture.java
new file mode 100644
index 0000000000000000000000000000000000000000..3b18ece5e503170a02ee7f6b6a967064f1533fb8
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/MutableResourcePackTexture.java
@@ -0,0 +1,19 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset.texture;
+
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.image.MutableImageResourcePackAsset;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * A mutable {@link ResourcePackTexture}
+ */
+public interface MutableResourcePackTexture extends MutableImageResourcePackAsset, ResourcePackTexture {
+
+    @Override
+    @NotNull MutableResourcePackTexture merge(@NotNull ResourcePackAsset other);
+
+    void setBasedOnFileToImport(@NotNull String filePath);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/ResourcePackTexture.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/ResourcePackTexture.java
new file mode 100644
index 0000000000000000000000000000000000000000..52b2cda69eb3dc8f4754e439ee64483878bc34b2
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/texture/ResourcePackTexture.java
@@ -0,0 +1,18 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.resourcepack.asset.texture;
+
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.image.ImageResourcePackAsset;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * An element of 'textures' in a {@link ResourcePack}
+ */
+public interface ResourcePackTexture extends ImageResourcePackAsset {
+
+    @Override
+    @NotNull ResourcePackTexture merge(@NotNull ResourcePackAsset other);
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
index 4015aa4cafae6cf7a96fb8c1a976dc709f316bf7..79884eccff1994db247ee495048635a16d54495a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/memory/MemoryResourcePack.java
@@ -2,27 +2,43 @@
 
 package nl.martijnmuijsers.paper.resourcepack.memory;
 
+import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableList;
 import com.google.gson.JsonObject;
 import it.unimi.dsi.fastutil.Pair;
-import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackBlockStates;
-import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackModel;
-import nl.martijnmuijsers.paper.resourcepack.InitializableResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.PathConstants;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.ConcreteResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.image.MutableImageResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.ConcreteResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.InitializableResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.MutableResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackAsset;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackBlockStates;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackModel;
-import org.bukkit.NamespacedKey;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.ResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.ResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.ConcreteResourcePackTexture;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.ResourcePackTexture;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.Callable;
+import java.util.stream.Stream;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
 
 /**
  * A resource pack available in memory. Can be written to a file. May be backed by a default resource pack (such as the Minecraft default resource pack), and may be based on (and always fully include) a list of other resource packs.
@@ -46,10 +62,15 @@ public class MemoryResourcePack implements MutableResourcePack {
 
     private final @NotNull MemoryResourcePackSettings settings = new MemoryResourcePackSettings(this);
 
-    private final @NotNull Map<@NotNull Pair<@NotNull ResourcePackAssetType, @NotNull NamespacedKey>, @NotNull MutableResourcePackAsset> assets = new HashMap<>(0);
+    private final @NotNull Map<@NotNull Pair<@NotNull ResourcePackAssetType, @NotNull NamespacedKeyWithIntention>, @NotNull MutableResourcePackAsset> assets = new HashMap<>(0);
 
     public MemoryResourcePack() {}
 
+    @Override
+    public @NotNull Stream<@NotNull Pair<@NotNull String, @NotNull Callable<@NotNull InputStream>>> getAllFilesStream() throws IOException {
+        throw new UnsupportedOperationException("Cannot stream over all files for a resource pack being constructed in memory");
+    }
+
     public @NotNull List<@NotNull ResourcePack> getDefaultResourcePacks() {
         return ImmutableList.copyOf(this.defaultResourcePacks);
     }
@@ -83,13 +104,17 @@ public class MemoryResourcePack implements MutableResourcePack {
             return new ConcreteResourcePackBlockStates((ResourcePackBlockStates) asset);
         } else if (type.equals(ResourcePackAssetType.MODEL)) {
             return new ConcreteResourcePackModel((ResourcePackModel) asset);
+        } else if (type.equals(ResourcePackAssetType.TEXTURE)) {
+            // We assume all ResourcePackTexture to have been MutableResourcePackAsset already (as the current only implementation is ConcreteResourcePackTexture)
+            // since there is immediate obvious way to implement a ConcreteResourcePackTexture(ResourcePackTexture reference) constructor
+            throw new UnsupportedOperationException("Not implemented yet: could implement by adding existsInIncludedResourcePack() and getImageFilePath() methods to ResourcePackTexture interface, but that feels wrong for now");
         } else {
             throw new IllegalArgumentException("Attempted to create mutable asset for memory resource pack by cloning a given asset, but the type (" + type.getFolderPathInNamespaceFolder() + ") is not a known copiable type");
         }
     }
 
     @Override
-    public @NotNull MutableResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+    public @NotNull MutableResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         @Nullable MutableResourcePackAsset foundOrDerivedAsset = this.assets.computeIfAbsent(Pair.of(type, key), namespacedKey -> {
             // Try creating a merged asset from the included resource packs
             @Nullable MutableResourcePackAsset derivedAsset = null;
@@ -124,7 +149,7 @@ public class MemoryResourcePack implements MutableResourcePack {
     }
 
     @Override
-    public @NotNull MutableResourcePackAsset getOrCreateAsset(@NotNull InitializableResourcePackAssetType type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+    public @NotNull MutableResourcePackAsset getOrCreateAsset(@NotNull InitializableResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         @Nullable MutableResourcePackAsset existingAsset = this.getOptionalAsset(type, key);
         if (existingAsset != null) {
             return existingAsset;
@@ -134,6 +159,8 @@ public class MemoryResourcePack implements MutableResourcePack {
             newAsset = new ConcreteResourcePackBlockStates(new JsonObject(), key);
         } else if (type.equals(ResourcePackAssetType.MODEL)) {
             newAsset = new ConcreteResourcePackModel(new JsonObject(), key);
+        } else if (type.equals(ResourcePackAssetType.TEXTURE)) {
+            newAsset = new ConcreteResourcePackTexture(false, null, key);
         } else {
             throw new IllegalArgumentException("Attempted to create asset for memory resource pack, but the type (" + type.getFolderPathInNamespaceFolder() + ") is not a known initializable type");
         }
@@ -141,4 +168,55 @@ public class MemoryResourcePack implements MutableResourcePack {
         return newAsset;
     }
 
+    public void writeToFolder(String folderPath) throws IOException {
+        @NotNull File folder = new File(folderPath);
+        if (!folder.isDirectory()) {
+            throw new IOException("MemoryResourcePack.writeToFolder received a path that does not point to a folder");
+        }
+        try (@NotNull FileOutputStream fileOutputStream = new FileOutputStream(Path.of(folderPath, this.getSettings().getName() + ".zip").toFile())) {
+            try (@NotNull ZipOutputStream zipOutputStream = new ZipOutputStream(fileOutputStream)) {
+                @NotNull Set<@NotNull String> zippedFilePaths = new HashSet<>();
+                // Add the settings
+                {
+                    zippedFilePaths.add(PathConstants.PackMeta.pathFromRoot);
+                    @NotNull ZipEntry zipEntry = new ZipEntry(PathConstants.PackMeta.pathFromRoot);
+                    zipOutputStream.putNextEntry(zipEntry);
+                    zipOutputStream.write(this.getSettings().createJson().toString().getBytes(Charsets.UTF_8));
+                }
+                // Add the cached assets
+                for (@NotNull MutableResourcePackAsset assetInMemory : this.assets.values()) {
+                    // Don't write assets just because we have them cached: only write those that are dirty (the ones that need to be included even if not dirty will be added later)
+                    if (!assetInMemory.isDirty()) {
+                        continue;
+                    }
+                    @NotNull String path = assetInMemory.getPathInResourcePack();
+                    zippedFilePaths.add(path);
+                    @NotNull ZipEntry zipEntry = new ZipEntry(path);
+                    zipOutputStream.putNextEntry(zipEntry);
+                    assetInMemory.writeTo(zipOutputStream);
+                }
+                // Add all files from included resource packs that we haven't added yet
+                for (@NotNull ResourcePack includedResourcePack : this.includedResourcePacks) {
+                    @NotNull Stream<@NotNull Pair<@NotNull String, @NotNull Callable<@NotNull InputStream>>> allFilesStream = includedResourcePack.getAllFilesStream();
+                    @NotNull Iterable<@NotNull Pair<@NotNull String, @NotNull Callable<@NotNull InputStream>>> allFilesIterable = () -> allFilesStream.iterator();
+                    for (@NotNull Pair<@NotNull String, @NotNull Callable<@NotNull InputStream>> includedResourcePackFile : allFilesIterable) {
+                        @NotNull String includedFilePath = includedResourcePackFile.left();
+                        if (zippedFilePaths.add(includedFilePath)) {
+                            try (@NotNull InputStream includedFileInputStream = includedResourcePackFile.right().call()) {
+                                zipOutputStream.putNextEntry(new ZipEntry(includedFilePath));
+                                zipOutputStream.write(includedFileInputStream.readAllBytes());
+                            } catch (Exception e) {
+                                if (e instanceof IOException ioE) {
+                                    throw ioE;
+                                }
+                                throw new IOException("An exception occurred while getting input stream for included resource pack file", e);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+        // TODO write to file and make sure to include everything from the included resource packs for sure
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
deleted file mode 100644
index 32c8aac2ecbb57bed8e8d363d1bd964f33daaf3e..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/Model.java
+++ /dev/null
@@ -1,71 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import nl.martijnmuijsers.paper.resourcepack.texture.Texture;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * An immutable item or block model
- */
-public class Model {
-
-    private final @NotNull ModelType type;
-    /**
-     * This key does not include the type of model (such as: it is sucraft:snowy_stone_bricks, not sucraft:block/snowy_stone_bricks)
-     */
-    private final @NotNull NamespacedKey key;
-    private final @NotNull ModelContent content;
-
-    public Model(@NotNull ModelType type, @NotNull NamespacedKey key, @NotNull ModelContent content) {
-        this.type = type;
-        this.key = key;
-        this.content = content;
-    }
-
-    public @NotNull ModelType getType() {
-        return this.type;
-    }
-
-    public @NotNull NamespacedKey getKey() {
-        return this.key;
-    }
-
-    public @NotNull NamespacedKey getKeyWithType() {
-        return this.type.getTypedKey(this.key);
-    }
-
-    public @NotNull ModelContent getContent() {
-        return this.content;
-    }
-
-    public @NotNull Model getReference(@NotNull ModelType newType) {
-        return reference(newType, this.getKey());
-    }
-
-    public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
-        @NotNull MutableResourcePackModel resourcePackModel = resourcePack.getOrCreateModel(this.type, this.key);
-        if (!resourcePackModel.isJsonEmpty() && !overwriteExisting) {
-            return;
-        }
-        if (!resourcePackModel.isJsonEmpty()) {
-            resourcePackModel.clearJson();
-        }
-        this.content.writeToClearResourcePackModel(resourcePackModel, resourcePack);
-    }
-
-    /**
-     * Note that the given key must be untyped
-     */
-    public static @NotNull Model reference(@NotNull ModelType type, @NotNull NamespacedKey key) {
-        return new Model(type, key, ReferenceModelContent.getInstance());
-    }
-
-    public static @NotNull Model cube(@NotNull ModelType type, @NotNull NamespacedKey key, @NotNull Texture texture) {
-        return new Model(type, key, new OneTextureCubeModelContent(texture));
-    }
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelContent.java
deleted file mode 100644
index bd74e83ac1d3268d9efd787ec20464dfafa2693f..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelContent.java
+++ /dev/null
@@ -1,26 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * The immutable content of a model: a {@link Model} without any information about its appropriate location in a resource pack
- */
-public abstract class ModelContent {
-
-    protected ModelContent() {}
-
-    public @NotNull Model asModel(@NotNull ModelType type, @NotNull NamespacedKey key) {
-        return new Model(type, key, this);
-    }
-
-    /**
-     * Note that this method will attempt to add any used textures to the resource pack, but will not overwrite any existing ones
-     */
-    abstract void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack);
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
deleted file mode 100644
index aad741c34c57ff38f51ab4f27dccb82b679b2e20..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ModelType.java
+++ /dev/null
@@ -1,29 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-import nl.martijnmuijsers.paper.resourcepack.PathConstants;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.function.Function;
-
-/**
- * The type of a {@link Model}
- */
-public enum ModelType {
-
-    BLOCK(PathConstants::getBlockKey),
-    ITEM(PathConstants::getItemKey);
-
-    private final @NotNull Function<@NotNull NamespacedKey, @NotNull NamespacedKey> typedKeyFunction;
-
-    ModelType(@NotNull Function<@NotNull NamespacedKey, @NotNull NamespacedKey> typedKeyFunction) {
-        this.typedKeyFunction = typedKeyFunction;
-    }
-
-    public @NotNull NamespacedKey getTypedKey(@NotNull NamespacedKey key) {
-        return this.typedKeyFunction.apply(key);
-    }
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ReferenceModelContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ReferenceModelContent.java
deleted file mode 100644
index 89703ce3ec1ff35bd0333a03d424acbb733fd1db..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/model/ReferenceModelContent.java
+++ /dev/null
@@ -1,32 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.model;
-
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-/**
- * A reference to some model that is outside the scope of our own resource pack (for example a model already existing, for use as a parent)
- */
-public class ReferenceModelContent extends ModelContent {
-
-    private static @Nullable ReferenceModelContent instance;
-
-    public static @NotNull ReferenceModelContent getInstance() {
-        if (instance == null) {
-            instance = new ReferenceModelContent();
-        }
-        return instance;
-    }
-
-    private ReferenceModelContent() {}
-
-    /**
-     * Since this references content that already exists, it does not need to be written
-     */
-    @Override
-    void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {}
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
index c79de6db9cc67036dfe40a258af87d5ff7d06ec6..3ea678d446c2c9d445c3564fa8a0ea3577ce9d9a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/readfromarchive/ReadFromArchiveResourcePack.java
@@ -5,13 +5,15 @@ package nl.martijnmuijsers.paper.resourcepack.readfromarchive;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import it.unimi.dsi.fastutil.Pair;
-import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackBlockStates;
-import nl.martijnmuijsers.paper.resourcepack.ConcreteResourcePackModel;
+import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.ConcreteResourcePackBlockStates;
+import nl.martijnmuijsers.paper.resourcepack.asset.model.ConcreteResourcePackModel;
 import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackAsset;
-import nl.martijnmuijsers.paper.resourcepack.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAsset;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.texture.ConcreteResourcePackTexture;
 import org.apache.commons.lang3.Validate;
-import org.bukkit.NamespacedKey;
+import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -22,6 +24,8 @@ import java.io.InputStreamReader;
 import java.nio.file.Path;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.Callable;
+import java.util.stream.Stream;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
@@ -36,7 +40,7 @@ public class ReadFromArchiveResourcePack implements ResourcePack, Closeable {
 
     private final ReadFromArchiveResourcePackSettings settings = new ReadFromArchiveResourcePackSettings(this);
 
-    private final @NotNull Map<@NotNull Pair<@NotNull ResourcePackAssetType, @NotNull NamespacedKey>, @NotNull ResourcePackAsset> assets = new HashMap<>(0);
+    private final @NotNull Map<@NotNull Pair<@NotNull ResourcePackAssetType, @NotNull NamespacedKeyWithIntention>, @NotNull ResourcePackAsset> assets = new HashMap<>(0);
 
     public ReadFromArchiveResourcePack(@NotNull Path path) {
         this.path = path;
@@ -64,6 +68,10 @@ public class ReadFromArchiveResourcePack implements ResourcePack, Closeable {
         }
     }
 
+    private @NotNull Stream<@NotNull ZipEntry> getZipFileEntriesStream() throws IOException, NullPointerException {
+        return Validate.notNull(this.getZipFile().stream().map(it -> Validate.notNull(it)));
+    }
+
     private @NotNull ZipEntry getZipFileEntry(@NotNull String path) throws IOException, NullPointerException {
         return Validate.notNull(this.getZipFile().getEntry(path));
     }
@@ -72,6 +80,11 @@ public class ReadFromArchiveResourcePack implements ResourcePack, Closeable {
         return Validate.notNull(this.getZipFile().getInputStream(this.getZipFileEntry(path)));
     }
 
+    @Override
+    public @NotNull Stream<@NotNull Pair<@NotNull String, @NotNull Callable<@NotNull InputStream>>> getAllFilesStream() throws IOException {
+        return this.getZipFileEntriesStream().map(it -> Pair.of(it.getName(), () -> this.getZipFile().getInputStream(it)));
+    }
+
     @NotNull JsonObject readJsonAsset(@NotNull String path) throws IllegalArgumentException {
         try {
             @NotNull InputStream inputStream = this.getZipFileEntryInputStream(path);
@@ -95,12 +108,14 @@ public class ReadFromArchiveResourcePack implements ResourcePack, Closeable {
     }
 
     @Override
-    public @NotNull ResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKey key) throws IllegalArgumentException {
+    public @NotNull ResourcePackAsset getAsset(@NotNull ResourcePackAssetType type, @NotNull NamespacedKeyWithIntention key) throws IllegalArgumentException {
         @Nullable ResourcePackAsset foundAsset = this.assets.computeIfAbsent(Pair.of(type, key), namespacedKey -> {
             if (type.equals(ResourcePackAssetType.BLOCK_STATES)) {
                 return new ConcreteResourcePackBlockStates(readJsonAsset(type.getPathInResourcePack(key)), key);
             } else if (type.equals(ResourcePackAssetType.MODEL)) {
                 return new ConcreteResourcePackModel(readJsonAsset(type.getPathInResourcePack(key)), key);
+            } else if (type.equals(ResourcePackAssetType.TEXTURE)) {
+                return new ConcreteResourcePackTexture(true, null, key);
             } else {
                 throw new IllegalArgumentException("Attempted to read asset from archive resource pack, but the type (" + type.getFolderPathInNamespaceFolder() + ") is not a known readable type");
             }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 7b7fb04ab329d036f0e080a3dda90dd2d37bd0e4..20aed5bfadc83bc58841e1a55ad1a41ed80ba9c4 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -2,13 +2,16 @@
 
 package nl.martijnmuijsers.paper.resourcepack.sucraft;
 
+import com.google.common.collect.Iterables;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParser;
 import net.minecraft.core.Registry;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import nl.martijnmuijsers.paper.block.BlockReplacementRule;
 import nl.martijnmuijsers.paper.item.ItemReplacementRule;
+import nl.martijnmuijsers.paper.resourcepack.ResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.memory.MemoryResourcePackSettings;
 import nl.martijnmuijsers.paper.resourcepack.readfromarchive.ReadFromArchiveResourcePack;
@@ -22,42 +25,72 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final String VANILLA_RESOURCE_PACK_ARCHIVE_PATH = "resourcepack/vanilla_client_1.19_only_assets_minecraft.zip";
+    public static final int RESOURCE_PACK_FORMAT = 9;
+
+    public static final String INPUT_TEXTURES_FOLDER_PATH = "resourcepack/input/textures";
+
+    private static final String VANILLA_RESOURCE_PACK_ARCHIVE_PATH = "resourcepack/input/inheritedpacks/vanilla_client_1.19_only_assets_minecraft.zip";
 
     private static final String NAME = "SuCraft";
     private static final JsonElement DESCRIPTION = JsonParser.parseString("[{\"text\":\"\\u2764 Made with love\",\"color\":\"gray\"},{\"text\":\"\\n\"},{\"text\":\"~SuCraft\",\"color\":\"gold\"}]");
 
-    private static final String OUTPUT_FOLDER_PATH = "resourcepack";
+    private static final String OUTPUT_FOLDER_PATH = "resourcepack/output";
 
     public static void createAndWrite() {
+        MinecraftServer.LOGGER.info("Creating server resource pack...");
+        try {
 
-        // Construct the resource pack
-        @NotNull MemoryResourcePack resourcePack = new MemoryResourcePack();
+            // Construct the resource pack
+            @NotNull MemoryResourcePack resourcePack = new MemoryResourcePack();
 
-        // Add the vanilla JAR as default resource pack
-        resourcePack.addDefaultResourcePack(new ReadFromArchiveResourcePack(VANILLA_RESOURCE_PACK_ARCHIVE_PATH));
+            try {
 
-        // Set the settings
-        @NotNull MemoryResourcePackSettings settings = resourcePack.getSettings();
-        settings.setName(NAME);
-        settings.setDescription(DESCRIPTION);
+                // Add the vanilla JAR as default resource pack
+                resourcePack.addDefaultResourcePack(new ReadFromArchiveResourcePack(VANILLA_RESOURCE_PACK_ARCHIVE_PATH));
 
-        // Add all custom blocks
-        for (Block block : Registry.BLOCK) {
-            @Nullable BlockReplacementRule replacementRule = block.replacementRule;
-            if (replacementRule != null) {
-                replacementRule.addToResourcePack(resourcePack);
-            }
-        }
+                // Set the settings
+                @NotNull MemoryResourcePackSettings settings = resourcePack.getSettings();
+                settings.setName(NAME);
+                settings.setDescription(DESCRIPTION);
+
+                // Add all custom blocks
+                for (Block block : Registry.BLOCK) {
+                    @Nullable BlockReplacementRule replacementRule = block.replacementRule;
+                    if (replacementRule != null) {
+                        replacementRule.addToResourcePack(resourcePack);
+                    }
+                }
+
+                // Add all custom items
+                for (Item item : Registry.ITEM) {
+                    @Nullable ItemReplacementRule replacementRule = item.replacementRule;
+                    if (replacementRule != null) {
+                        replacementRule.addToResourcePack(resourcePack);
+                    }
+                }
+
+                // Write the resource pack to the output file
+                resourcePack.writeToFolder(OUTPUT_FOLDER_PATH);
+
+            } finally {
+
+                // Close all opened inherited resource packs
+                for (@NotNull ResourcePack inheritedResourcePack : Iterables.concat(resourcePack.getDefaultResourcePacks(), resourcePack.getIncludedResourcePacks())) {
+                    if (inheritedResourcePack instanceof ReadFromArchiveResourcePack readInheritedResourcePack) {
+                        try {
+                            readInheritedResourcePack.close();
+                        } catch (Exception e) {
+                            MinecraftServer.LOGGER.warn("Exception occurred while closing inherited resource pack read from archive:");
+                            e.printStackTrace();
+                        }
+                    }
+                }
 
-        // Add all custom items
-        for (Item item : Registry.ITEM) {
-            @Nullable ItemReplacementRule replacementRule = item.replacementRule;
-            if (replacementRule != null) {
-                replacementRule.addToResourcePack(resourcePack);
             }
-        }
 
+        } catch (Exception e) {
+            throw new RuntimeException("Exception occurred while creating server resource pack", e);
+        }
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/ReferenceTextureContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/ReferenceTextureContent.java
deleted file mode 100644
index ad4f5a872ac2d45c9c631633ddf27c27dc5c71b4..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/ReferenceTextureContent.java
+++ /dev/null
@@ -1,33 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.texture;
-
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelContent;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-
-/**
- * A reference to some texture that is outside the scope of our own resource pack (for example a texture already existing)
- */
-public class ReferenceTextureContent extends TextureContent {
-
-    private static @Nullable ReferenceTextureContent instance;
-
-    public static @NotNull ReferenceTextureContent getInstance() {
-        if (instance == null) {
-            instance = new ReferenceTextureContent();
-        }
-        return instance;
-    }
-
-    private ReferenceTextureContent() {}
-
-    /**
-     * Since this references content that already exists, it does not need to be written
-     */
-    @Override
-    void writeToResourcePackTexture(@NotNull MutableResourcePackTexture resourcePackTexture) {}
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/Texture.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/Texture.java
deleted file mode 100644
index 373c4ecb8036daa26569456a9f66386235a9d8d8..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/Texture.java
+++ /dev/null
@@ -1,58 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.texture;
-
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * An immutable item or block texture
- */
-public class Texture {
-
-    private final @NotNull TextureType type;
-    /**
-     * This key does not include the type of texture (such as: it is sucraft:snowy_stone_bricks, not sucraft:block/snowy_stone_bricks)
-     */
-    private final @NotNull NamespacedKey key;
-    private final @NotNull TextureContent content;
-
-    public Texture(@NotNull TextureType type, @NotNull NamespacedKey key, @NotNull TextureContent content) {
-        this.type = type;
-        this.key = key;
-        this.content = content;
-    }
-
-    public @NotNull TextureType getType() {
-        return this.type;
-    }
-
-    public @NotNull NamespacedKey getKey() {
-        return this.key;
-    }
-
-    public @NotNull NamespacedKey getKeyWithType() {
-        return this.type.getTypedKey(this.key);
-    }
-
-    public @NotNull TextureContent getContent() {
-        return this.content;
-    }
-
-    public void addToResourcePack(@NotNull MutableResourcePack resourcePack, boolean overwriteExisting) {
-        @NotNull MutableResourcePackTexture resourcePackTexture = resourcePack.getOrCreateTexture(this.type, this.key);
-        if (!resourcePackTexture.hasData() && !overwriteExisting) {
-            return;
-        }
-        this.content.writeToResourcePackTexture(resourcePackTexture);
-    }
-
-    /**
-     * Note that the given key must be untyped
-     */
-    public static @NotNull Texture reference(@NotNull TextureType type, @NotNull NamespacedKey key) {
-        return new Texture(type, key, ReferenceTextureContent.getInstance());
-    }
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/TextureContent.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/TextureContent.java
deleted file mode 100644
index 47b27b7e701b8e61a2d08be25139481d2c5fa539..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/TextureContent.java
+++ /dev/null
@@ -1,25 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.texture;
-
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
-import nl.martijnmuijsers.paper.resourcepack.MutableResourcePackModel;
-import nl.martijnmuijsers.paper.resourcepack.model.Model;
-import nl.martijnmuijsers.paper.resourcepack.model.ModelType;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * The immutable content of a texture: a {@link Texture} without any information about its appropriate location in a resource pack
- */
-public abstract class TextureContent {
-
-    protected TextureContent() {}
-
-    public @NotNull Texture asTexture(@NotNull TextureType type, @NotNull NamespacedKey key) {
-        return new Texture(type, key, this);
-    }
-
-    abstract void writeToResourcePackTexture(@NotNull MutableResourcePackTexture resourcePackTexture);
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/TextureType.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/TextureType.java
deleted file mode 100644
index 3cadb5588d7cfb2293d8a8a47bb1d25eb1152147..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/texture/TextureType.java
+++ /dev/null
@@ -1,29 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.resourcepack.texture;
-
-import nl.martijnmuijsers.paper.resourcepack.PathConstants;
-import org.bukkit.NamespacedKey;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.function.Function;
-
-/**
- * The type of a {@link Texture}
- */
-public enum TextureType {
-
-    BLOCK(PathConstants::getBlockKey),
-    ITEM(PathConstants::getItemKey);
-
-    private final @NotNull Function<@NotNull NamespacedKey, @NotNull NamespacedKey> typedKeyFunction;
-
-    TextureType(@NotNull Function<@NotNull NamespacedKey, @NotNull NamespacedKey> typedKeyFunction) {
-        this.typedKeyFunction = typedKeyFunction;
-    }
-
-    public @NotNull NamespacedKey getTypedKey(@NotNull NamespacedKey key) {
-        return this.typedKeyFunction.apply(key);
-    }
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/structure/CraftWorldStructurePiece.java b/src/main/java/nl/martijnmuijsers/paper/structure/CraftWorldStructurePiece.java
index c5e428bbb05f801da88449307e7c75b00f7e7cfd..60158b10b5258016a89eb879f22661463e539d47 100644
--- a/src/main/java/nl/martijnmuijsers/paper/structure/CraftWorldStructurePiece.java
+++ b/src/main/java/nl/martijnmuijsers/paper/structure/CraftWorldStructurePiece.java
@@ -66,8 +66,8 @@ public class CraftWorldStructurePiece implements WorldStructurePiece {
             if (tag == null) {
                 this.cachedFullStructureTemplateName = Optional.empty();
             } else {
-                @Nullable String name = tag.getString("Template");
-                if (name != null && name.isBlank()) {
+                @NotNull String name = tag.getString("Template");
+                if (name.isBlank()) {
                     this.cachedFullStructureTemplateName = Optional.empty();
                 } else {
                     this.cachedFullStructureTemplateName = Optional.ofNullable(name);
@@ -115,8 +115,8 @@ public class CraftWorldStructurePiece implements WorldStructurePiece {
                     this.cachedFullPoolElementName = Optional.empty();
                 } else {
                     @NotNull CompoundTag poolElementTag = tag.getCompound("pool_element");
-                    @Nullable String name = poolElementTag.getString("location");
-                    if (name != null && name.isBlank()) {
+                    @NotNull String name = poolElementTag.getString("location");
+                    if (name.isBlank()) {
                         this.cachedFullPoolElementName = Optional.empty();
                     } else {
                         this.cachedFullPoolElementName = Optional.ofNullable(name);
@@ -140,8 +140,8 @@ public class CraftWorldStructurePiece implements WorldStructurePiece {
             if (colonIndex == -1) {
                 this.cachedShortPoolElementName = Optional.of(fullPoolElementName);
             } else {
-                @Nullable String name = fullPoolElementName.substring(colonIndex + 1);
-                if (name != null && name.isBlank()) {
+                @NotNull String name = fullPoolElementName.substring(colonIndex + 1);
+                if (name.isBlank()) {
                     this.cachedShortPoolElementName = Optional.empty();
                 } else {
                     this.cachedShortPoolElementName = Optional.ofNullable(name);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 56d50c26c5c01540614b93292fddb32d0c13b160..b3bc3e8ef51dfdcb264962ecf9a6267adc72ea42 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -242,7 +242,7 @@ public class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDat
     static final ItemMetaKey LOCNAME = new ItemMetaKey("LocName", "loc-name");
     @Specific(Specific.To.NBT)
     public static final ItemMetaKey DISPLAY = new ItemMetaKey("display"); // Martijn - custom blocks and items
-    static final ItemMetaKey LORE = new ItemMetaKey("Lore", "lore");
+    public static final ItemMetaKey LORE = new ItemMetaKey("Lore", "lore"); // Martijn - custom blocks and items
     public static final ItemMetaKey CUSTOM_MODEL_DATA = new ItemMetaKey("CustomModelData", "custom-model-data"); // Martijn - custom blocks and items
     static final ItemMetaKey ENCHANTMENTS = new ItemMetaKey("Enchantments", "enchants");
     @Specific(Specific.To.NBT)
