From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 19 Jan 2022 20:06:31 +0100
Subject: [PATCH] Check for tracking chunks without synchronizing


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 09d920c21d4845071461bc9e8124ac759861d5ac..e7dda2b49604616182be1cb2ddedc6cf97a33173 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -379,15 +379,29 @@ public class ServerPlayer extends Player {
         return this.isPlannedToTrack(chunk.level.uuid, chunk.getPos().longKey);
     }
 
+    /**
+     * This method will not synchronize, so it doesn't need to wait for any other threads and request the lock field from RAM, but the return value may be inconsistent with the truth
+     */
+    public boolean isTrackingNonSync(UUID levelUUID, long chunkKey) {
+        if (levelUUID.equals(this.quickAccessLevelUUID)) return this.quickAccessTracking.contains(chunkKey);
+        LongSet trackingForLevel = this.tracking.get(levelUUID);
+        if (trackingForLevel == null) return false;
+        return trackingForLevel.contains(chunkKey);
+    }
+
     public boolean isTracking(UUID levelUUID, long chunkKey) {
         synchronized (this.networkConstrainedTrackingLock) {
-            if (levelUUID.equals(this.quickAccessLevelUUID)) return this.quickAccessTracking.contains(chunkKey);
-            LongSet trackingForLevel = this.tracking.get(levelUUID);
-            if (trackingForLevel == null) return false;
-            return trackingForLevel.contains(chunkKey);
+            return isTrackingNonSync(levelUUID, chunkKey);
         }
     }
 
+    /**
+     * This method will not synchronize, so it doesn't need to wait for any other threads and request the lock field from RAM, but the return value may be inconsistent with the truth
+     */
+    public boolean isTrackingNonSync(LevelChunk chunk) {
+        return this.isTrackingNonSync(chunk.level.uuid, chunk.getPos().longKey);
+    }
+
     public boolean isTracking(LevelChunk chunk) {
         return this.isTracking(chunk.level.uuid, chunk.getPos().longKey);
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 442fe814414ecff4b383f9d0d69e722fb0878758..56653c02f0f907788141ff0a74d86ba1fdd49333 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2010,7 +2010,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
     // Martijn start - network-constrained chunk tracking
     public void sendIfTracking(LevelChunk chunk, Packet<?> packet) {
         if (chunk == null) return;
-        if (this.getPlayer().isTracking(chunk)) {
+        if (this.getPlayer().isTrackingNonSync(chunk)) {
             this.send(packet);
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 06afe26fdf5499c4e4394a03d3abb63ce9e36c39..38cc5b2b76df42f3b8cdb50edb253d5ffa45d80d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -326,7 +326,7 @@ public class Zombie extends Monster {
                 entityliving = (LivingEntity) source.getEntity();
             }
 
-            if (entityliving != null && this.level.getDifficulty() != Difficulty.PEACEFUL && (double) this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE) && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) { // Martijn - Zombies call for reinforcements on all difficulties
+            if (entityliving != null && this.level.getDifficulty() != Difficulty.PEACEFUL && (double) this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE) && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) { // Martijn - Zombies can call for reinforcements on all difficulties
                 int i = Mth.floor(this.getX());
                 int j = Mth.floor(this.getY());
                 int k = Mth.floor(this.getZ());
