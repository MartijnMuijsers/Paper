From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 19 Jul 2022 22:43:38 +0200
Subject: [PATCH] T


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 0bf7f6b72f5b0e1beb534104cc9f16771a7dbeb5..e0e5e03b68cb64391f717187fc07c14cbd430d02 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -559,7 +559,7 @@ public class ServerPlayer extends Player {
 
     private int maxNumberOfChunkPacketsInTransitBasedOnConnection = GlobalConfiguration.get().networkConstrainedChunkSending.maxChunkPacketsInTransit.initial;
     // Keep track of chunk packets in transit
-    private final ArrayDeque<ChunkPacketInTransit> chunkInitializationPacketsInTransitKeepaliveIds = new ArrayDeque<>();
+    public final ArrayDeque<ChunkPacketInTransit> chunkInitializationPacketsInTransitKeepaliveIds = new ArrayDeque<>(); // Martijn - custom blocks and items
 
     public int getMaxNumberOfChunkPacketsInTransitBasedOnConnection() {
         synchronized (this.networkConstrainedSendingLock) {
@@ -2962,13 +2962,24 @@ public class ServerPlayer extends Player {
             }
         }
         final @Nullable ItemStack finalStonecutterInput = stonecutterInput;
-        List<Recipe<?>> recipesToSend = this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldSpecificallySend(this, finalStonecutterInput)).toList();
-        Set<ResourceLocation> willSendSpecificRecipeIds = recipesToSend.stream().map(recipe -> recipe.getId()).collect(Collectors.toSet());
+        Collection<Recipe<?>> allRecipes = this.server.getRecipeManager().getRecipes();
+        List<Recipe<?>> alwaysRecipesToSend = new ArrayList<>(allRecipes.size());
+        List<Recipe<?>> specificRecipesToSend = new ArrayList<>(4);
+        List<Recipe<?>> allRecipesToSend = new ArrayList<>(allRecipes.size());
+        allRecipes.forEach(recipe -> {
+            if (recipe.shouldAlwaysSend()) {
+                alwaysRecipesToSend.add(recipe);
+                allRecipesToSend.add(recipe);
+            } else if (recipe.shouldSpecificallySend(this, finalStonecutterInput)) {
+                specificRecipesToSend.add(recipe);
+                allRecipesToSend.add(recipe);
+            }
+        });
+        Set<ResourceLocation> willSendSpecificRecipeIds = specificRecipesToSend.stream().map(recipe -> recipe.getId()).collect(Collectors.toSet());
         if (this.lastSentSpecificRecipeIds == null || !this.lastSentSpecificRecipeIds.equals(willSendSpecificRecipeIds)) {
+//            allRecipesToSend.sort(Comparator.comparing(Recipe::getId));
             this.lastSentSpecificRecipeIds = willSendSpecificRecipeIds;
-            recipesToSend = new ArrayList<>(recipesToSend);
-            recipesToSend.addAll(this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldAlwaysSend()).toList());
-            this.connection.send(new ClientboundUpdateRecipesPacket(recipesToSend));
+            this.connection.send(new ClientboundUpdateRecipesPacket(allRecipesToSend));
             this.getRecipeBook().sendInitialRecipeBook(this);
         }
         if (first) {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index d0e83339acb184e8c1bb98a5208b5a5efb47a23a..32c05a7eef0ef9df3024bc578a0a898f88a9f338 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2007,11 +2007,13 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             this.player.resendAllSentChunks();
             this.player.resendCraftingRecipes(null, false);
             this.player.resendAdvancements();
+            this.player.chunkInitializationPacketsInTransitKeepaliveIds.clear(); // Don't delay starting sending chunks even if some are already in transit
         } else if (oldPackStatus == null && (packStatus == PlayerResourcePackStatusEvent.Status.ACCEPTED || packStatus == PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED)) {
             // Resend their inventory (we have not sent any chunks yet if this is true, so we do not need to resend any)
             this.player.resendInventory();
             this.player.resendCraftingRecipes(null, false);
             this.player.resendAdvancements();
+            this.player.chunkInitializationPacketsInTransitKeepaliveIds.clear(); // Don't delay starting sending chunks even if some are already in transit
         }
         // Martijn end - custom blocks and items
 
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 874fb7c1793271dd4ff7f1083db4c5f7f5e7bd12..8554b85ba84e4b5ed15d15049dd17f2a617870de 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -275,6 +275,13 @@ public abstract class PlayerList {
 
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         playerconnection.send(new ClientboundCustomPayloadPacket(ClientboundCustomPayloadPacket.BRAND, (new FriendlyByteBuf(Unpooled.buffer())).writeUtf(this.getServer().getServerModName())));
+
+        // Martijn start - custom blocks and items
+        this.server.getServerResourcePack().ifPresent((minecraftserver_serverresourcepackinfo) -> {
+            player.sendTexturePack(minecraftserver_serverresourcepackinfo.url(), minecraftserver_serverresourcepackinfo.hash(), minecraftserver_serverresourcepackinfo.isRequired(), minecraftserver_serverresourcepackinfo.prompt());
+        });
+        // Martijn end - custom blocks and items
+
         playerconnection.send(new ClientboundChangeDifficultyPacket(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
         playerconnection.send(new ClientboundPlayerAbilitiesPacket(player.getAbilities()));
         playerconnection.send(new ClientboundSetCarriedItemPacket(player.getInventory().selected));
@@ -407,9 +414,11 @@ public abstract class PlayerList {
         worldserver1 = player.getLevel(); // CraftBukkit - Update in case join event changed it
         // CraftBukkit end
         this.sendLevelInfo(player, worldserver1);
-        this.server.getServerResourcePack().ifPresent((minecraftserver_serverresourcepackinfo) -> {
-            player.sendTexturePack(minecraftserver_serverresourcepackinfo.url(), minecraftserver_serverresourcepackinfo.hash(), minecraftserver_serverresourcepackinfo.isRequired(), minecraftserver_serverresourcepackinfo.prompt());
-        });
+        // Martijn start - custom blocks and items
+//        this.server.getServerResourcePack().ifPresent((minecraftserver_serverresourcepackinfo) -> {
+//            player.sendTexturePack(minecraftserver_serverresourcepackinfo.url(), minecraftserver_serverresourcepackinfo.hash(), minecraftserver_serverresourcepackinfo.isRequired(), minecraftserver_serverresourcepackinfo.prompt());
+//        });
+        // Martijn end - custom blocks and items
         player.sendServerStatus(this.server.getStatus());
         Iterator iterator = player.getActiveEffects().iterator();
 
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 7958d8a494a9e2021625561d026303883dd4a0f4..1cd8d8e596f0a62cde63d5966952ad0fe5ec19f1 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -148,7 +148,7 @@ public class Item implements ItemLike {
 
         public @NotNull StonecutterRecipe build(@NotNull Item result) {
             var recipeIngredient = new Ingredient(Stream.of(new Ingredient.ItemValue(new ItemStack(ingredient))));
-            recipeIngredient.exact = true;
+//            recipeIngredient.exact = true;
             return new StonecutterRecipe(key, group == null ? key.getPath() : group, recipeIngredient, new ItemStack(result, resultAmount), true);
         }
 
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 03f22da4d15020180ec39f66d85ad47eb427fdd3..0631a264fb76382c2107f845c55b6a103b95992e 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -32,7 +32,7 @@ import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
-import nl.martijnmuijsers.paper.item.SuCraftCraftingRecipeProvider;
+import org.bukkit.entity.Player;
 import org.slf4j.Logger;
 
 import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap; // CraftBukkit
@@ -93,7 +93,13 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         if (this.byName.containsKey(irecipe.getId()) || map.containsKey(irecipe.getId())) {
             throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.getId());
         } else {
-            map.putAndMoveToFirst(irecipe.getId(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+            // Martijn start - custom blocks and items
+            if (irecipe.shouldAlwaysSend()) {
+                map.putAndMoveToFirst(irecipe.getId(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+            } else {
+                map.putAndMoveToLast(irecipe.getId(), irecipe);
+            }
+            // Martijn end - custom blocks and items
             this.byName.put(irecipe.getId(), irecipe);
         }
     }
@@ -139,7 +145,20 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         return (List) this.byType(type).values().stream().filter((irecipe) -> {
             return irecipe.matches(inventory, world);
         }).sorted(Comparator.comparing((irecipe) -> {
-            return irecipe.getResultItem().getDescriptionId();
+            // Martijn start - custom blocks and items
+            var result = irecipe.getResultItem();
+            var viewers = inventory.getViewers();
+            if (!viewers.isEmpty()) {
+                var viewer = viewers.get(0);
+                if (viewer instanceof Player player) {
+                    var replacementRule = result.getItem().replacementRule;
+                    if (replacementRule != null) {
+                        result = replacementRule.replace(result, player.hasSuCraftResourcePack(), player.hasHighPingForCustomBlocks());
+                    }
+                }
+            }
+            return result.getDescriptionId();
+            // Martijn end - custom blocks and items
         })).collect(Collectors.toList());
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 2ef7f2430af0aa1ddb1ebc00f040feabb4aaf820..80ea871646526098f89ce27bfc9f685c52cbdcf9 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -279,14 +279,37 @@ public class Block extends BlockBehaviour implements ItemLike {
     public @NotNull List<@NotNull CustomStonecutterRecipe> customStonecutterRecipes = new ArrayList<>(0);
 
     public @NotNull Block withCustomStonecutterRecipe(@NotNull CustomStonecutterRecipe recipe) {
-        this.customStonecutterRecipes.add(recipe);
+        if (!this.customStonecutterRecipes.stream().anyMatch(existingRecipe -> existingRecipe.ingredient.equals(recipe.ingredient))) {
+            this.customStonecutterRecipes.add(recipe);
+        }
+        return this;
+    }
+
+    public @NotNull Block withCustomStonecutterRecipe(@NotNull Block ingredient, @Nullable String group, int resultAmount, boolean transitive) {
+        @NotNull String uniqueRecipeDescription = id.getPath() + "_from_" + ingredient.id.getPath() + "_stonecutting";
+        this.withCustomStonecutterRecipe(new CustomStonecutterRecipe(ResourceLocation.sucraft(uniqueRecipeDescription), group, ingredient, resultAmount));
+        if (transitive) {
+            for (CustomStonecutterRecipe transitiveRecipe : ingredient.customStonecutterRecipes) {
+                this.withCustomStonecutterRecipe(transitiveRecipe.ingredient(), null, resultAmount * transitiveRecipe.resultAmount(), true);
+            }
+        }
         return this;
     }
 
-    public @NotNull Block withCustomSlabStonecutterRecipe(@NotNull Block ingredient, @Nullable String group) {
-        @NotNull String uniqueRecipeDescription = id.getPath() + "_from_" +  ingredient.id.getPath() + "_stonecutting";
-//        System.out.println("TEMP DEBUG - Custom slab stonecutter recipe: " + uniqueRecipeDescription + " = " + ingredient.id + " -> " + this.id);
-        return this.withCustomStonecutterRecipe(new CustomStonecutterRecipe(ResourceLocation.sucraft(uniqueRecipeDescription), group, ingredient, 2));
+    public @NotNull Block withCustomSlabStonecutterRecipe(@NotNull Block ingredient, @Nullable String group, boolean transitive) {
+        return this.withCustomStonecutterRecipe(ingredient, group, 2, transitive);
+    }
+
+    public @NotNull Block withCustomSlabStonecutterRecipe(@NotNull Block ingredient) {
+        return this.withCustomSlabStonecutterRecipe(ingredient, null, true);
+    }
+
+    public @NotNull Block withCustomOneToOneStonecutterRecipe(@NotNull Block ingredient, @Nullable String group, boolean transitive) {
+        return this.withCustomStonecutterRecipe(ingredient, group, 1, transitive);
+    }
+
+    public @NotNull Block withCustomOneToOneStonecutterRecipe(@NotNull Block ingredient) {
+        return this.withCustomOneToOneStonecutterRecipe(ingredient, null, true);
     }
 
     // Martijn end - custom blocks and items
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index 727e8193af2e041f03a74377722863a8f73a819c..95fb7012f0efdf753e8cad7cb9a0dd450ce96778 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -84,11 +84,11 @@ public class SuCraftBlocks {
             .withFullBlockBoundingBoxItem(),
         new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F, 1.0F).sound(SoundType.GRAVEL)).mineableWithShovel().dirt(),
         SuCraftBlockLoot::dropSelf
-    );
+    ).withCustomOneToOneStonecutterRecipe(Blocks.DIRT);
 
-    public static final Block POLISHED_CALCITE = registerPolished("calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
-    public static final Block POLISHED_DRIPSTONE = registerPolished("dripstone", Blocks.DRIPSTONE_BLOCK, MaterialColor.TERRACOTTA_BROWN);
-    public static final Block POLISHED_TUFF = registerPolished("tuff", Blocks.TUFF, MaterialColor.TERRACOTTA_GRAY);
+    public static final Block POLISHED_CALCITE = registerPolished(Blocks.CALCITE, "calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
+    public static final Block POLISHED_DRIPSTONE = registerPolished(Blocks.DRIPSTONE_BLOCK, "dripstone", Blocks.DRIPSTONE_BLOCK, MaterialColor.TERRACOTTA_BROWN);
+    public static final Block POLISHED_TUFF = registerPolished(Blocks.TUFF, "tuff", Blocks.TUFF, MaterialColor.TERRACOTTA_GRAY);
     public static final Block ANDESITE_BRICKS = registerBricks("andesite", Blocks.POLISHED_ANDESITE, MaterialColor.STONE);
     public static final Block CALCITE_BRICKS = registerBricks("calcite", Blocks.CALCITE, MaterialColor.TERRACOTTA_WHITE);
     public static final Block DIORITE_BRICKS = registerBricks("diorite", Blocks.POLISHED_DIORITE, MaterialColor.QUARTZ);
@@ -164,7 +164,7 @@ public class SuCraftBlocks {
     public static final Block RED_MAPLE_LEAVES = registerLeaves("red_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_RED);
     public static final Block ORANGE_MAPLE_LEAVES = registerLeaves("orange_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_ORANGE);
     public static final Block YELLOW_MAPLE_LEAVES = registerLeaves("yellow_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_YELLOW);
-    public static final Block DIRT_SLAB = registerRealSlab("dirt", null, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.MUD_BRICK_SLAB, BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F).sound(SoundType.GRAVEL)).breakBeforeClientKnowsToBreak().mineableWithShovel().dirt();
+    public static final Block DIRT_SLAB = registerRealSlab(Blocks.DIRT, "dirt", null, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.MUD_BRICK_SLAB, BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F).sound(SoundType.GRAVEL)).breakBeforeClientKnowsToBreak().mineableWithShovel().dirt();
     public static final Block SNOWY_STONE_BRICK_SLAB = registerFakeSlab(SNOWY_STONE_BRICKS, "snowy_stone_brick", null, Blocks.STONE_BRICK_SLAB);
     public static final Block DIRTY_STONE_BRICK_SLAB = registerFakeSlab(DIRTY_STONE_BRICKS, "dirty_stone_brick", null, Blocks.STONE_BRICK_SLAB);
     public static final Block CRACKED_STONE_BRICK_SLAB = registerFakeSlab(Blocks.CRACKED_STONE_BRICKS, "cracked_stone_brick", "cracked_stone_bricks", Blocks.STONE_BRICK_SLAB);
@@ -318,7 +318,7 @@ public class SuCraftBlocks {
     public static final Block WARPED_STEM_SLAB = registerFakeStemSlab(Blocks.WARPED_STEM, "warped", Blocks.WARPED_SLAB);
     public static final Block CRIMSON_STEM_SLAB = registerFakeStemSlab(Blocks.CRIMSON_STEM, "crimson", Blocks.CRIMSON_SLAB);
     public static final Block MANGROVE_LOG_SLAB = registerFakeLogSlab(Blocks.MANGROVE_LOG, "mangrove", Blocks.MANGROVE_SLAB);
-    public static final Block STRIPPED_OAK_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.OAK_LOG, "oak", Blocks.OAK_SLAB);
+    public static final Block STRIPPED_OAK_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_OAK_LOG, "oak", Blocks.OAK_SLAB);
     public static final Block STRIPPED_SPRUCE_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_SPRUCE_LOG, "spruce", Blocks.SPRUCE_SLAB);
     public static final Block STRIPPED_BIRCH_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_BIRCH_LOG, "birch", Blocks.BIRCH_SLAB);
     public static final Block STRIPPED_JUNGLE_LOG_SLAB = registerFakeStrippedLogSlab(Blocks.STRIPPED_JUNGLE_LOG, "jungle", Blocks.JUNGLE_SLAB);
@@ -336,7 +336,7 @@ public class SuCraftBlocks {
     public static final Block WARPED_HYPHAE_SLAB = registerFakeHyphaeSlab(Blocks.WARPED_HYPHAE, "warped", Blocks.WARPED_SLAB);
     public static final Block CRIMSON_HYPHAE_SLAB = registerFakeHyphaeSlab(Blocks.CRIMSON_HYPHAE, "crimson", Blocks.CRIMSON_SLAB);
     public static final Block MANGROVE_WOOD_SLAB = registerFakeWoodSlab(Blocks.MANGROVE_WOOD, "mangrove", Blocks.MANGROVE_SLAB);
-    public static final Block STRIPPED_OAK_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.OAK_WOOD, "oak", Blocks.OAK_SLAB);
+    public static final Block STRIPPED_OAK_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_OAK_WOOD, "oak", Blocks.OAK_SLAB);
     public static final Block STRIPPED_SPRUCE_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_SPRUCE_WOOD, "spruce", Blocks.SPRUCE_SLAB);
     public static final Block STRIPPED_BIRCH_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_BIRCH_WOOD, "birch", Blocks.BIRCH_SLAB);
     public static final Block STRIPPED_JUNGLE_WOOD_SLAB = registerFakeStrippedWoodSlab(Blocks.STRIPPED_JUNGLE_WOOD, "jungle", Blocks.JUNGLE_SLAB);
@@ -455,7 +455,7 @@ public class SuCraftBlocks {
         "ender_pearl_block",
         new SingleMultiStateRealBlockReplacementRuleBuilder()
             .withNoteBlockHost()
-            .withFallback(Blocks.DARK_PRISMARINE)
+            .withFallback(Blocks.WARPED_PLANKS)
             .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
             .withFullBlockBoundingBoxItem(),
         new Block(BlockBehaviour.Properties.of(Material.METAL, MaterialColor.COLOR_CYAN).strength(1.5F)).mineableWithPickaxe(),
@@ -562,7 +562,7 @@ public class SuCraftBlocks {
     /**
      * Based on {@link Blocks#POLISHED_ANDESITE}
      */
-    private static @NotNull Block registerPolished(@NotNull String unpolished, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
+    private static @NotNull Block registerPolished(@NotNull Block originalBlock, @NotNull String unpolished, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
         return register(
             "polished_" + unpolished,
             new SingleMultiStateRealBlockReplacementRuleBuilder()
@@ -572,7 +572,7 @@ public class SuCraftBlocks {
                 .withFullBlockBoundingBoxItem(),
             new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)).mineableWithPickaxe(),
             SuCraftBlockLoot::dropSelf
-        );
+        ).withCustomOneToOneStonecutterRecipe(originalBlock);
     }
 
     /**
@@ -659,7 +659,7 @@ public class SuCraftBlocks {
      * Based on {@link Blocks#OAK_SLAB}
      * @param textureBlock If null, will be the same as the given type, else it will be assumed to be a default Minecraft model as well as texture namespaced key path (for example 'dirt' will mean the model used as double slab is 'minecraft:block/dirt' and the texture used is 'minecraft:block/dirt')
      */
-    private static @NotNull Block registerRealSlab(@NotNull String type, @Nullable String textureBlock, @NotNull Block host, @NotNull Block hostReplacement, @NotNull Block fallback, @NotNull BlockBehaviour.Properties properties) {
+    private static @NotNull Block registerRealSlab(@NotNull Block fullBlock, @NotNull String type, @Nullable String textureBlock, @NotNull Block host, @NotNull Block hostReplacement, @NotNull Block fallback, @NotNull BlockBehaviour.Properties properties) {
         if (textureBlock == null) {
             textureBlock = type;
         }
@@ -673,7 +673,7 @@ public class SuCraftBlocks {
                 .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
             new SlabBlock(properties).slab(),
             SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
-        );
+        ).withCustomSlabStonecutterRecipe(fullBlock);
     }
 
     private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull ModelCreation doubleSlabModelCreation, @NotNull Texture sideTexture, @Nullable Texture bottomHalfBottomTexture, @Nullable Texture bottomHalfTopTexture, @Nullable Texture topHalfBottomTexture, @Nullable Texture topHalfTopTexture, @NotNull Block host, @Nullable Block fallback) {
@@ -690,7 +690,7 @@ public class SuCraftBlocks {
                 .withRealItemRuleFromHostBlock(),
             new SlabBlock(properties == null ? fullBlock.properties : properties).withAddedTagsLike(fullBlock).slab(),
             SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
-        ).withCustomSlabStonecutterRecipe(fullBlock, null);
+        ).withCustomSlabStonecutterRecipe(fullBlock);
     }
 
     private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @Nullable BlockBehaviour.Properties properties, @NotNull String type, @NotNull NamespacedKeyWithoutIntention doubleSlabKey, @Nullable NamespacedKeyWithoutIntention sideTextureKey, @Nullable NamespacedKeyWithoutIntention bottomHalfBottomTextureKey, @Nullable NamespacedKeyWithoutIntention bottomHalfTopTextureKey, @Nullable NamespacedKeyWithoutIntention topHalfBottomTextureKey, @Nullable NamespacedKeyWithoutIntention topHalfTopTextureKey, @NotNull Block host, @Nullable Block fallback) {
@@ -838,7 +838,7 @@ public class SuCraftBlocks {
                 .withRealItemRuleFromHostBlock(),
             new SlabBlock(properties == null ? fullBlock.properties : properties).withAddedTagsLike(fullBlock).slab(),
             SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
-        );
+        ).withCustomSlabStonecutterRecipe(fullBlock);
     }
 
     private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @NotNull String type, @Nullable String textureBlock, @NotNull Block host, @Nullable Block fallback) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
index 18efb79c54a128b935443284a407272b9d568960..981599697140fbbb5501ab534adb63d186f99aca 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/ItemReplacementRule.java
@@ -308,11 +308,13 @@ public interface ItemReplacementRule {
         }
 
         public @NotNull Item getHost(boolean hasHighPing) {
-            return hasHighPing ? this.getHighPingHost() : this.getLowPingHost();
+            return this.getLowPingHost();
+            //return hasHighPing ? this.getHighPingHost() : this.getLowPingHost();
         }
 
         public int getHostCustomModelData(boolean hasHighPing) {
-            return hasHighPing ? this.getHighPingHostCustomModelData() : this.getLowPingHostCustomModelData();
+            return this.getLowPingHostCustomModelData();
+            //return hasHighPing ? this.getHighPingHostCustomModelData() : this.getLowPingHostCustomModelData();
         }
 
         public @NotNull Item getFallback() {
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java
index 156f8cb8f3f93fe21633113e13fa3c51de1ef237..931ece6bcec8919f74a6fa4289eab03bde6882b0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftCraftingRecipeProvider.java
@@ -8,49 +8,126 @@ import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeManager;
 import net.minecraft.world.item.crafting.RecipeType;
 import net.minecraft.world.item.crafting.StonecutterRecipe;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Arrays;
 import java.util.Map;
+import java.util.stream.Stream;
 
 public final class SuCraftCraftingRecipeProvider {
 
     private SuCraftCraftingRecipeProvider() {}
 
+    /**
+     * Utility method (shorter)
+     */
+    private static void addRecipe(@NotNull Recipe<?> recipe) {
+        MinecraftServer.getServer().getRecipeManager().addRecipe(recipe);
+    }
+
+    private static void addStonecutterRecipe(@Nullable String key, @Nullable String group, @NotNull Item ingredient, @NotNull Item result, int resultAmount) {
+        if (key == null) {
+            key = result.id.getPath() + "_from_" +  ingredient.id.getPath() + "_stonecutting";
+        }
+        var recipeIngredient = new Ingredient(Stream.of(new Ingredient.ItemValue(new ItemStack(ingredient))));
+        addRecipe(new StonecutterRecipe(ResourceLocation.sucraft(key), group != null ? group : key, recipeIngredient, new ItemStack(result, resultAmount), true));
+    }
+
+    private static void addStonecutterRecipe(@NotNull Item ingredient, @NotNull Item result, int resultAmount) {
+        addStonecutterRecipe(null, null, ingredient, result, resultAmount);
+    }
+
+    private static void addStonecutterRecipe(@NotNull Item ingredient, @NotNull Item result) {
+        addStonecutterRecipe(ingredient, result, 1);
+    }
+
     public static void run() {
-//    public static void run(Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, Recipe<?>>> map1, ImmutableMap.Builder<ResourceLocation, Recipe<?>> builder) {
-//
-//        // Define a helper function to add new recipes
-//        class AddRecipeHelperFunction {
-//
-//            void addRecipe(Recipe<?> irecipe) {
-//                this.addRecipe(irecipe.getId(), irecipe);
-//            }
-//
-//            void addRecipe(ResourceLocation minecraftkey, Recipe<?> irecipe) {
-//                (map1.computeIfAbsent(irecipe.getType(), (recipes) -> {
-//                    return new Object2ObjectLinkedOpenHashMap<>();
-//                    // CraftBukkit end
-//                })).put(minecraftkey, irecipe);
-//                builder.put(minecraftkey, irecipe);
-//            }
-//
-//        }
-//        var helper = new AddRecipeHelperFunction();
+
+        // Add recipes already defined in items
 
         for (Item item : Registry.ITEM) {
             // Add the stonecutter recipes
             for (var stonecutterRecipe : item.customStonecutterRecipes) {
 //                MinecraftServer.LOGGER.info("TEMP DEBUG - Adding recipe " + stonecutterRecipe.build(item).getIngredients().stream().map(y -> Arrays.stream(y.getItems()).map(x -> x.getItem().id).toList()).toList() + " -> " + stonecutterRecipe.build(item).getType() + " " + stonecutterRecipe.build(item).getId() + " " + stonecutterRecipe.build(item).getResultItem().getItem() + " x " + stonecutterRecipe.build(item).getResultItem().getCount());
-                MinecraftServer.getServer().getRecipeManager().addRecipe(stonecutterRecipe.build(item));
+                addRecipe(stonecutterRecipe.build(item));
             }
         }
 
+        // Add other recipes
+
+        // Working with wood in stonecutters
+        addStonecutterRecipe(Items.OAK_PLANKS, Items.OAK_STAIRS);
+        addStonecutterRecipe(Items.SPRUCE_PLANKS, Items.SPRUCE_STAIRS);
+        addStonecutterRecipe(Items.BIRCH_PLANKS, Items.BIRCH_STAIRS);
+        addStonecutterRecipe(Items.JUNGLE_PLANKS, Items.JUNGLE_STAIRS);
+        addStonecutterRecipe(Items.ACACIA_PLANKS, Items.ACACIA_STAIRS);
+        addStonecutterRecipe(Items.DARK_OAK_PLANKS, Items.DARK_OAK_STAIRS);
+        addStonecutterRecipe(Items.WARPED_PLANKS, Items.WARPED_STAIRS);
+        addStonecutterRecipe(Items.CRIMSON_PLANKS, Items.CRIMSON_STAIRS);
+        addStonecutterRecipe(Items.MANGROVE_PLANKS, Items.MANGROVE_STAIRS);
+        addStonecutterRecipe(Items.OAK_PLANKS, Items.OAK_SLAB, 2);
+        addStonecutterRecipe(Items.SPRUCE_PLANKS, Items.SPRUCE_SLAB, 2);
+        addStonecutterRecipe(Items.BIRCH_PLANKS, Items.BIRCH_SLAB, 2);
+        addStonecutterRecipe(Items.JUNGLE_PLANKS, Items.JUNGLE_SLAB, 2);
+        addStonecutterRecipe(Items.ACACIA_PLANKS, Items.ACACIA_SLAB, 2);
+        addStonecutterRecipe(Items.DARK_OAK_PLANKS, Items.DARK_OAK_SLAB, 2);
+        addStonecutterRecipe(Items.WARPED_PLANKS, Items.WARPED_SLAB, 2);
+        addStonecutterRecipe(Items.CRIMSON_PLANKS, Items.CRIMSON_SLAB, 2);
+        addStonecutterRecipe(Items.MANGROVE_PLANKS, Items.MANGROVE_SLAB, 2);
+        Stream.of(Items.OAK_LOG, Items.STRIPPED_OAK_LOG, Items.OAK_WOOD, Items.STRIPPED_OAK_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.OAK_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.OAK_SLAB, 8);
+        });
+        Stream.of(Items.SPRUCE_LOG, Items.STRIPPED_SPRUCE_LOG, Items.SPRUCE_WOOD, Items.STRIPPED_SPRUCE_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.SPRUCE_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.SPRUCE_SLAB, 8);
+        });
+        Stream.of(Items.BIRCH_LOG, Items.STRIPPED_BIRCH_LOG, Items.BIRCH_WOOD, Items.STRIPPED_BIRCH_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.BIRCH_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.BIRCH_SLAB, 8);
+        });
+        Stream.of(Items.JUNGLE_LOG, Items.STRIPPED_JUNGLE_LOG, Items.JUNGLE_WOOD, Items.STRIPPED_JUNGLE_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.JUNGLE_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.JUNGLE_SLAB, 8);
+        });
+        Stream.of(Items.ACACIA_LOG, Items.STRIPPED_ACACIA_LOG, Items.ACACIA_WOOD, Items.STRIPPED_ACACIA_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.ACACIA_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.ACACIA_SLAB, 8);
+        });
+        Stream.of(Items.DARK_OAK_LOG, Items.STRIPPED_DARK_OAK_LOG, Items.DARK_OAK_WOOD, Items.STRIPPED_DARK_OAK_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.DARK_OAK_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.DARK_OAK_SLAB, 8);
+        });
+        Stream.of(Items.WARPED_STEM, Items.STRIPPED_WARPED_STEM, Items.WARPED_HYPHAE, Items.STRIPPED_WARPED_HYPHAE).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.WARPED_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.WARPED_SLAB, 8);
+        });
+        Stream.of(Items.CRIMSON_STEM, Items.STRIPPED_CRIMSON_STEM, Items.CRIMSON_HYPHAE, Items.STRIPPED_CRIMSON_HYPHAE).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.CRIMSON_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.CRIMSON_SLAB, 8);
+        });
+        Stream.of(Items.MANGROVE_LOG, Items.STRIPPED_MANGROVE_LOG, Items.MANGROVE_WOOD, Items.STRIPPED_MANGROVE_WOOD).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, Items.MANGROVE_STAIRS, 4);
+            addStonecutterRecipe(ingredient, Items.MANGROVE_SLAB, 8);
+        });
+
+        // Shortcuts
+        addStonecutterRecipe(Items.BASALT, SuCraftItems.POLISHED_BASALT_SLAB, 2);
+
+        // Quartz meander
+        Stream.of(Items.QUARTZ_BLOCK, Items.CHISELED_QUARTZ_BLOCK).forEach(ingredient -> {
+            addStonecutterRecipe(ingredient, SuCraftItems.QUARTZ_SPIRAL_MEANDER);
+            addStonecutterRecipe(ingredient, SuCraftItems.QUARTZ_SPIRAL_MEANDER_SLAB, 2);
+        });
+
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 2e37b3fb79c53a4432f997c95047d1e71173909f..1fdd03541ec06cc763903220b7501ecde0d29bbc 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -319,7 +319,7 @@ public class SuCraftItems {
     public static final Item PAPER_SLAB = registerSlab(SuCraftBlocks.PAPER_SLAB, "Paper");
     public static final Item QUARTZ_SPIRAL_MEANDER = registerBlock(SuCraftBlocks.QUARTZ_SPIRAL_MEANDER, "Quartz Meander", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.CHISELED_QUARTZ_BLOCK));
     public static final Item QUARTZ_SPIRAL_MEANDER_SLAB = registerSlab(SuCraftBlocks.QUARTZ_SPIRAL_MEANDER_SLAB, "Quartz Meander");
-    public static final Item ENDER_PEARL_BLOCK = registerBlock(SuCraftBlocks.ENDER_PEARL_BLOCK, "Ender Pearl Block", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.DARK_PRISMARINE));
+    public static final Item ENDER_PEARL_BLOCK = registerBlock(SuCraftBlocks.ENDER_PEARL_BLOCK, "Ender Pearl Block", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.WARPED_PLANKS));
 
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
