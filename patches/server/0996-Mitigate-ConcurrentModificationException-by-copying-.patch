From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Mon, 6 Sep 2021 02:05:16 -0500
Subject: [PATCH] Mitigate ConcurrentModificationException by copying
 entitySection access


diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 2d3aacdae95963385ea228e73a2073a6fd96e640..de3fca27b2932ec6b25d6d63c497723a2a20bc0b 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -276,23 +276,23 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
             if (flag2 && !flag3) {
                 entitysection.getEntities().filter((entityaccess) -> {
                     return !entityaccess.isAlwaysTicking();
-                }).forEach(this::stopTicking);
+                }).collect(Collectors.toList()).forEach(this::stopTicking); // EMC
             }
 
             if (flag && !flag1) {
                 entitysection.getEntities().filter((entityaccess) -> {
                     return !entityaccess.isAlwaysTicking();
-                }).forEach(this::stopTracking);
+                }).collect(Collectors.toList()).forEach(this::stopTracking); // EMC
             } else if (!flag && flag1) {
                 entitysection.getEntities().filter((entityaccess) -> {
                     return !entityaccess.isAlwaysTicking();
-                }).forEach(this::startTracking);
+                }).collect(Collectors.toList()).forEach(this::startTracking); // EMC
             }
 
             if (!flag2 && flag3) {
                 entitysection.getEntities().filter((entityaccess) -> {
                     return !entityaccess.isAlwaysTicking();
-                }).forEach(this::startTicking);
+                }).collect(Collectors.toList()).forEach(this::startTicking); // EMC
             }
 
         });
