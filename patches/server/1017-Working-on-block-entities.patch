From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 10 Jul 2022 23:45:11 +0200
Subject: [PATCH] Working on block entities


diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 4fb86e6b70d2b8d8474879d67fbe3efd80f8c351..9fd30fd735bed9fee236fb17126653d47060541e 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -399,7 +399,8 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
             tagEntries = ((SuCraftTagsProvider<T>) new SuCraftBiomeTagsProvider((Registry<Biome>) this)).run(tagEntries);
         } else if (this.key().equals(BLOCK_REGISTRY)) {
             tagEntries = ((SuCraftTagsProvider<T>) new SuCraftBlockTagsProvider((Registry<Block>) this)).run(tagEntries);
-            tagEntries = ((SuCraftTagsProvider<T>) new SuCraftObservableBlockTagsSpreader((Registry<Block>) this)).run(tagEntries);
+            var spreader = (SuCraftTagsProvider<T>) new SuCraftObservableBlockTagsSpreader((Registry<Block>) this);
+            tagEntries = spreader.run(tagEntries);
         }
         // Martijn end - custom resource
         tagEntries.forEach((tag, entries) -> {
diff --git a/src/main/java/net/minecraft/data/loot/BlockLoot.java b/src/main/java/net/minecraft/data/loot/BlockLoot.java
index 9b0eaa1f04eccc85ccef2b7b1acb15a240fce52f..412ae3d0a634cbe183ee2ebeefb35dbec3f87fdf 100644
--- a/src/main/java/net/minecraft/data/loot/BlockLoot.java
+++ b/src/main/java/net/minecraft/data/loot/BlockLoot.java
@@ -149,7 +149,7 @@ public class BlockLoot implements Consumer<BiConsumer<ResourceLocation, LootTabl
         return LootTable.lootTable().withPool(applyExplosionCondition(Blocks.FLOWER_POT, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(Blocks.FLOWER_POT)))).withPool(applyExplosionCondition(plant, LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(LootItem.lootTableItem(plant))));
     }
 
-    private static LootTable.Builder createSlabItemTable(Block drop) {
+    public static LootTable.Builder createSlabItemTable(Block drop) { // Martijn - custom blocks and items
         return LootTable.lootTable().withPool(LootPool.lootPool().setRolls(ConstantValue.exactly(1.0F)).add(applyExplosionDecay(drop, LootItem.lootTableItem(drop).apply(SetItemCountFunction.setCount(ConstantValue.exactly(2.0F)).when(LootItemBlockStatePropertyCondition.hasBlockStateProperties(drop).setProperties(StatePropertiesPredicate.Builder.properties().hasProperty(SlabBlock.TYPE, SlabType.DOUBLE)))))));
     }
 
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 9c02b00e5e15386f113baa7432d9e2a5515db111..076e3061cf500b10d3b58170864c79c60f6b8ee9 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -2,8 +2,10 @@ package net.minecraft.network;
 
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import io.netty.bootstrap.Bootstrap;
+import io.netty.buffer.Unpooled;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
 import io.netty.channel.ChannelFuture;
@@ -29,18 +31,32 @@ import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.util.BitSet;
+import java.util.Collections;
 import java.util.Optional;
 import java.util.Queue;
+import java.util.UUID;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
+
+import io.papermc.paper.util.CoordinateUtils;
+import it.unimi.dsi.fastutil.longs.Long2IntArrayMap;
+import it.unimi.dsi.fastutil.longs.Long2IntMap;
+import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import it.unimi.dsi.fastutil.longs.LongSet;
 import net.minecraft.Util;
+import net.minecraft.core.BlockPos;
 import net.minecraft.core.Registry;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
@@ -48,6 +64,8 @@ import net.minecraft.network.protocol.game.ClientboundContainerSetContentPacket;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RunningOnDifferentThreadException;
@@ -55,12 +73,20 @@ import net.minecraft.server.network.ServerGamePacketListenerImpl;
 import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.util.LazyLoadedValue;
 import net.minecraft.util.Mth;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.Marker;
 import org.slf4j.MarkerFactory;
@@ -110,6 +136,152 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private float averageSentPackets;
     private int tickCount;
     private boolean handlingFault;
+
+    // Martijn start - custom blocks and items
+
+    // Keeping track of the Entity.getEntityId() of the fake entities that are sent to this connection's player as block entities
+
+    /**
+     * Stores the entity id (@{link org.bukkit.entity.Entity#getEntityId}) of the block entity (sent or to send) at the given block position (represented by a block key ({@link CoordinateUtils#getBlockKey}))
+     */
+    private final @NotNull Long2IntMap blockEntityEntityIdByBlockPosKey = new Long2IntOpenHashMap();
+
+    /**
+     * Stores the block state of the block entity (sent or to send) at the given block position (represented by a block key ({@link CoordinateUtils#getBlockKey}))
+     */
+    private final @NotNull Long2ObjectMap<BlockState> blockEntityBlockStateByBlockPosKey = new Long2ObjectOpenHashMap<>(0);
+
+    /**
+     * Stores the block positions (represented by a block key ({@link CoordinateUtils#getBlockKey})) at the given chunk section position (represented by a chunk section key ({@link CoordinateUtils#getChunkSectionKey}))
+     */
+    private final @NotNull Long2ObjectMap<@NotNull LongSet> blockEntityBlockPosKeysPerChunkSectionKey = new Long2ObjectOpenHashMap<>(0);
+
+    /**
+     * Utility function used in {@link #spawnBlockEntity}
+     */
+    private static void writeMetadataSharedFlags(@NotNull FriendlyByteBuf buf, int index, int byteValue) {
+        buf.writeByte(index);
+        buf.writeVarInt(0);
+        buf.writeByte(byteValue);
+    }
+
+    /**
+     * Utility function used in {@link #spawnBlockEntity}
+     */
+    private static int bitsetToInt(@NotNull BitSet bitset) {
+        long[] longArray = bitset.toLongArray();
+        if (longArray.length == 0) {
+            return 0;
+        }
+        return (int) longArray[0];
+    }
+
+    private void spawnBlockEntity(@NotNull BlockPos blockPos, @NotNull BlockState blockState) {
+
+        long blockKey = CoordinateUtils.getBlockKey(blockPos);
+        int entityId = blockEntityEntityIdByBlockPosKey.computeIfAbsent(blockKey, $ -> Entity.ENTITY_COUNTER.incrementAndGet());
+        blockEntityBlockStateByBlockPosKey.put(blockKey, blockState);
+        long chunkSectionKey = CoordinateUtils.getChunkSectionKey(blockPos);
+        blockEntityBlockPosKeysPerChunkSectionKey.computeIfAbsent(chunkSectionKey, $ -> new LongOpenHashSet(0)).add(blockKey);
+        UUID entityUUID = UUID.randomUUID();
+
+        // Send the add entity packet
+        this.send(new ClientboundAddEntityPacket(entityId, entityUUID, blockPos.getX(), blockPos.getY(), blockPos.getZ(), 0F, 0F, EntityType.ARMOR_STAND, 0, Vec3.ZERO, 0));
+
+        // Send the set equipment packet
+        this.send(new ClientboundSetEquipmentPacket(entityId, Collections.singletonList(new Pair<>(EquipmentSlot.HEAD, blockState.getBlock().replacementRule.getBlockEntityItemStack(blockState)))));
+
+        // Send the set entity data packet
+        var setEntityDataBuf = new FriendlyByteBuf(Unpooled.buffer());
+        setEntityDataBuf.writeVarInt(0x4D);
+        setEntityDataBuf.writeVarInt(entityId);
+        // Entity shared flags
+        {
+            var entitySharedFlagsBitset = new BitSet(8);
+            entitySharedFlagsBitset.set(0, false); // On fire
+            entitySharedFlagsBitset.set(5, true); // Invisible
+            entitySharedFlagsBitset.set(6, false); // Glowing
+            writeMetadataSharedFlags(setEntityDataBuf, 0, bitsetToInt(entitySharedFlagsBitset));
+        }
+        // Armor stand shared flags
+        {
+            var armorStandSharedFlagsBitset = new BitSet(8);
+            armorStandSharedFlagsBitset.set(0, false); // Small
+            armorStandSharedFlagsBitset.set(2, false); // Has arms
+            armorStandSharedFlagsBitset.set(3, false); // Has base plate
+            armorStandSharedFlagsBitset.set(4, false); // Marker
+            writeMetadataSharedFlags(setEntityDataBuf, 15, bitsetToInt(armorStandSharedFlagsBitset));
+        }
+        // Head rotation, body rotation, left arm rotation, right arm rotation, left leg rotation and right leg rotation are skipped (unnecessary)
+        setEntityDataBuf.writeByte(0xFF);
+        this.send(new ClientboundSetEntityDataPacket(setEntityDataBuf));
+
+    }
+
+    private void despawnBlockEntity(@NotNull BlockPos blockPos, boolean needToRemoveFromPerChunkSectionKey) {
+        long blockKey = CoordinateUtils.getBlockKey(blockPos);
+        if (!this.blockEntityEntityIdByBlockPosKey.containsKey(blockKey)) {
+            return;
+        }
+        this.blockEntityEntityIdByBlockPosKey.remove(blockKey);
+        this.blockEntityBlockStateByBlockPosKey.remove(blockKey);
+        if (needToRemoveFromPerChunkSectionKey) {
+            long chunkSectionKey = CoordinateUtils.getChunkSectionKey(blockPos);
+            this.blockEntityBlockPosKeysPerChunkSectionKey.computeIfPresent(chunkSectionKey, ($, blockPosKeys) -> {
+                blockPosKeys.remove(blockKey);
+                if (blockPosKeys.isEmpty()) {
+                    return null;
+                }
+                return blockPosKeys;
+            });
+        }
+    }
+
+    /**
+     * Also despawns any existing sent block entity at the position that has a different block state
+     */
+    private void spawnBlockEntityIfNotSent(@NotNull BlockPos blockPos, @NotNull BlockState blockState) {
+        long blockKey = CoordinateUtils.getBlockKey(blockPos);
+        @Nullable BlockState existingSentBlockState = blockEntityBlockStateByBlockPosKey.get(blockKey);
+        if (existingSentBlockState != null) {
+            if (existingSentBlockState.equals(blockState)) {
+                return;
+            }
+            this.despawnBlockEntity(blockPos, true);
+        }
+        this.spawnBlockEntity(blockPos, blockState);
+    }
+
+    /**
+     * Completely updates this player correctly as per the current potential block entity at the given position
+     * <br>
+     * To be called when a block update for the block is sent to the player
+     */
+    public void updatePotentialBlockEntityAtPosition(@NotNull BlockPos blockPos) {
+        long blockKey = CoordinateUtils.getBlockKey(blockPos);
+        @NotNull BlockState state = this.getPlayer().getLevel().getBlockState(blockPos);
+        @Nullable var replacementRule = state.getBlock().replacementRule;
+        if (replacementRule == null || !replacementRule.rendersAsEntity()) {
+            if (this.blockEntityEntityIdByBlockPosKey.containsKey(blockKey)) {
+                this.despawnBlockEntity(blockPos, true);
+            }
+            return;
+        }
+        spawnBlockEntityIfNotSent(blockPos, state);
+    }
+
+    /**
+     * To be called for every chunk section of a chunk when it is being unloaded from the player
+     */
+    private void despawnBlockEntitiesInChunkSection(@NotNull long chunkSectionKey) {
+        this.blockEntityBlockPosKeysPerChunkSectionKey.computeIfPresent(chunkSectionKey, ($, blockPosKeys) -> {
+            blockPosKeys.forEach(blockPosKey -> this.despawnBlockEntity(BlockPos.of(blockPosKey), false));
+            return null;
+        });
+    }
+
+    // Martijn end - custom blocks and items
+
     // Paper start - NetworkClient implementation
     public int protocolVersion;
     public java.net.InetSocketAddress virtualHost;
@@ -409,6 +581,9 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         if (!connected && !preparing) {
             return; // Do nothing
         }
+        // Martijn start - custom blocks and items
+        callback = packet.updateCallbackWithBlockEntityPacketSends(callback, this);
+        // Martijn end - custom blocks and items
         packet.onPacketDispatch(getPlayer());
         if (connected && (InnerUtil.canSendImmediate(this, packet) || (
             net.minecraft.server.MCUtil.isMainThread() && packet.isReady() && this.queue.isEmpty() &&
diff --git a/src/main/java/net/minecraft/network/protocol/Packet.java b/src/main/java/net/minecraft/network/protocol/Packet.java
index 4d051263727b212fef6d4d295d90f4f6bae60af4..5fdb104e8df5539f13d05ba35c602c778f71331d 100644
--- a/src/main/java/net/minecraft/network/protocol/Packet.java
+++ b/src/main/java/net/minecraft/network/protocol/Packet.java
@@ -1,5 +1,8 @@
 package net.minecraft.network.protocol;
 
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.PacketListener;
 import org.jetbrains.annotations.NotNull;
@@ -56,6 +59,10 @@ public interface Packet<T extends PacketListener> {
         return null;
     }
 
+    default <F extends Future<? super Void>> GenericFutureListener<F> updateCallbackWithBlockEntityPacketSends(@Nullable GenericFutureListener<F> callback, @NotNull Connection connection) {
+        return callback;
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
index c9bb0944fe1b32fd95e711e2e73faed426daa025..60445aa10c329138936e2f564ea1d701ff57cf5f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundBlockUpdatePacket.java
@@ -1,6 +1,9 @@
 package net.minecraft.network.protocol.game;
 
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
 import net.minecraft.core.BlockPos;
+import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.BlockGetter;
@@ -10,6 +13,7 @@ import nl.martijnmuijsers.paper.protocol.CachableCustomContentReplaceable;
 import nl.martijnmuijsers.paper.protocol.ReplacedCustomContentCache;
 import org.jetbrains.annotations.NotNull;
 
+import javax.annotation.Nullable;
 import java.util.Arrays;
 
 public class ClientboundBlockUpdatePacket implements Packet<ClientGamePacketListener>, CachableCustomContentReplaceable<ClientboundBlockUpdatePacket> { // Martijn - custom blocks and items
@@ -76,6 +80,18 @@ public class ClientboundBlockUpdatePacket implements Packet<ClientGamePacketList
         }
     }
 
+    @Override
+    public <F extends Future<? super Void>> GenericFutureListener<F> updateCallbackWithBlockEntityPacketSends(@Nullable GenericFutureListener<F> callback, @NotNull Connection connection) {
+        return future -> {
+            if (callback != null) {
+                callback.operationComplete(future);
+            }
+            if (!future.isCancelled() && future.isSuccess() && connection.isConnected()) {
+                connection.updatePotentialBlockEntityAtPosition(this.pos);
+            }
+        };
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
index b0fbfd9f32bb73d9ac7f6487235c9ea52f4fbf7c..7b0d25aa0f0637ecbe9617e7e779ab612579061e 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkWithLightPacket.java
@@ -2,11 +2,19 @@ package net.minecraft.network.protocol.game;
 
 import java.util.BitSet;
 import javax.annotation.Nullable;
+
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.SectionPos;
+import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.jetbrains.annotations.NotNull;
 
 public class ClientboundLevelChunkWithLightPacket implements Packet<ClientGamePacketListener> {
     private final int x;
@@ -92,6 +100,38 @@ public class ClientboundLevelChunkWithLightPacket implements Packet<ClientGamePa
 //        return this;
 //    }
 
+    @Override
+    public <F extends Future<? super Void>> GenericFutureListener<F> updateCallbackWithBlockEntityPacketSends(@Nullable GenericFutureListener<F> callback, @NotNull Connection connection) {
+        return future -> {
+            if (callback != null) {
+                callback.operationComplete(future);
+            }
+            if (!future.isCancelled() && future.isSuccess() && connection.isConnected()) {
+                try {
+                    @Nullable LevelChunk chunk = connection.getPlayer().getLevel().getChunkIfLoaded(this.x, this.z);
+                    if (chunk != null) {
+                        int sectionsCount = chunk.getSectionsCount();
+                        int chunkMinBlockX = chunk.getPos().getMinBlockX();
+                        int chunkMinBlockZ = chunk.getPos().getMinBlockZ();
+                        for (int sectionY = 0; sectionY < sectionsCount; sectionY++) {
+                            var section = chunk.getSection(sectionY);
+                            if (section.potentiallyContainsBlockEntity()) {
+                                var sectionMinBlockY = section.bottomBlockY();
+                                for (int xInSection = 0; xInSection < 16; xInSection++) {
+                                    for (int yInSection = 0; yInSection < 16; yInSection++) {
+                                        for (int zInSection = 0; zInSection < 16; zInSection++) {
+                                            connection.updatePotentialBlockEntityAtPosition(new BlockPos(xInSection + chunkMinBlockX, yInSection + sectionMinBlockY, zInSection + chunkMinBlockZ));
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                    }
+                } catch (Exception ignored) {}
+            }
+        };
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index b2d8b04ea3aa4040c2afbe8db27d73a13f86e808..cd87d1beeff027fd4c0a003da6e11a557454224f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -1,5 +1,7 @@
 package net.minecraft.network.protocol.game;
 
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
 import it.unimi.dsi.fastutil.shorts.ShortIterator;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 
@@ -7,15 +9,20 @@ import java.util.Arrays;
 import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
+import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import nl.martijnmuijsers.paper.protocol.CachableCustomContentReplaceable;
 import nl.martijnmuijsers.paper.protocol.ReplacedCustomContentCache;
+import org.bukkit.Chunk;
 import org.jetbrains.annotations.NotNull;
 
+import javax.annotation.Nullable;
+
 public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePacketListener>, CachableCustomContentReplaceable<ClientboundSectionBlocksUpdatePacket> { // Martijn - custom blocks and items
 
     private static final int POS_IN_SECTION_BITS = 12;
@@ -142,6 +149,24 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         }
     }
 
+    @Override
+    public <F extends Future<? super Void>> GenericFutureListener<F> updateCallbackWithBlockEntityPacketSends(@Nullable GenericFutureListener<F> callback, @NotNull Connection connection) {
+        return future -> {
+            if (callback != null) {
+                callback.operationComplete(future);
+            }
+            if (!future.isCancelled() && future.isSuccess() && connection.isConnected()) {
+                @Nullable LevelChunk chunk = connection.getPlayer().getLevel().getChunkIfLoaded(this.sectionPos.x(), this.sectionPos.z());
+                if (chunk != null) {
+                    var section = chunk.getSection(chunk.getSectionIndexFromSectionY(this.sectionPos.y()));
+                    if (section.potentiallyContainsBlockEntity()) {
+                        this.sectionPos.blocksInside().forEach(connection::updatePotentialBlockEntityAtPosition);
+                    }
+                }
+            }
+        };
+    }
+
     // Martijn end - custom blocks and items
 
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 5aae519912830ffb67c5c3d9fbe9f7f07ac2ab9d..eb875d1464ee4018513cfb4cf2127fc5bff1b444 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -8,6 +8,7 @@ import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2IntArrayMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
@@ -154,6 +155,7 @@ import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 7123b7a821e2b3b75701976ed5382f4f3aaecfda..1a34ef9e4c242a8048b3d21ab73126a1da70dee2 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -59,6 +59,7 @@ public class ServerPlayerGameMode {
     private boolean isDestroyingBlock;
     private int destroyProgressStart;
     private BlockPos destroyPos;
+    private int destroySequence; // Martijn - custom blocks and items
     private int gameTicks;
     private boolean hasDelayedDestroy;
     private BlockPos delayedDestroyPos;
@@ -151,7 +152,16 @@ public class ServerPlayerGameMode {
                 this.lastSentState = -1;
                 this.isDestroyingBlock = false;
             } else {
-                this.incrementDestroyProgress(iblockdata, this.destroyPos, this.destroyProgressStart);
+                // Martijn start - custom blocks and items
+                float f = this.incrementDestroyProgress(iblockdata, this.destroyPos, this.destroyProgressStart);
+                // Arbitrary choices: 1.5f is about double the usual check amount when a player sends a block break finish packet (0.7f), and it seems to work very well
+                // The minimum ticks of 7 is because otherwise it seems that for good tools, it breaks way too quickly
+                if (iblockdata.getBlock().breakBeforeClientKnowsToBreak && f >= 1.5f && this.gameTicks - this.destroyProgressStart >= 7) {
+                    this.isDestroyingBlock = false;
+                    this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
+                    this.destroyAndAck(this.destroyPos, this.destroySequence, "destroyed");
+                }
+                // Martijn end - custom blocks and items
             }
         }
 
@@ -308,6 +318,7 @@ public class ServerPlayerGameMode {
 
                     this.isDestroyingBlock = true;
                     this.destroyPos = pos.immutable();
+                    this.destroySequence = sequence; // Martijn - custom blocks and items
                     int k = (int) (f * 10.0F);
 
                     this.level.destroyBlockProgress(this.player.getId(), pos, k);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1b9b58557ff48b87794d66238dbf64b81c087c86..51b08e40d22ebc5498cdd92ba670cbc844dcf3b6 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -264,7 +264,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String ID_TAG = "id";
     public static final String PASSENGERS_TAG = "Passengers";
-    private static final AtomicInteger ENTITY_COUNTER = new AtomicInteger();
+    public static final AtomicInteger ENTITY_COUNTER = new AtomicInteger(); // Martijn - custom blocks and items
     private static final List<ItemStack> EMPTY_LIST = Collections.emptyList();
     public static final int BOARDING_COOLDOWN = 60;
     public static final int TOTAL_AIR_SUPPLY = 300;
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index a8cefc2ebfeee5e781c3e64d74c01b23a3a0c4b3..7c9f160eda613b8c8fec2aabf8280f23a20d591d 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -6,6 +6,8 @@ import com.google.common.cache.LoadingCache;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.Object2ByteLinkedOpenHashMap;
+
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.function.Function;
@@ -25,6 +27,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.valueproviders.IntProvider;
@@ -66,6 +69,8 @@ import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
+import org.bukkit.Tag;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 public class Block extends BlockBehaviour implements ItemLike {
@@ -176,6 +181,73 @@ public class Block extends BlockBehaviour implements ItemLike {
         return this.customLootTableSupplier.get();
     }
 
+    public @NotNull List<@NotNull Supplier<@NotNull TagKey<Block>>> tagsToAddSuppliers = new ArrayList<>();
+
+    public @NotNull Block withTag(@NotNull Supplier<@NotNull TagKey<Block>> tagToAddSupplier) {
+        this.tagsToAddSuppliers.add(tagToAddSupplier);
+        return this;
+    }
+
+    // Tags that influence block breaking
+
+    public @NotNull Block mineableWithAxe() {
+        return this.withTag(() -> BlockTags.MINEABLE_WITH_AXE);
+    }
+
+    public @NotNull Block mineableWithHoe() {
+        return this.withTag(() -> BlockTags.MINEABLE_WITH_HOE);
+    }
+
+    public @NotNull Block mineableWithPickaxe() {
+        return this.withTag(() -> BlockTags.MINEABLE_WITH_PICKAXE);
+    }
+
+    public @NotNull Block mineableWithShovel() {
+        return this.withTag(() -> BlockTags.MINEABLE_WITH_SHOVEL);
+    }
+
+    public @NotNull Block leaves() {
+        return this.withTag(() -> BlockTags.LEAVES);
+    }
+
+    // Other tags
+
+    public @NotNull Block planks() {
+        return this.withTag(() -> BlockTags.PLANKS);
+    }
+
+    public @NotNull Block stoneBricks() {
+        return this.withTag(() -> BlockTags.STONE_BRICKS);
+    }
+
+    public @NotNull Block slab() {
+        return this.withTag(() -> BlockTags.SLABS);
+    }
+
+    public @NotNull Block dirt() {
+        return this.withTag(() -> BlockTags.DIRT);
+    }
+
+    public @NotNull Block soulSpeed() {
+        return this.withTag(() -> BlockTags.SOUL_SPEED_BLOCKS);
+    }
+
+    public @NotNull Block soulFireBase() {
+        return this.withTag(() -> BlockTags.SOUL_FIRE_BASE_BLOCKS);
+    }
+
+    public @NotNull Block withAddedTagsLike(@NotNull Block block) {
+        this.tagsToAddSuppliers.addAll(block.tagsToAddSuppliers);
+        return this;
+    }
+
+    public boolean breakBeforeClientKnowsToBreak = false;
+
+    public @NotNull Block breakBeforeClientKnowsToBreak() {
+        this.breakBeforeClientKnowsToBreak = true;
+        return this;
+    }
+
     // Martijn end - custom blocks and items
 
     public static int getId(@Nullable BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index 9465b2ab698362824f837abfd824e8f48fe3235c..2033484b72c2071b04ae5147759cfff91fe02b65 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -330,4 +330,24 @@ public class LevelChunkSection {
 
         this.biomes = datapaletteblock;
     }
+
+    // Martijn start - custom blocks and entities
+
+    public boolean potentiallyContainsBlockEntity() {
+        boolean[] potentiallyContainsBlockEntity = { false };
+        this.getStates().getAllEarlyStop(stateInSection -> {
+            var replacementRule = stateInSection.getBlock().replacementRule;
+            if (replacementRule != null) {
+                if (replacementRule.rendersAsEntity()) {
+                    potentiallyContainsBlockEntity[0] = true;
+                    return true;
+                }
+            }
+            return false;
+        });
+        return potentiallyContainsBlockEntity[0];
+    }
+
+    // Martijn end - custom blocks and entities
+
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 35014a305d1388d117bddb9b7e03e28b95ab8e5d..52e0c97ca4e83ecab61b4c1a5247c325e1f5f550 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -219,6 +219,21 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         });
     }
 
+    // Martijn start - custom blocks and items
+
+    public void getAllEarlyStop(Predicate<T> whetherToStop) {
+        Palette<T> palette = this.data.palette();
+        IntSet intSet = new IntArraySet();
+        this.data.storage.getAll(intSet::add);
+        for (int id : intSet) {
+            if (whetherToStop.test(palette.valueFor(id))) {
+                break;
+            }
+        }
+    }
+
+    // Martijn end - custom blocks and items
+
     public synchronized void read(FriendlyByteBuf buf) { // Paper - synchronize
         this.acquire();
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java
index 639ee95bdf206cf4d595557e4f684d1acae915fa..5a2e8c0c52ee2e6109d85445f1e4242fe6a1b851 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockLoot.java
@@ -5,16 +5,10 @@ package nl.martijnmuijsers.paper.block;
 import net.minecraft.data.loot.BlockLoot;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.block.Block;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.storage.loot.LootPool;
 import net.minecraft.world.level.storage.loot.LootTable;
-import net.minecraft.world.level.storage.loot.entries.LootItem;
-import net.minecraft.world.level.storage.loot.providers.number.ConstantValue;
 import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.function.Supplier;
-
 /**
  * Partially based on {@link net.minecraft.data.loot.BlockLoot}
  */
@@ -28,6 +22,10 @@ public final class SuCraftBlockLoot {
         return dropSingleItem(block);
     }
 
+    public static @NotNull LootTable dropSingleOrDoubleSlabSelf(@NotNull Block slabBlock) {
+        return blockLoot.createSlabItemTable(slabBlock).build();
+    }
+
     public static @NotNull LootTable dropSingleItem(@NotNull ItemLike drop) {
         return blockLoot.createSingleItemTable(drop).build();
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
index d1ea9c840389e8b05c174c082f85062d7d22413c..b084f203a96c68a5c443b8ad9ae965882adcf906 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
@@ -19,6 +19,7 @@ import java.util.Map;
 import java.util.Set;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.function.Supplier;
 
 /**
  * Based on {@link net.minecraft.data.tags.BlockTagsProvider}
@@ -33,11 +34,171 @@ public class SuCraftBlockTagsProvider extends SuCraftTagsProvider<Block> {
     protected void addTags(Map<TagKey<Block>, List<Holder<Block>>> existingRegistryTagEntries) {
         MinecraftServer.LOGGER.info("Adding onto existing block tags...");
         // Martijn start - custom blocks and items
-        final List<TagKey<Block>> mineableTags = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL);
-        for (TagKey<Block> tag : mineableTags) {
-            this.tag(tag).add(this.registry.getResourceKey(Blocks.NOTE_BLOCK).get());
+//        final List<TagKey<Block>> mineableTags = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL);
+//        for (TagKey<Block> tag : mineableTags) {
+//            this.tag(tag).add();
+//        }
+        for (@NotNull Block block : Registry.BLOCK) {
+            block.tagsToAddSuppliers.stream().map(Supplier::get).distinct().forEach(tagToAdd -> {
+                // Some tags may not be valid to transfer, but such a check is not implemented yet
+                this.tag(tagToAdd).add(block);
+            });
         }
         // Martijn end - custom blocks and items
+
+        // The below is a literal copy from BlockTagsProvider.addTags, which adds the tags transitively (for instance adding DEAD_BUSH_MAY_PLACE_ON to all blocks with the tag DIRT) after we have added more of some of those tags
+        this.tag(BlockTags.WOOL).add(Blocks.WHITE_WOOL, Blocks.ORANGE_WOOL, Blocks.MAGENTA_WOOL, Blocks.LIGHT_BLUE_WOOL, Blocks.YELLOW_WOOL, Blocks.LIME_WOOL, Blocks.PINK_WOOL, Blocks.GRAY_WOOL, Blocks.LIGHT_GRAY_WOOL, Blocks.CYAN_WOOL, Blocks.PURPLE_WOOL, Blocks.BLUE_WOOL, Blocks.BROWN_WOOL, Blocks.GREEN_WOOL, Blocks.RED_WOOL, Blocks.BLACK_WOOL);
+        this.tag(BlockTags.PLANKS).add(Blocks.OAK_PLANKS, Blocks.SPRUCE_PLANKS, Blocks.BIRCH_PLANKS, Blocks.JUNGLE_PLANKS, Blocks.ACACIA_PLANKS, Blocks.DARK_OAK_PLANKS, Blocks.CRIMSON_PLANKS, Blocks.WARPED_PLANKS, Blocks.MANGROVE_PLANKS);
+        this.tag(BlockTags.STONE_BRICKS).add(Blocks.STONE_BRICKS, Blocks.MOSSY_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS, Blocks.CHISELED_STONE_BRICKS);
+        this.tag(BlockTags.WOODEN_BUTTONS).add(Blocks.OAK_BUTTON, Blocks.SPRUCE_BUTTON, Blocks.BIRCH_BUTTON, Blocks.JUNGLE_BUTTON, Blocks.ACACIA_BUTTON, Blocks.DARK_OAK_BUTTON, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON, Blocks.MANGROVE_BUTTON);
+        this.tag(BlockTags.BUTTONS).addTag(BlockTags.WOODEN_BUTTONS).add(Blocks.STONE_BUTTON).add(Blocks.POLISHED_BLACKSTONE_BUTTON);
+        this.tag(BlockTags.WOOL_CARPETS).add(Blocks.WHITE_CARPET, Blocks.ORANGE_CARPET, Blocks.MAGENTA_CARPET, Blocks.LIGHT_BLUE_CARPET, Blocks.YELLOW_CARPET, Blocks.LIME_CARPET, Blocks.PINK_CARPET, Blocks.GRAY_CARPET, Blocks.LIGHT_GRAY_CARPET, Blocks.CYAN_CARPET, Blocks.PURPLE_CARPET, Blocks.BLUE_CARPET, Blocks.BROWN_CARPET, Blocks.GREEN_CARPET, Blocks.RED_CARPET, Blocks.BLACK_CARPET);
+        this.tag(BlockTags.WOODEN_DOORS).add(Blocks.OAK_DOOR, Blocks.SPRUCE_DOOR, Blocks.BIRCH_DOOR, Blocks.JUNGLE_DOOR, Blocks.ACACIA_DOOR, Blocks.DARK_OAK_DOOR, Blocks.CRIMSON_DOOR, Blocks.WARPED_DOOR, Blocks.MANGROVE_DOOR);
+        this.tag(BlockTags.WOODEN_STAIRS).add(Blocks.OAK_STAIRS, Blocks.SPRUCE_STAIRS, Blocks.BIRCH_STAIRS, Blocks.JUNGLE_STAIRS, Blocks.ACACIA_STAIRS, Blocks.DARK_OAK_STAIRS, Blocks.CRIMSON_STAIRS, Blocks.WARPED_STAIRS, Blocks.MANGROVE_STAIRS);
+        this.tag(BlockTags.WOODEN_SLABS).add(Blocks.OAK_SLAB, Blocks.SPRUCE_SLAB, Blocks.BIRCH_SLAB, Blocks.JUNGLE_SLAB, Blocks.ACACIA_SLAB, Blocks.DARK_OAK_SLAB, Blocks.CRIMSON_SLAB, Blocks.WARPED_SLAB, Blocks.MANGROVE_SLAB);
+        this.tag(BlockTags.WOODEN_FENCES).add(Blocks.OAK_FENCE, Blocks.ACACIA_FENCE, Blocks.DARK_OAK_FENCE, Blocks.SPRUCE_FENCE, Blocks.BIRCH_FENCE, Blocks.JUNGLE_FENCE, Blocks.CRIMSON_FENCE, Blocks.WARPED_FENCE, Blocks.MANGROVE_FENCE);
+        this.tag(BlockTags.DOORS).addTag(BlockTags.WOODEN_DOORS).add(Blocks.IRON_DOOR);
+        this.tag(BlockTags.SAPLINGS).add(Blocks.OAK_SAPLING, Blocks.SPRUCE_SAPLING, Blocks.BIRCH_SAPLING, Blocks.JUNGLE_SAPLING, Blocks.ACACIA_SAPLING, Blocks.DARK_OAK_SAPLING, Blocks.AZALEA, Blocks.FLOWERING_AZALEA, Blocks.MANGROVE_PROPAGULE);
+        this.tag(BlockTags.DARK_OAK_LOGS).add(Blocks.DARK_OAK_LOG, Blocks.DARK_OAK_WOOD, Blocks.STRIPPED_DARK_OAK_LOG, Blocks.STRIPPED_DARK_OAK_WOOD);
+        this.tag(BlockTags.OAK_LOGS).add(Blocks.OAK_LOG, Blocks.OAK_WOOD, Blocks.STRIPPED_OAK_LOG, Blocks.STRIPPED_OAK_WOOD);
+        this.tag(BlockTags.ACACIA_LOGS).add(Blocks.ACACIA_LOG, Blocks.ACACIA_WOOD, Blocks.STRIPPED_ACACIA_LOG, Blocks.STRIPPED_ACACIA_WOOD);
+        this.tag(BlockTags.BIRCH_LOGS).add(Blocks.BIRCH_LOG, Blocks.BIRCH_WOOD, Blocks.STRIPPED_BIRCH_LOG, Blocks.STRIPPED_BIRCH_WOOD);
+        this.tag(BlockTags.JUNGLE_LOGS).add(Blocks.JUNGLE_LOG, Blocks.JUNGLE_WOOD, Blocks.STRIPPED_JUNGLE_LOG, Blocks.STRIPPED_JUNGLE_WOOD);
+        this.tag(BlockTags.SPRUCE_LOGS).add(Blocks.SPRUCE_LOG, Blocks.SPRUCE_WOOD, Blocks.STRIPPED_SPRUCE_LOG, Blocks.STRIPPED_SPRUCE_WOOD);
+        this.tag(BlockTags.CRIMSON_STEMS).add(Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM, Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE);
+        this.tag(BlockTags.WARPED_STEMS).add(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM, Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE);
+        this.tag(BlockTags.MANGROVE_LOGS).add(Blocks.MANGROVE_LOG, Blocks.MANGROVE_WOOD, Blocks.STRIPPED_MANGROVE_LOG, Blocks.STRIPPED_MANGROVE_WOOD);
+        this.tag(BlockTags.LOGS_THAT_BURN).addTag(BlockTags.DARK_OAK_LOGS).addTag(BlockTags.OAK_LOGS).addTag(BlockTags.ACACIA_LOGS).addTag(BlockTags.BIRCH_LOGS).addTag(BlockTags.JUNGLE_LOGS).addTag(BlockTags.SPRUCE_LOGS).addTag(BlockTags.MANGROVE_LOGS);
+        this.tag(BlockTags.OVERWORLD_NATURAL_LOGS).add(Blocks.ACACIA_LOG).add(Blocks.BIRCH_LOG).add(Blocks.OAK_LOG).add(Blocks.JUNGLE_LOG).add(Blocks.SPRUCE_LOG).add(Blocks.DARK_OAK_LOG).add(Blocks.MANGROVE_LOG);
+        this.tag(BlockTags.LOGS).addTag(BlockTags.LOGS_THAT_BURN).addTag(BlockTags.CRIMSON_STEMS).addTag(BlockTags.WARPED_STEMS);
+        this.tag(BlockTags.ANVIL).add(Blocks.ANVIL, Blocks.CHIPPED_ANVIL, Blocks.DAMAGED_ANVIL);
+        this.tag(BlockTags.SMALL_FLOWERS).add(Blocks.DANDELION, Blocks.POPPY, Blocks.BLUE_ORCHID, Blocks.ALLIUM, Blocks.AZURE_BLUET, Blocks.RED_TULIP, Blocks.ORANGE_TULIP, Blocks.WHITE_TULIP, Blocks.PINK_TULIP, Blocks.OXEYE_DAISY, Blocks.CORNFLOWER, Blocks.LILY_OF_THE_VALLEY, Blocks.WITHER_ROSE);
+        this.tag(BlockTags.DIRT).add(Blocks.DIRT, Blocks.GRASS_BLOCK, Blocks.PODZOL, Blocks.COARSE_DIRT, Blocks.MYCELIUM, Blocks.ROOTED_DIRT, Blocks.MOSS_BLOCK, Blocks.MUD, Blocks.MUDDY_MANGROVE_ROOTS);
+        this.tag(BlockTags.ENDERMAN_HOLDABLE).addTag(BlockTags.SMALL_FLOWERS).addTag(BlockTags.DIRT).add(Blocks.SAND, Blocks.RED_SAND, Blocks.GRAVEL, Blocks.BROWN_MUSHROOM, Blocks.RED_MUSHROOM, Blocks.TNT, Blocks.CACTUS, Blocks.CLAY, Blocks.PUMPKIN, Blocks.CARVED_PUMPKIN, Blocks.MELON, Blocks.CRIMSON_FUNGUS, Blocks.CRIMSON_NYLIUM, Blocks.CRIMSON_ROOTS, Blocks.WARPED_FUNGUS, Blocks.WARPED_NYLIUM, Blocks.WARPED_ROOTS);
+        this.tag(BlockTags.FLOWER_POTS).add(Blocks.FLOWER_POT, Blocks.POTTED_POPPY, Blocks.POTTED_BLUE_ORCHID, Blocks.POTTED_ALLIUM, Blocks.POTTED_AZURE_BLUET, Blocks.POTTED_RED_TULIP, Blocks.POTTED_ORANGE_TULIP, Blocks.POTTED_WHITE_TULIP, Blocks.POTTED_PINK_TULIP, Blocks.POTTED_OXEYE_DAISY, Blocks.POTTED_DANDELION, Blocks.POTTED_OAK_SAPLING, Blocks.POTTED_SPRUCE_SAPLING, Blocks.POTTED_BIRCH_SAPLING, Blocks.POTTED_JUNGLE_SAPLING, Blocks.POTTED_ACACIA_SAPLING, Blocks.POTTED_DARK_OAK_SAPLING, Blocks.POTTED_RED_MUSHROOM, Blocks.POTTED_BROWN_MUSHROOM, Blocks.POTTED_DEAD_BUSH, Blocks.POTTED_FERN, Blocks.POTTED_CACTUS, Blocks.POTTED_CORNFLOWER, Blocks.POTTED_LILY_OF_THE_VALLEY, Blocks.POTTED_WITHER_ROSE, Blocks.POTTED_BAMBOO, Blocks.POTTED_CRIMSON_FUNGUS, Blocks.POTTED_WARPED_FUNGUS, Blocks.POTTED_CRIMSON_ROOTS, Blocks.POTTED_WARPED_ROOTS, Blocks.POTTED_AZALEA, Blocks.POTTED_FLOWERING_AZALEA, Blocks.POTTED_MANGROVE_PROPAGULE);
+        this.tag(BlockTags.BANNERS).add(Blocks.WHITE_BANNER, Blocks.ORANGE_BANNER, Blocks.MAGENTA_BANNER, Blocks.LIGHT_BLUE_BANNER, Blocks.YELLOW_BANNER, Blocks.LIME_BANNER, Blocks.PINK_BANNER, Blocks.GRAY_BANNER, Blocks.LIGHT_GRAY_BANNER, Blocks.CYAN_BANNER, Blocks.PURPLE_BANNER, Blocks.BLUE_BANNER, Blocks.BROWN_BANNER, Blocks.GREEN_BANNER, Blocks.RED_BANNER, Blocks.BLACK_BANNER, Blocks.WHITE_WALL_BANNER, Blocks.ORANGE_WALL_BANNER, Blocks.MAGENTA_WALL_BANNER, Blocks.LIGHT_BLUE_WALL_BANNER, Blocks.YELLOW_WALL_BANNER, Blocks.LIME_WALL_BANNER, Blocks.PINK_WALL_BANNER, Blocks.GRAY_WALL_BANNER, Blocks.LIGHT_GRAY_WALL_BANNER, Blocks.CYAN_WALL_BANNER, Blocks.PURPLE_WALL_BANNER, Blocks.BLUE_WALL_BANNER, Blocks.BROWN_WALL_BANNER, Blocks.GREEN_WALL_BANNER, Blocks.RED_WALL_BANNER, Blocks.BLACK_WALL_BANNER);
+        this.tag(BlockTags.WOODEN_PRESSURE_PLATES).add(Blocks.OAK_PRESSURE_PLATE, Blocks.SPRUCE_PRESSURE_PLATE, Blocks.BIRCH_PRESSURE_PLATE, Blocks.JUNGLE_PRESSURE_PLATE, Blocks.ACACIA_PRESSURE_PLATE, Blocks.DARK_OAK_PRESSURE_PLATE, Blocks.CRIMSON_PRESSURE_PLATE, Blocks.WARPED_PRESSURE_PLATE, Blocks.MANGROVE_PRESSURE_PLATE);
+        this.tag(BlockTags.STONE_PRESSURE_PLATES).add(Blocks.STONE_PRESSURE_PLATE, Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE);
+        this.tag(BlockTags.PRESSURE_PLATES).add(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE).addTag(BlockTags.WOODEN_PRESSURE_PLATES).addTag(BlockTags.STONE_PRESSURE_PLATES);
+        this.tag(BlockTags.STAIRS).addTag(BlockTags.WOODEN_STAIRS).add(Blocks.COBBLESTONE_STAIRS, Blocks.SANDSTONE_STAIRS, Blocks.NETHER_BRICK_STAIRS, Blocks.STONE_BRICK_STAIRS, Blocks.BRICK_STAIRS, Blocks.PURPUR_STAIRS, Blocks.QUARTZ_STAIRS, Blocks.RED_SANDSTONE_STAIRS, Blocks.PRISMARINE_BRICK_STAIRS, Blocks.PRISMARINE_STAIRS, Blocks.DARK_PRISMARINE_STAIRS, Blocks.POLISHED_GRANITE_STAIRS, Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Blocks.MOSSY_STONE_BRICK_STAIRS, Blocks.POLISHED_DIORITE_STAIRS, Blocks.MOSSY_COBBLESTONE_STAIRS, Blocks.END_STONE_BRICK_STAIRS, Blocks.STONE_STAIRS, Blocks.SMOOTH_SANDSTONE_STAIRS, Blocks.SMOOTH_QUARTZ_STAIRS, Blocks.GRANITE_STAIRS, Blocks.ANDESITE_STAIRS, Blocks.RED_NETHER_BRICK_STAIRS, Blocks.POLISHED_ANDESITE_STAIRS, Blocks.DIORITE_STAIRS, Blocks.BLACKSTONE_STAIRS, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.POLISHED_BLACKSTONE_STAIRS, Blocks.COBBLED_DEEPSLATE_STAIRS, Blocks.POLISHED_DEEPSLATE_STAIRS, Blocks.DEEPSLATE_TILE_STAIRS, Blocks.DEEPSLATE_BRICK_STAIRS, Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Blocks.MUD_BRICK_STAIRS);
+        this.tag(BlockTags.SLABS).addTag(BlockTags.WOODEN_SLABS).add(Blocks.STONE_SLAB, Blocks.SMOOTH_STONE_SLAB, Blocks.STONE_BRICK_SLAB, Blocks.SANDSTONE_SLAB, Blocks.PURPUR_SLAB, Blocks.QUARTZ_SLAB, Blocks.RED_SANDSTONE_SLAB, Blocks.BRICK_SLAB, Blocks.COBBLESTONE_SLAB, Blocks.NETHER_BRICK_SLAB, Blocks.PETRIFIED_OAK_SLAB, Blocks.PRISMARINE_SLAB, Blocks.PRISMARINE_BRICK_SLAB, Blocks.DARK_PRISMARINE_SLAB, Blocks.POLISHED_GRANITE_SLAB, Blocks.SMOOTH_RED_SANDSTONE_SLAB, Blocks.MOSSY_STONE_BRICK_SLAB, Blocks.POLISHED_DIORITE_SLAB, Blocks.MOSSY_COBBLESTONE_SLAB, Blocks.END_STONE_BRICK_SLAB, Blocks.SMOOTH_SANDSTONE_SLAB, Blocks.SMOOTH_QUARTZ_SLAB, Blocks.GRANITE_SLAB, Blocks.ANDESITE_SLAB, Blocks.RED_NETHER_BRICK_SLAB, Blocks.POLISHED_ANDESITE_SLAB, Blocks.DIORITE_SLAB, Blocks.CUT_SANDSTONE_SLAB, Blocks.CUT_RED_SANDSTONE_SLAB, Blocks.BLACKSTONE_SLAB, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.POLISHED_BLACKSTONE_SLAB, Blocks.COBBLED_DEEPSLATE_SLAB, Blocks.POLISHED_DEEPSLATE_SLAB, Blocks.DEEPSLATE_TILE_SLAB, Blocks.DEEPSLATE_BRICK_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Blocks.MUD_BRICK_SLAB);
+        this.tag(BlockTags.WALLS).add(Blocks.COBBLESTONE_WALL, Blocks.MOSSY_COBBLESTONE_WALL, Blocks.BRICK_WALL, Blocks.PRISMARINE_WALL, Blocks.RED_SANDSTONE_WALL, Blocks.MOSSY_STONE_BRICK_WALL, Blocks.GRANITE_WALL, Blocks.STONE_BRICK_WALL, Blocks.NETHER_BRICK_WALL, Blocks.ANDESITE_WALL, Blocks.RED_NETHER_BRICK_WALL, Blocks.SANDSTONE_WALL, Blocks.END_STONE_BRICK_WALL, Blocks.DIORITE_WALL, Blocks.BLACKSTONE_WALL, Blocks.POLISHED_BLACKSTONE_BRICK_WALL, Blocks.POLISHED_BLACKSTONE_WALL, Blocks.COBBLED_DEEPSLATE_WALL, Blocks.POLISHED_DEEPSLATE_WALL, Blocks.DEEPSLATE_TILE_WALL, Blocks.DEEPSLATE_BRICK_WALL, Blocks.MUD_BRICK_WALL);
+        this.tag(BlockTags.CORAL_PLANTS).add(Blocks.TUBE_CORAL, Blocks.BRAIN_CORAL, Blocks.BUBBLE_CORAL, Blocks.FIRE_CORAL, Blocks.HORN_CORAL);
+        this.tag(BlockTags.CORALS).addTag(BlockTags.CORAL_PLANTS).add(Blocks.TUBE_CORAL_FAN, Blocks.BRAIN_CORAL_FAN, Blocks.BUBBLE_CORAL_FAN, Blocks.FIRE_CORAL_FAN, Blocks.HORN_CORAL_FAN);
+        this.tag(BlockTags.WALL_CORALS).add(Blocks.TUBE_CORAL_WALL_FAN, Blocks.BRAIN_CORAL_WALL_FAN, Blocks.BUBBLE_CORAL_WALL_FAN, Blocks.FIRE_CORAL_WALL_FAN, Blocks.HORN_CORAL_WALL_FAN);
+        this.tag(BlockTags.SAND).add(Blocks.SAND, Blocks.RED_SAND);
+        this.tag(BlockTags.RAILS).add(Blocks.RAIL, Blocks.POWERED_RAIL, Blocks.DETECTOR_RAIL, Blocks.ACTIVATOR_RAIL);
+        this.tag(BlockTags.CORAL_BLOCKS).add(Blocks.TUBE_CORAL_BLOCK, Blocks.BRAIN_CORAL_BLOCK, Blocks.BUBBLE_CORAL_BLOCK, Blocks.FIRE_CORAL_BLOCK, Blocks.HORN_CORAL_BLOCK);
+        this.tag(BlockTags.ICE).add(Blocks.ICE, Blocks.PACKED_ICE, Blocks.BLUE_ICE, Blocks.FROSTED_ICE);
+        this.tag(BlockTags.VALID_SPAWN).add(Blocks.GRASS_BLOCK, Blocks.PODZOL);
+        this.tag(BlockTags.LEAVES).add(Blocks.JUNGLE_LEAVES, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.ACACIA_LEAVES, Blocks.BIRCH_LEAVES, Blocks.AZALEA_LEAVES, Blocks.FLOWERING_AZALEA_LEAVES, Blocks.MANGROVE_LEAVES);
+        this.tag(BlockTags.IMPERMEABLE).add(Blocks.GLASS, Blocks.WHITE_STAINED_GLASS, Blocks.ORANGE_STAINED_GLASS, Blocks.MAGENTA_STAINED_GLASS, Blocks.LIGHT_BLUE_STAINED_GLASS, Blocks.YELLOW_STAINED_GLASS, Blocks.LIME_STAINED_GLASS, Blocks.PINK_STAINED_GLASS, Blocks.GRAY_STAINED_GLASS, Blocks.LIGHT_GRAY_STAINED_GLASS, Blocks.CYAN_STAINED_GLASS, Blocks.PURPLE_STAINED_GLASS, Blocks.BLUE_STAINED_GLASS, Blocks.BROWN_STAINED_GLASS, Blocks.GREEN_STAINED_GLASS, Blocks.RED_STAINED_GLASS, Blocks.BLACK_STAINED_GLASS, Blocks.TINTED_GLASS);
+        this.tag(BlockTags.WOODEN_TRAPDOORS).add(Blocks.ACACIA_TRAPDOOR, Blocks.BIRCH_TRAPDOOR, Blocks.DARK_OAK_TRAPDOOR, Blocks.JUNGLE_TRAPDOOR, Blocks.OAK_TRAPDOOR, Blocks.SPRUCE_TRAPDOOR, Blocks.CRIMSON_TRAPDOOR, Blocks.WARPED_TRAPDOOR, Blocks.MANGROVE_TRAPDOOR);
+        this.tag(BlockTags.TRAPDOORS).addTag(BlockTags.WOODEN_TRAPDOORS).add(Blocks.IRON_TRAPDOOR);
+        this.tag(BlockTags.UNDERWATER_BONEMEALS).add(Blocks.SEAGRASS).addTag(BlockTags.CORALS).addTag(BlockTags.WALL_CORALS);
+        this.tag(BlockTags.BAMBOO_PLANTABLE_ON).addTag(BlockTags.SAND).addTag(BlockTags.DIRT).add(Blocks.BAMBOO, Blocks.BAMBOO_SAPLING, Blocks.GRAVEL);
+        this.tag(BlockTags.STANDING_SIGNS).add(Blocks.OAK_SIGN, Blocks.SPRUCE_SIGN, Blocks.BIRCH_SIGN, Blocks.ACACIA_SIGN, Blocks.JUNGLE_SIGN, Blocks.DARK_OAK_SIGN, Blocks.CRIMSON_SIGN, Blocks.WARPED_SIGN, Blocks.MANGROVE_SIGN);
+        this.tag(BlockTags.WALL_SIGNS).add(Blocks.OAK_WALL_SIGN, Blocks.SPRUCE_WALL_SIGN, Blocks.BIRCH_WALL_SIGN, Blocks.ACACIA_WALL_SIGN, Blocks.JUNGLE_WALL_SIGN, Blocks.DARK_OAK_WALL_SIGN, Blocks.CRIMSON_WALL_SIGN, Blocks.WARPED_WALL_SIGN, Blocks.MANGROVE_WALL_SIGN);
+        this.tag(BlockTags.SIGNS).addTag(BlockTags.STANDING_SIGNS).addTag(BlockTags.WALL_SIGNS);
+        this.tag(BlockTags.BEDS).add(Blocks.RED_BED, Blocks.BLACK_BED, Blocks.BLUE_BED, Blocks.BROWN_BED, Blocks.CYAN_BED, Blocks.GRAY_BED, Blocks.GREEN_BED, Blocks.LIGHT_BLUE_BED, Blocks.LIGHT_GRAY_BED, Blocks.LIME_BED, Blocks.MAGENTA_BED, Blocks.ORANGE_BED, Blocks.PINK_BED, Blocks.PURPLE_BED, Blocks.WHITE_BED, Blocks.YELLOW_BED);
+        this.tag(BlockTags.FENCES).addTag(BlockTags.WOODEN_FENCES).add(Blocks.NETHER_BRICK_FENCE);
+        this.tag(BlockTags.DRAGON_IMMUNE).add(Blocks.BARRIER, Blocks.BEDROCK, Blocks.END_PORTAL, Blocks.END_PORTAL_FRAME, Blocks.END_GATEWAY, Blocks.COMMAND_BLOCK, Blocks.REPEATING_COMMAND_BLOCK, Blocks.CHAIN_COMMAND_BLOCK, Blocks.STRUCTURE_BLOCK, Blocks.JIGSAW, Blocks.MOVING_PISTON, Blocks.OBSIDIAN, Blocks.CRYING_OBSIDIAN, Blocks.END_STONE, Blocks.IRON_BARS, Blocks.RESPAWN_ANCHOR, Blocks.REINFORCED_DEEPSLATE);
+        this.tag(BlockTags.DRAGON_TRANSPARENT).add(Blocks.LIGHT).addTag(BlockTags.FIRE);
+        this.tag(BlockTags.WITHER_IMMUNE).add(Blocks.BARRIER, Blocks.BEDROCK, Blocks.END_PORTAL, Blocks.END_PORTAL_FRAME, Blocks.END_GATEWAY, Blocks.COMMAND_BLOCK, Blocks.REPEATING_COMMAND_BLOCK, Blocks.CHAIN_COMMAND_BLOCK, Blocks.STRUCTURE_BLOCK, Blocks.JIGSAW, Blocks.MOVING_PISTON, Blocks.LIGHT, Blocks.REINFORCED_DEEPSLATE);
+        this.tag(BlockTags.WITHER_SUMMON_BASE_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.TALL_FLOWERS).add(Blocks.SUNFLOWER, Blocks.LILAC, Blocks.PEONY, Blocks.ROSE_BUSH);
+        this.tag(BlockTags.FLOWERS).addTag(BlockTags.SMALL_FLOWERS).addTag(BlockTags.TALL_FLOWERS).add(Blocks.FLOWERING_AZALEA_LEAVES, Blocks.FLOWERING_AZALEA, Blocks.MANGROVE_PROPAGULE);
+        this.tag(BlockTags.BEEHIVES).add(Blocks.BEE_NEST, Blocks.BEEHIVE);
+        this.tag(BlockTags.CROPS).add(Blocks.BEETROOTS, Blocks.CARROTS, Blocks.POTATOES, Blocks.WHEAT, Blocks.MELON_STEM, Blocks.PUMPKIN_STEM);
+        this.tag(BlockTags.BEE_GROWABLES).addTag(BlockTags.CROPS).add(Blocks.SWEET_BERRY_BUSH).add(Blocks.CAVE_VINES).add(Blocks.CAVE_VINES_PLANT);
+        this.tag(BlockTags.SHULKER_BOXES).add(Blocks.SHULKER_BOX, Blocks.BLACK_SHULKER_BOX, Blocks.BLUE_SHULKER_BOX, Blocks.BROWN_SHULKER_BOX, Blocks.CYAN_SHULKER_BOX, Blocks.GRAY_SHULKER_BOX, Blocks.GREEN_SHULKER_BOX, Blocks.LIGHT_BLUE_SHULKER_BOX, Blocks.LIGHT_GRAY_SHULKER_BOX, Blocks.LIME_SHULKER_BOX, Blocks.MAGENTA_SHULKER_BOX, Blocks.ORANGE_SHULKER_BOX, Blocks.PINK_SHULKER_BOX, Blocks.PURPLE_SHULKER_BOX, Blocks.RED_SHULKER_BOX, Blocks.WHITE_SHULKER_BOX, Blocks.YELLOW_SHULKER_BOX);
+        this.tag(BlockTags.PORTALS).add(Blocks.NETHER_PORTAL, Blocks.END_PORTAL, Blocks.END_GATEWAY);
+        this.tag(BlockTags.FIRE).add(Blocks.FIRE, Blocks.SOUL_FIRE);
+        this.tag(BlockTags.NYLIUM).add(Blocks.CRIMSON_NYLIUM, Blocks.WARPED_NYLIUM);
+        this.tag(BlockTags.WART_BLOCKS).add(Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK);
+        this.tag(BlockTags.BEACON_BASE_BLOCKS).add(Blocks.NETHERITE_BLOCK, Blocks.EMERALD_BLOCK, Blocks.DIAMOND_BLOCK, Blocks.GOLD_BLOCK, Blocks.IRON_BLOCK);
+        this.tag(BlockTags.SOUL_SPEED_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.WALL_POST_OVERRIDE).add(Blocks.TORCH, Blocks.SOUL_TORCH, Blocks.REDSTONE_TORCH, Blocks.TRIPWIRE).addTag(BlockTags.SIGNS).addTag(BlockTags.BANNERS).addTag(BlockTags.PRESSURE_PLATES);
+        this.tag(BlockTags.CLIMBABLE).add(Blocks.LADDER, Blocks.VINE, Blocks.SCAFFOLDING, Blocks.WEEPING_VINES, Blocks.WEEPING_VINES_PLANT, Blocks.TWISTING_VINES, Blocks.TWISTING_VINES_PLANT, Blocks.CAVE_VINES, Blocks.CAVE_VINES_PLANT);
+        this.tag(BlockTags.FALL_DAMAGE_RESETTING).addTag(BlockTags.CLIMBABLE).add(Blocks.SWEET_BERRY_BUSH, Blocks.COBWEB);
+        this.tag(BlockTags.PIGLIN_REPELLENTS).add(Blocks.SOUL_FIRE).add(Blocks.SOUL_TORCH).add(Blocks.SOUL_LANTERN).add(Blocks.SOUL_WALL_TORCH).add(Blocks.SOUL_CAMPFIRE);
+        this.tag(BlockTags.HOGLIN_REPELLENTS).add(Blocks.WARPED_FUNGUS).add(Blocks.POTTED_WARPED_FUNGUS).add(Blocks.NETHER_PORTAL).add(Blocks.RESPAWN_ANCHOR);
+        this.tag(BlockTags.GOLD_ORES).add(Blocks.GOLD_ORE, Blocks.NETHER_GOLD_ORE, Blocks.DEEPSLATE_GOLD_ORE);
+        this.tag(BlockTags.IRON_ORES).add(Blocks.IRON_ORE, Blocks.DEEPSLATE_IRON_ORE);
+        this.tag(BlockTags.DIAMOND_ORES).add(Blocks.DIAMOND_ORE, Blocks.DEEPSLATE_DIAMOND_ORE);
+        this.tag(BlockTags.REDSTONE_ORES).add(Blocks.REDSTONE_ORE, Blocks.DEEPSLATE_REDSTONE_ORE);
+        this.tag(BlockTags.COAL_ORES).add(Blocks.COAL_ORE, Blocks.DEEPSLATE_COAL_ORE);
+        this.tag(BlockTags.EMERALD_ORES).add(Blocks.EMERALD_ORE, Blocks.DEEPSLATE_EMERALD_ORE);
+        this.tag(BlockTags.COPPER_ORES).add(Blocks.COPPER_ORE, Blocks.DEEPSLATE_COPPER_ORE);
+        this.tag(BlockTags.LAPIS_ORES).add(Blocks.LAPIS_ORE, Blocks.DEEPSLATE_LAPIS_ORE);
+        this.tag(BlockTags.SOUL_FIRE_BASE_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.NON_FLAMMABLE_WOOD).add(Blocks.WARPED_STEM, Blocks.STRIPPED_WARPED_STEM, Blocks.WARPED_HYPHAE, Blocks.STRIPPED_WARPED_HYPHAE, Blocks.CRIMSON_STEM, Blocks.STRIPPED_CRIMSON_STEM, Blocks.CRIMSON_HYPHAE, Blocks.STRIPPED_CRIMSON_HYPHAE, Blocks.CRIMSON_PLANKS, Blocks.WARPED_PLANKS, Blocks.CRIMSON_SLAB, Blocks.WARPED_SLAB, Blocks.CRIMSON_PRESSURE_PLATE, Blocks.WARPED_PRESSURE_PLATE, Blocks.CRIMSON_FENCE, Blocks.WARPED_FENCE, Blocks.CRIMSON_TRAPDOOR, Blocks.WARPED_TRAPDOOR, Blocks.CRIMSON_FENCE_GATE, Blocks.WARPED_FENCE_GATE, Blocks.CRIMSON_STAIRS, Blocks.WARPED_STAIRS, Blocks.CRIMSON_BUTTON, Blocks.WARPED_BUTTON, Blocks.CRIMSON_DOOR, Blocks.WARPED_DOOR, Blocks.CRIMSON_SIGN, Blocks.WARPED_SIGN, Blocks.CRIMSON_WALL_SIGN, Blocks.WARPED_WALL_SIGN);
+        this.tag(BlockTags.STRIDER_WARM_BLOCKS).add(Blocks.LAVA);
+        this.tag(BlockTags.CAMPFIRES).add(Blocks.CAMPFIRE, Blocks.SOUL_CAMPFIRE);
+        this.tag(BlockTags.GUARDED_BY_PIGLINS).add(Blocks.GOLD_BLOCK, Blocks.BARREL, Blocks.CHEST, Blocks.ENDER_CHEST, Blocks.GILDED_BLACKSTONE, Blocks.TRAPPED_CHEST, Blocks.RAW_GOLD_BLOCK).addTag(BlockTags.SHULKER_BOXES).addTag(BlockTags.GOLD_ORES);
+        this.tag(BlockTags.PREVENT_MOB_SPAWNING_INSIDE).addTag(BlockTags.RAILS);
+        this.tag(BlockTags.FENCE_GATES).add(Blocks.ACACIA_FENCE_GATE, Blocks.BIRCH_FENCE_GATE, Blocks.DARK_OAK_FENCE_GATE, Blocks.JUNGLE_FENCE_GATE, Blocks.OAK_FENCE_GATE, Blocks.SPRUCE_FENCE_GATE, Blocks.CRIMSON_FENCE_GATE, Blocks.WARPED_FENCE_GATE, Blocks.MANGROVE_FENCE_GATE);
+        this.tag(BlockTags.UNSTABLE_BOTTOM_CENTER).addTag(BlockTags.FENCE_GATES);
+        this.tag(BlockTags.MUSHROOM_GROW_BLOCK).add(Blocks.MYCELIUM).add(Blocks.PODZOL).add(Blocks.CRIMSON_NYLIUM).add(Blocks.WARPED_NYLIUM);
+        this.tag(BlockTags.INFINIBURN_OVERWORLD).add(Blocks.NETHERRACK, Blocks.MAGMA_BLOCK);
+        this.tag(BlockTags.INFINIBURN_NETHER).addTag(BlockTags.INFINIBURN_OVERWORLD);
+        this.tag(BlockTags.INFINIBURN_END).addTag(BlockTags.INFINIBURN_OVERWORLD).add(Blocks.BEDROCK);
+        this.tag(BlockTags.STONE_ORE_REPLACEABLES).add(Blocks.STONE).add(Blocks.GRANITE).add(Blocks.DIORITE).add(Blocks.ANDESITE);
+        this.tag(BlockTags.DEEPSLATE_ORE_REPLACEABLES).add(Blocks.DEEPSLATE).add(Blocks.TUFF);
+        this.tag(BlockTags.BASE_STONE_OVERWORLD).add(Blocks.STONE).add(Blocks.GRANITE).add(Blocks.DIORITE).add(Blocks.ANDESITE).add(Blocks.TUFF).add(Blocks.DEEPSLATE);
+        this.tag(BlockTags.BASE_STONE_NETHER).add(Blocks.NETHERRACK).add(Blocks.BASALT).add(Blocks.BLACKSTONE);
+        this.tag(BlockTags.OVERWORLD_CARVER_REPLACEABLES).addTag(BlockTags.BASE_STONE_OVERWORLD).addTag(BlockTags.DIRT).addTag(BlockTags.SAND).addTag(BlockTags.TERRACOTTA).addTag(BlockTags.IRON_ORES).addTag(BlockTags.COPPER_ORES).add(Blocks.WATER, Blocks.GRAVEL, Blocks.SANDSTONE, Blocks.RED_SANDSTONE, Blocks.CALCITE, Blocks.SNOW, Blocks.PACKED_ICE, Blocks.RAW_IRON_BLOCK, Blocks.RAW_COPPER_BLOCK);
+        this.tag(BlockTags.NETHER_CARVER_REPLACEABLES).addTag(BlockTags.BASE_STONE_OVERWORLD).addTag(BlockTags.BASE_STONE_NETHER).addTag(BlockTags.DIRT).addTag(BlockTags.NYLIUM).addTag(BlockTags.WART_BLOCKS).add(Blocks.SOUL_SAND, Blocks.SOUL_SOIL);
+        this.tag(BlockTags.CANDLES).add(Blocks.CANDLE, Blocks.WHITE_CANDLE, Blocks.ORANGE_CANDLE, Blocks.MAGENTA_CANDLE, Blocks.LIGHT_BLUE_CANDLE, Blocks.YELLOW_CANDLE, Blocks.LIME_CANDLE, Blocks.PINK_CANDLE, Blocks.GRAY_CANDLE, Blocks.LIGHT_GRAY_CANDLE, Blocks.CYAN_CANDLE, Blocks.PURPLE_CANDLE, Blocks.BLUE_CANDLE, Blocks.BROWN_CANDLE, Blocks.GREEN_CANDLE, Blocks.RED_CANDLE, Blocks.BLACK_CANDLE);
+        this.tag(BlockTags.CANDLE_CAKES).add(Blocks.CANDLE_CAKE, Blocks.WHITE_CANDLE_CAKE, Blocks.ORANGE_CANDLE_CAKE, Blocks.MAGENTA_CANDLE_CAKE, Blocks.LIGHT_BLUE_CANDLE_CAKE, Blocks.YELLOW_CANDLE_CAKE, Blocks.LIME_CANDLE_CAKE, Blocks.PINK_CANDLE_CAKE, Blocks.GRAY_CANDLE_CAKE, Blocks.LIGHT_GRAY_CANDLE_CAKE, Blocks.CYAN_CANDLE_CAKE, Blocks.PURPLE_CANDLE_CAKE, Blocks.BLUE_CANDLE_CAKE, Blocks.BROWN_CANDLE_CAKE, Blocks.GREEN_CANDLE_CAKE, Blocks.RED_CANDLE_CAKE, Blocks.BLACK_CANDLE_CAKE);
+        this.tag(BlockTags.CRYSTAL_SOUND_BLOCKS).add(Blocks.AMETHYST_BLOCK, Blocks.BUDDING_AMETHYST);
+        this.tag(BlockTags.CAULDRONS).add(Blocks.CAULDRON, Blocks.WATER_CAULDRON, Blocks.LAVA_CAULDRON, Blocks.POWDER_SNOW_CAULDRON);
+        this.tag(BlockTags.INSIDE_STEP_SOUND_BLOCKS).add(Blocks.SNOW, Blocks.POWDER_SNOW, Blocks.SCULK_VEIN);
+        this.tag(BlockTags.DRIPSTONE_REPLACEABLE).addTag(BlockTags.BASE_STONE_OVERWORLD);
+        this.tag(BlockTags.CAVE_VINES).add(Blocks.CAVE_VINES_PLANT).add(Blocks.CAVE_VINES);
+        this.tag(BlockTags.MOSS_REPLACEABLE).addTag(BlockTags.BASE_STONE_OVERWORLD).addTag(BlockTags.CAVE_VINES).addTag(BlockTags.DIRT);
+        this.tag(BlockTags.LUSH_GROUND_REPLACEABLE).addTag(BlockTags.MOSS_REPLACEABLE).add(Blocks.CLAY).add(Blocks.GRAVEL).add(Blocks.SAND);
+        this.tag(BlockTags.AZALEA_ROOT_REPLACEABLE).addTag(BlockTags.BASE_STONE_OVERWORLD).addTag(BlockTags.DIRT).addTag(BlockTags.TERRACOTTA).add(Blocks.RED_SAND).add(Blocks.CLAY).add(Blocks.GRAVEL).add(Blocks.SAND).add(Blocks.SNOW_BLOCK).add(Blocks.POWDER_SNOW);
+        this.tag(BlockTags.SMALL_DRIPLEAF_PLACEABLE).add(Blocks.CLAY).add(Blocks.MOSS_BLOCK);
+        this.tag(BlockTags.BIG_DRIPLEAF_PLACEABLE).addTag(BlockTags.SMALL_DRIPLEAF_PLACEABLE).addTag(BlockTags.DIRT).add(Blocks.FARMLAND);
+        this.tag(BlockTags.OCCLUDES_VIBRATION_SIGNALS).addTag(BlockTags.WOOL);
+        this.tag(BlockTags.DAMPENS_VIBRATIONS).addTag(BlockTags.WOOL).addTag(BlockTags.WOOL_CARPETS);
+        this.tag(BlockTags.SNOW).add(Blocks.SNOW, Blocks.SNOW_BLOCK, Blocks.POWDER_SNOW);
+        this.tag(BlockTags.MINEABLE_WITH_AXE).add(Blocks.NOTE_BLOCK, Blocks.ATTACHED_MELON_STEM, Blocks.ATTACHED_PUMPKIN_STEM, Blocks.AZALEA, Blocks.BAMBOO, Blocks.BARREL, Blocks.BEE_NEST, Blocks.BEEHIVE, Blocks.BEETROOTS, Blocks.BIG_DRIPLEAF_STEM, Blocks.BIG_DRIPLEAF, Blocks.BOOKSHELF, Blocks.BROWN_MUSHROOM_BLOCK, Blocks.BROWN_MUSHROOM, Blocks.CAMPFIRE, Blocks.CARROTS, Blocks.CARTOGRAPHY_TABLE, Blocks.CARVED_PUMPKIN, Blocks.CAVE_VINES_PLANT, Blocks.CAVE_VINES, Blocks.CHEST, Blocks.CHORUS_FLOWER, Blocks.CHORUS_PLANT, Blocks.COCOA, Blocks.COMPOSTER, Blocks.CRAFTING_TABLE, Blocks.CRIMSON_FUNGUS, Blocks.DAYLIGHT_DETECTOR, Blocks.DEAD_BUSH, Blocks.FERN, Blocks.FLETCHING_TABLE, Blocks.GLOW_LICHEN, Blocks.GRASS, Blocks.HANGING_ROOTS, Blocks.JACK_O_LANTERN, Blocks.JUKEBOX, Blocks.LADDER, Blocks.LARGE_FERN, Blocks.LECTERN, Blocks.LILY_PAD, Blocks.LOOM, Blocks.MELON_STEM, Blocks.MELON, Blocks.MUSHROOM_STEM, Blocks.NETHER_WART, Blocks.POTATOES, Blocks.PUMPKIN_STEM, Blocks.PUMPKIN, Blocks.RED_MUSHROOM_BLOCK, Blocks.RED_MUSHROOM, Blocks.SCAFFOLDING, Blocks.SMALL_DRIPLEAF, Blocks.SMITHING_TABLE, Blocks.SOUL_CAMPFIRE, Blocks.SPORE_BLOSSOM, Blocks.SUGAR_CANE, Blocks.SWEET_BERRY_BUSH, Blocks.TALL_GRASS, Blocks.TRAPPED_CHEST, Blocks.TWISTING_VINES_PLANT, Blocks.TWISTING_VINES, Blocks.VINE, Blocks.WARPED_FUNGUS, Blocks.WEEPING_VINES_PLANT, Blocks.WEEPING_VINES, Blocks.WHEAT).addTag(BlockTags.BANNERS).addTag(BlockTags.FENCE_GATES).addTag(BlockTags.LOGS).addTag(BlockTags.PLANKS).addTag(BlockTags.SAPLINGS).addTag(BlockTags.SIGNS).addTag(BlockTags.WOODEN_BUTTONS).addTag(BlockTags.WOODEN_DOORS).addTag(BlockTags.WOODEN_FENCES).addTag(BlockTags.WOODEN_PRESSURE_PLATES).addTag(BlockTags.WOODEN_SLABS).addTag(BlockTags.WOODEN_STAIRS).addTag(BlockTags.WOODEN_TRAPDOORS).add(Blocks.MANGROVE_ROOTS);
+        this.tag(BlockTags.MINEABLE_WITH_HOE).add(Blocks.NETHER_WART_BLOCK, Blocks.WARPED_WART_BLOCK, Blocks.HAY_BLOCK, Blocks.DRIED_KELP_BLOCK, Blocks.TARGET, Blocks.SHROOMLIGHT, Blocks.SPONGE, Blocks.WET_SPONGE, Blocks.JUNGLE_LEAVES, Blocks.OAK_LEAVES, Blocks.SPRUCE_LEAVES, Blocks.DARK_OAK_LEAVES, Blocks.ACACIA_LEAVES, Blocks.BIRCH_LEAVES, Blocks.AZALEA_LEAVES, Blocks.FLOWERING_AZALEA_LEAVES, Blocks.MANGROVE_LEAVES, Blocks.SCULK_SENSOR, Blocks.MOSS_BLOCK, Blocks.MOSS_CARPET, Blocks.SCULK, Blocks.SCULK_CATALYST, Blocks.SCULK_VEIN, Blocks.SCULK_SHRIEKER);
+        this.tag(BlockTags.MINEABLE_WITH_PICKAXE).add(Blocks.STONE, Blocks.GRANITE, Blocks.POLISHED_GRANITE, Blocks.DIORITE, Blocks.POLISHED_DIORITE, Blocks.ANDESITE, Blocks.POLISHED_ANDESITE, Blocks.COBBLESTONE, Blocks.GOLD_ORE, Blocks.DEEPSLATE_GOLD_ORE, Blocks.IRON_ORE, Blocks.DEEPSLATE_IRON_ORE, Blocks.COAL_ORE, Blocks.DEEPSLATE_COAL_ORE, Blocks.NETHER_GOLD_ORE, Blocks.LAPIS_ORE, Blocks.DEEPSLATE_LAPIS_ORE, Blocks.LAPIS_BLOCK, Blocks.DISPENSER, Blocks.SANDSTONE, Blocks.CHISELED_SANDSTONE, Blocks.CUT_SANDSTONE, Blocks.GOLD_BLOCK, Blocks.IRON_BLOCK, Blocks.BRICKS, Blocks.MOSSY_COBBLESTONE, Blocks.OBSIDIAN, Blocks.SPAWNER, Blocks.DIAMOND_ORE, Blocks.DEEPSLATE_DIAMOND_ORE, Blocks.DIAMOND_BLOCK, Blocks.FURNACE, Blocks.COBBLESTONE_STAIRS, Blocks.STONE_PRESSURE_PLATE, Blocks.IRON_DOOR, Blocks.REDSTONE_ORE, Blocks.DEEPSLATE_REDSTONE_ORE, Blocks.NETHERRACK, Blocks.BASALT, Blocks.POLISHED_BASALT, Blocks.STONE_BRICKS, Blocks.MOSSY_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS, Blocks.CHISELED_STONE_BRICKS, Blocks.IRON_BARS, Blocks.CHAIN, Blocks.BRICK_STAIRS, Blocks.STONE_BRICK_STAIRS, Blocks.NETHER_BRICKS, Blocks.NETHER_BRICK_FENCE, Blocks.NETHER_BRICK_STAIRS, Blocks.ENCHANTING_TABLE, Blocks.BREWING_STAND, Blocks.END_STONE, Blocks.SANDSTONE_STAIRS, Blocks.EMERALD_ORE, Blocks.DEEPSLATE_EMERALD_ORE, Blocks.ENDER_CHEST, Blocks.EMERALD_BLOCK, Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE, Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE, Blocks.REDSTONE_BLOCK, Blocks.NETHER_QUARTZ_ORE, Blocks.HOPPER, Blocks.QUARTZ_BLOCK, Blocks.CHISELED_QUARTZ_BLOCK, Blocks.QUARTZ_PILLAR, Blocks.QUARTZ_STAIRS, Blocks.DROPPER, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA, Blocks.IRON_TRAPDOOR, Blocks.PRISMARINE, Blocks.PRISMARINE_BRICKS, Blocks.DARK_PRISMARINE, Blocks.PRISMARINE_STAIRS, Blocks.PRISMARINE_BRICK_STAIRS, Blocks.DARK_PRISMARINE_STAIRS, Blocks.PRISMARINE_SLAB, Blocks.PRISMARINE_BRICK_SLAB, Blocks.DARK_PRISMARINE_SLAB, Blocks.TERRACOTTA, Blocks.COAL_BLOCK, Blocks.RED_SANDSTONE, Blocks.CHISELED_RED_SANDSTONE, Blocks.CUT_RED_SANDSTONE, Blocks.RED_SANDSTONE_STAIRS, Blocks.STONE_SLAB, Blocks.SMOOTH_STONE_SLAB, Blocks.SANDSTONE_SLAB, Blocks.CUT_SANDSTONE_SLAB, Blocks.PETRIFIED_OAK_SLAB, Blocks.COBBLESTONE_SLAB, Blocks.BRICK_SLAB, Blocks.STONE_BRICK_SLAB, Blocks.NETHER_BRICK_SLAB, Blocks.QUARTZ_SLAB, Blocks.RED_SANDSTONE_SLAB, Blocks.CUT_RED_SANDSTONE_SLAB, Blocks.PURPUR_SLAB, Blocks.SMOOTH_STONE, Blocks.SMOOTH_SANDSTONE, Blocks.SMOOTH_QUARTZ, Blocks.SMOOTH_RED_SANDSTONE, Blocks.PURPUR_BLOCK, Blocks.PURPUR_PILLAR, Blocks.PURPUR_STAIRS, Blocks.END_STONE_BRICKS, Blocks.MAGMA_BLOCK, Blocks.RED_NETHER_BRICKS, Blocks.BONE_BLOCK, Blocks.OBSERVER, Blocks.WHITE_GLAZED_TERRACOTTA, Blocks.ORANGE_GLAZED_TERRACOTTA, Blocks.MAGENTA_GLAZED_TERRACOTTA, Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, Blocks.YELLOW_GLAZED_TERRACOTTA, Blocks.LIME_GLAZED_TERRACOTTA, Blocks.PINK_GLAZED_TERRACOTTA, Blocks.GRAY_GLAZED_TERRACOTTA, Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, Blocks.CYAN_GLAZED_TERRACOTTA, Blocks.PURPLE_GLAZED_TERRACOTTA, Blocks.BLUE_GLAZED_TERRACOTTA, Blocks.BROWN_GLAZED_TERRACOTTA, Blocks.GREEN_GLAZED_TERRACOTTA, Blocks.RED_GLAZED_TERRACOTTA, Blocks.BLACK_GLAZED_TERRACOTTA, Blocks.WHITE_CONCRETE, Blocks.ORANGE_CONCRETE, Blocks.MAGENTA_CONCRETE, Blocks.LIGHT_BLUE_CONCRETE, Blocks.YELLOW_CONCRETE, Blocks.LIME_CONCRETE, Blocks.PINK_CONCRETE, Blocks.GRAY_CONCRETE, Blocks.LIGHT_GRAY_CONCRETE, Blocks.CYAN_CONCRETE, Blocks.PURPLE_CONCRETE, Blocks.BLUE_CONCRETE, Blocks.BROWN_CONCRETE, Blocks.GREEN_CONCRETE, Blocks.RED_CONCRETE, Blocks.BLACK_CONCRETE, Blocks.DEAD_TUBE_CORAL_BLOCK, Blocks.DEAD_BRAIN_CORAL_BLOCK, Blocks.DEAD_BUBBLE_CORAL_BLOCK, Blocks.DEAD_FIRE_CORAL_BLOCK, Blocks.DEAD_HORN_CORAL_BLOCK, Blocks.TUBE_CORAL_BLOCK, Blocks.BRAIN_CORAL_BLOCK, Blocks.BUBBLE_CORAL_BLOCK, Blocks.FIRE_CORAL_BLOCK, Blocks.HORN_CORAL_BLOCK, Blocks.DEAD_TUBE_CORAL, Blocks.DEAD_BRAIN_CORAL, Blocks.DEAD_BUBBLE_CORAL, Blocks.DEAD_FIRE_CORAL, Blocks.DEAD_HORN_CORAL, Blocks.DEAD_TUBE_CORAL_FAN, Blocks.DEAD_BRAIN_CORAL_FAN, Blocks.DEAD_BUBBLE_CORAL_FAN, Blocks.DEAD_FIRE_CORAL_FAN, Blocks.DEAD_HORN_CORAL_FAN, Blocks.DEAD_TUBE_CORAL_WALL_FAN, Blocks.DEAD_BRAIN_CORAL_WALL_FAN, Blocks.DEAD_BUBBLE_CORAL_WALL_FAN, Blocks.DEAD_FIRE_CORAL_WALL_FAN, Blocks.DEAD_HORN_CORAL_WALL_FAN, Blocks.POLISHED_GRANITE_STAIRS, Blocks.SMOOTH_RED_SANDSTONE_STAIRS, Blocks.MOSSY_STONE_BRICK_STAIRS, Blocks.POLISHED_DIORITE_STAIRS, Blocks.MOSSY_COBBLESTONE_STAIRS, Blocks.END_STONE_BRICK_STAIRS, Blocks.STONE_STAIRS, Blocks.SMOOTH_SANDSTONE_STAIRS, Blocks.SMOOTH_QUARTZ_STAIRS, Blocks.GRANITE_STAIRS, Blocks.ANDESITE_STAIRS, Blocks.RED_NETHER_BRICK_STAIRS, Blocks.POLISHED_ANDESITE_STAIRS, Blocks.DIORITE_STAIRS, Blocks.POLISHED_GRANITE_SLAB, Blocks.SMOOTH_RED_SANDSTONE_SLAB, Blocks.MOSSY_STONE_BRICK_SLAB, Blocks.POLISHED_DIORITE_SLAB, Blocks.MOSSY_COBBLESTONE_SLAB, Blocks.END_STONE_BRICK_SLAB, Blocks.SMOOTH_SANDSTONE_SLAB, Blocks.SMOOTH_QUARTZ_SLAB, Blocks.GRANITE_SLAB, Blocks.ANDESITE_SLAB, Blocks.RED_NETHER_BRICK_SLAB, Blocks.POLISHED_ANDESITE_SLAB, Blocks.DIORITE_SLAB, Blocks.SMOKER, Blocks.BLAST_FURNACE, Blocks.GRINDSTONE, Blocks.STONECUTTER, Blocks.BELL, Blocks.LANTERN, Blocks.SOUL_LANTERN, Blocks.WARPED_NYLIUM, Blocks.CRIMSON_NYLIUM, Blocks.NETHERITE_BLOCK, Blocks.ANCIENT_DEBRIS, Blocks.CRYING_OBSIDIAN, Blocks.RESPAWN_ANCHOR, Blocks.LODESTONE, Blocks.BLACKSTONE, Blocks.BLACKSTONE_STAIRS, Blocks.BLACKSTONE_SLAB, Blocks.POLISHED_BLACKSTONE, Blocks.POLISHED_BLACKSTONE_BRICKS, Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS, Blocks.CHISELED_POLISHED_BLACKSTONE, Blocks.POLISHED_BLACKSTONE_BRICK_SLAB, Blocks.POLISHED_BLACKSTONE_BRICK_STAIRS, Blocks.GILDED_BLACKSTONE, Blocks.POLISHED_BLACKSTONE_STAIRS, Blocks.POLISHED_BLACKSTONE_SLAB, Blocks.POLISHED_BLACKSTONE_PRESSURE_PLATE, Blocks.CHISELED_NETHER_BRICKS, Blocks.CRACKED_NETHER_BRICKS, Blocks.QUARTZ_BRICKS, Blocks.TUFF, Blocks.CALCITE, Blocks.OXIDIZED_COPPER, Blocks.WEATHERED_COPPER, Blocks.EXPOSED_COPPER, Blocks.COPPER_BLOCK, Blocks.COPPER_ORE, Blocks.DEEPSLATE_COPPER_ORE, Blocks.OXIDIZED_CUT_COPPER, Blocks.WEATHERED_CUT_COPPER, Blocks.EXPOSED_CUT_COPPER, Blocks.CUT_COPPER, Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.WAXED_COPPER_BLOCK, Blocks.WAXED_WEATHERED_COPPER, Blocks.WAXED_EXPOSED_COPPER, Blocks.WAXED_OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER, Blocks.WAXED_CUT_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.LIGHTNING_ROD, Blocks.POINTED_DRIPSTONE, Blocks.DRIPSTONE_BLOCK, Blocks.DEEPSLATE, Blocks.COBBLED_DEEPSLATE, Blocks.COBBLED_DEEPSLATE_STAIRS, Blocks.COBBLED_DEEPSLATE_SLAB, Blocks.POLISHED_DEEPSLATE, Blocks.POLISHED_DEEPSLATE_STAIRS, Blocks.POLISHED_DEEPSLATE_SLAB, Blocks.DEEPSLATE_TILES, Blocks.DEEPSLATE_TILE_STAIRS, Blocks.DEEPSLATE_TILE_SLAB, Blocks.DEEPSLATE_BRICKS, Blocks.DEEPSLATE_BRICK_STAIRS, Blocks.DEEPSLATE_BRICK_SLAB, Blocks.CHISELED_DEEPSLATE, Blocks.CRACKED_DEEPSLATE_BRICKS, Blocks.CRACKED_DEEPSLATE_TILES, Blocks.SMOOTH_BASALT, Blocks.RAW_IRON_BLOCK, Blocks.RAW_COPPER_BLOCK, Blocks.RAW_GOLD_BLOCK, Blocks.ICE, Blocks.PACKED_ICE, Blocks.BLUE_ICE, Blocks.STONE_BUTTON, Blocks.PISTON, Blocks.STICKY_PISTON, Blocks.PISTON_HEAD, Blocks.AMETHYST_CLUSTER, Blocks.SMALL_AMETHYST_BUD, Blocks.MEDIUM_AMETHYST_BUD, Blocks.LARGE_AMETHYST_BUD, Blocks.AMETHYST_BLOCK, Blocks.BUDDING_AMETHYST, Blocks.INFESTED_COBBLESTONE, Blocks.INFESTED_CHISELED_STONE_BRICKS, Blocks.INFESTED_CRACKED_STONE_BRICKS, Blocks.INFESTED_DEEPSLATE, Blocks.INFESTED_STONE, Blocks.INFESTED_MOSSY_STONE_BRICKS, Blocks.INFESTED_STONE_BRICKS).addTag(BlockTags.WALLS).addTag(BlockTags.SHULKER_BOXES).addTag(BlockTags.ANVIL).addTag(BlockTags.CAULDRONS).addTag(BlockTags.RAILS).add(Blocks.CONDUIT).add(Blocks.MUD_BRICKS).add(Blocks.MUD_BRICK_STAIRS).add(Blocks.MUD_BRICK_SLAB).add(Blocks.PACKED_MUD);
+        this.tag(BlockTags.MINEABLE_WITH_SHOVEL).add(Blocks.CLAY, Blocks.DIRT, Blocks.COARSE_DIRT, Blocks.PODZOL, Blocks.FARMLAND, Blocks.GRASS_BLOCK, Blocks.GRAVEL, Blocks.MYCELIUM, Blocks.SAND, Blocks.RED_SAND, Blocks.SNOW_BLOCK, Blocks.SNOW, Blocks.SOUL_SAND, Blocks.DIRT_PATH, Blocks.WHITE_CONCRETE_POWDER, Blocks.ORANGE_CONCRETE_POWDER, Blocks.MAGENTA_CONCRETE_POWDER, Blocks.LIGHT_BLUE_CONCRETE_POWDER, Blocks.YELLOW_CONCRETE_POWDER, Blocks.LIME_CONCRETE_POWDER, Blocks.PINK_CONCRETE_POWDER, Blocks.GRAY_CONCRETE_POWDER, Blocks.LIGHT_GRAY_CONCRETE_POWDER, Blocks.CYAN_CONCRETE_POWDER, Blocks.PURPLE_CONCRETE_POWDER, Blocks.BLUE_CONCRETE_POWDER, Blocks.BROWN_CONCRETE_POWDER, Blocks.GREEN_CONCRETE_POWDER, Blocks.RED_CONCRETE_POWDER, Blocks.BLACK_CONCRETE_POWDER, Blocks.SOUL_SOIL, Blocks.ROOTED_DIRT, Blocks.MUDDY_MANGROVE_ROOTS, Blocks.MUD);
+        this.tag(BlockTags.NEEDS_DIAMOND_TOOL).add(Blocks.OBSIDIAN, Blocks.CRYING_OBSIDIAN, Blocks.NETHERITE_BLOCK, Blocks.RESPAWN_ANCHOR, Blocks.ANCIENT_DEBRIS);
+        this.tag(BlockTags.NEEDS_IRON_TOOL).add(Blocks.DIAMOND_BLOCK, Blocks.DIAMOND_ORE, Blocks.DEEPSLATE_DIAMOND_ORE, Blocks.EMERALD_ORE, Blocks.DEEPSLATE_EMERALD_ORE, Blocks.EMERALD_BLOCK, Blocks.GOLD_BLOCK, Blocks.RAW_GOLD_BLOCK, Blocks.GOLD_ORE, Blocks.DEEPSLATE_GOLD_ORE, Blocks.REDSTONE_ORE, Blocks.DEEPSLATE_REDSTONE_ORE);
+        this.tag(BlockTags.NEEDS_STONE_TOOL).add(Blocks.IRON_BLOCK, Blocks.RAW_IRON_BLOCK, Blocks.IRON_ORE, Blocks.DEEPSLATE_IRON_ORE, Blocks.LAPIS_BLOCK, Blocks.LAPIS_ORE, Blocks.DEEPSLATE_LAPIS_ORE, Blocks.COPPER_BLOCK, Blocks.RAW_COPPER_BLOCK, Blocks.COPPER_ORE, Blocks.DEEPSLATE_COPPER_ORE, Blocks.CUT_COPPER_SLAB, Blocks.CUT_COPPER_STAIRS, Blocks.CUT_COPPER, Blocks.WEATHERED_COPPER, Blocks.WEATHERED_CUT_COPPER_SLAB, Blocks.WEATHERED_CUT_COPPER_STAIRS, Blocks.WEATHERED_CUT_COPPER, Blocks.OXIDIZED_COPPER, Blocks.OXIDIZED_CUT_COPPER_SLAB, Blocks.OXIDIZED_CUT_COPPER_STAIRS, Blocks.OXIDIZED_CUT_COPPER, Blocks.EXPOSED_COPPER, Blocks.EXPOSED_CUT_COPPER_SLAB, Blocks.EXPOSED_CUT_COPPER_STAIRS, Blocks.EXPOSED_CUT_COPPER, Blocks.WAXED_COPPER_BLOCK, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.WAXED_CUT_COPPER_STAIRS, Blocks.WAXED_CUT_COPPER, Blocks.WAXED_WEATHERED_COPPER, Blocks.WAXED_WEATHERED_CUT_COPPER_SLAB, Blocks.WAXED_WEATHERED_CUT_COPPER_STAIRS, Blocks.WAXED_WEATHERED_CUT_COPPER, Blocks.WAXED_EXPOSED_COPPER, Blocks.WAXED_EXPOSED_CUT_COPPER_SLAB, Blocks.WAXED_EXPOSED_CUT_COPPER_STAIRS, Blocks.WAXED_EXPOSED_CUT_COPPER, Blocks.WAXED_OXIDIZED_COPPER, Blocks.WAXED_OXIDIZED_CUT_COPPER_SLAB, Blocks.WAXED_OXIDIZED_CUT_COPPER_STAIRS, Blocks.WAXED_OXIDIZED_CUT_COPPER, Blocks.LIGHTNING_ROD);
+        this.tag(BlockTags.FEATURES_CANNOT_REPLACE).add(Blocks.BEDROCK, Blocks.SPAWNER, Blocks.CHEST, Blocks.END_PORTAL_FRAME, Blocks.REINFORCED_DEEPSLATE);
+        this.tag(BlockTags.LAVA_POOL_STONE_CANNOT_REPLACE).addTag(BlockTags.FEATURES_CANNOT_REPLACE).addTag(BlockTags.LEAVES).addTag(BlockTags.LOGS);
+        this.tag(BlockTags.GEODE_INVALID_BLOCKS).add(Blocks.BEDROCK, Blocks.WATER, Blocks.LAVA, Blocks.ICE, Blocks.PACKED_ICE, Blocks.BLUE_ICE);
+        this.tag(BlockTags.ANIMALS_SPAWNABLE_ON).add(Blocks.GRASS_BLOCK);
+        this.tag(BlockTags.AXOLOTLS_SPAWNABLE_ON).add(Blocks.CLAY);
+        this.tag(BlockTags.GOATS_SPAWNABLE_ON).add(Blocks.STONE, Blocks.SNOW, Blocks.SNOW_BLOCK, Blocks.PACKED_ICE, Blocks.GRAVEL);
+        this.tag(BlockTags.MOOSHROOMS_SPAWNABLE_ON).add(Blocks.MYCELIUM);
+        this.tag(BlockTags.PARROTS_SPAWNABLE_ON).add(Blocks.GRASS_BLOCK, Blocks.AIR).addTag(BlockTags.LEAVES).addTag(BlockTags.LOGS);
+        this.tag(BlockTags.POLAR_BEARS_SPAWNABLE_ON_ALTERNATE).add(Blocks.ICE);
+        this.tag(BlockTags.RABBITS_SPAWNABLE_ON).add(Blocks.GRASS_BLOCK, Blocks.SNOW, Blocks.SNOW_BLOCK, Blocks.SAND);
+        this.tag(BlockTags.FOXES_SPAWNABLE_ON).add(Blocks.GRASS_BLOCK, Blocks.SNOW, Blocks.SNOW_BLOCK, Blocks.PODZOL, Blocks.COARSE_DIRT);
+        this.tag(BlockTags.WOLVES_SPAWNABLE_ON).add(Blocks.GRASS_BLOCK, Blocks.SNOW, Blocks.SNOW_BLOCK);
+        this.tag(BlockTags.FROGS_SPAWNABLE_ON).add(Blocks.GRASS_BLOCK, Blocks.MUD, Blocks.MANGROVE_ROOTS, Blocks.MUDDY_MANGROVE_ROOTS);
+        this.tag(BlockTags.TERRACOTTA).add(Blocks.TERRACOTTA, Blocks.WHITE_TERRACOTTA, Blocks.ORANGE_TERRACOTTA, Blocks.MAGENTA_TERRACOTTA, Blocks.LIGHT_BLUE_TERRACOTTA, Blocks.YELLOW_TERRACOTTA, Blocks.LIME_TERRACOTTA, Blocks.PINK_TERRACOTTA, Blocks.GRAY_TERRACOTTA, Blocks.LIGHT_GRAY_TERRACOTTA, Blocks.CYAN_TERRACOTTA, Blocks.PURPLE_TERRACOTTA, Blocks.BLUE_TERRACOTTA, Blocks.BROWN_TERRACOTTA, Blocks.GREEN_TERRACOTTA, Blocks.RED_TERRACOTTA, Blocks.BLACK_TERRACOTTA);
+        this.tag(BlockTags.AZALEA_GROWS_ON).addTag(BlockTags.DIRT).addTag(BlockTags.SAND).addTag(BlockTags.TERRACOTTA).add(Blocks.SNOW_BLOCK).add(Blocks.POWDER_SNOW);
+        this.tag(BlockTags.REPLACEABLE_PLANTS).add(Blocks.GRASS, Blocks.FERN, Blocks.DEAD_BUSH, Blocks.VINE, Blocks.GLOW_LICHEN, Blocks.SUNFLOWER, Blocks.LILAC, Blocks.ROSE_BUSH, Blocks.PEONY, Blocks.TALL_GRASS, Blocks.LARGE_FERN, Blocks.HANGING_ROOTS);
+        this.tag(BlockTags.FROG_PREFER_JUMP_TO).add(Blocks.LILY_PAD, Blocks.BIG_DRIPLEAF);
+        this.tag(BlockTags.SCULK_REPLACEABLE).addTag(BlockTags.BASE_STONE_OVERWORLD).addTag(BlockTags.DIRT).addTag(BlockTags.TERRACOTTA).addTag(BlockTags.NYLIUM).addTag(BlockTags.BASE_STONE_NETHER).addTag(BlockTags.SAND).add(Blocks.GRAVEL).add(Blocks.SOUL_SAND).add(Blocks.SOUL_SOIL).add(Blocks.CALCITE).add(Blocks.SMOOTH_BASALT).add(Blocks.CLAY).add(Blocks.DRIPSTONE_BLOCK).add(Blocks.END_STONE).add(Blocks.RED_SANDSTONE).add(Blocks.SANDSTONE);
+        this.tag(BlockTags.SCULK_REPLACEABLE_WORLD_GEN).addTag(BlockTags.SCULK_REPLACEABLE).add(Blocks.DEEPSLATE_BRICKS).add(Blocks.DEEPSLATE_TILES).add(Blocks.COBBLED_DEEPSLATE).add(Blocks.CRACKED_DEEPSLATE_BRICKS).add(Blocks.CRACKED_DEEPSLATE_TILES).add(Blocks.POLISHED_DEEPSLATE);
+        this.tag(BlockTags.CONVERTABLE_TO_MUD).add(Blocks.DIRT, Blocks.COARSE_DIRT, Blocks.ROOTED_DIRT);
+        this.tag(BlockTags.ANCIENT_CITY_REPLACEABLE).add(Blocks.DEEPSLATE).add(Blocks.DEEPSLATE_BRICKS).add(Blocks.DEEPSLATE_TILES).add(Blocks.DEEPSLATE_BRICK_SLAB).add(Blocks.DEEPSLATE_TILE_SLAB).add(Blocks.DEEPSLATE_BRICK_STAIRS).add(Blocks.DEEPSLATE_TILE_WALL).add(Blocks.DEEPSLATE_BRICK_WALL).add(Blocks.COBBLED_DEEPSLATE).add(Blocks.CRACKED_DEEPSLATE_BRICKS).add(Blocks.CRACKED_DEEPSLATE_TILES).add(Blocks.GRAY_WOOL);
+        this.tag(BlockTags.MANGROVE_LOGS_CAN_GROW_THROUGH).add(Blocks.MUD, Blocks.MUDDY_MANGROVE_ROOTS, Blocks.MANGROVE_ROOTS, Blocks.MANGROVE_LEAVES, Blocks.MANGROVE_LOG, Blocks.MANGROVE_PROPAGULE, Blocks.MOSS_CARPET, Blocks.VINE);
+        this.tag(BlockTags.MANGROVE_ROOTS_CAN_GROW_THROUGH).add(Blocks.MUD, Blocks.MUDDY_MANGROVE_ROOTS, Blocks.MANGROVE_ROOTS, Blocks.MOSS_CARPET, Blocks.VINE, Blocks.MANGROVE_PROPAGULE, Blocks.SNOW);
+        this.tag(BlockTags.DEAD_BUSH_MAY_PLACE_ON).addTag(BlockTags.SAND).addTag(BlockTags.TERRACOTTA).addTag(BlockTags.DIRT);
+        this.tag(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON).add(Blocks.ICE).add(Blocks.PACKED_ICE).add(Blocks.BARRIER);
+        this.tag(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON).add(Blocks.HONEY_BLOCK).add(Blocks.SOUL_SAND).add(Blocks.MUD);
+        this.tag(BlockTags.COMPLETES_FIND_TREE_TUTORIAL).addTag(BlockTags.LOGS).addTag(BlockTags.LEAVES).addTag(BlockTags.WART_BLOCKS);
+        this.tag(BlockTags.SNAPS_GOAT_HORN).addTag(BlockTags.OVERWORLD_NATURAL_LOGS).add(Blocks.STONE).add(Blocks.PACKED_ICE).add(Blocks.IRON_ORE).add(Blocks.COAL_ORE).add(Blocks.COPPER_ORE).add(Blocks.EMERALD_ORE);
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index a7d343779112038cf6a7a8d716b1aa671f30abb4..1a68a51b83a5d5abf32cfbdfb3be43f0710dcb8d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -23,7 +23,6 @@ import nl.martijnmuijsers.paper.block.replacementrule.SingleMultiStateRealBlockR
 import nl.martijnmuijsers.paper.block.replacementrule.SingleStateRealBlockReplacementRule;
 import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
-import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
@@ -78,7 +77,7 @@ public class SuCraftBlocks {
             .withFallback(Blocks.DIRT)
             .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
             .withFullBlockBoundingBoxItem(),
-        new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F, 1.0F).sound(SoundType.GRAVEL)),
+        new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F, 1.0F).sound(SoundType.GRAVEL)).mineableWithShovel().dirt(),
         SuCraftBlockLoot::dropSelf
     );
 
@@ -108,13 +107,13 @@ public class SuCraftBlocks {
             .withFallback(Blocks.SOUL_SAND)
             .withModelCreation(Model.BottomTopPillarCube.defaultCreation().withNoParameters())
             .withFullBlockBoundingBoxItem(),
-        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F, 0.8F)),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F, 0.8F)).mineableWithPickaxe().soulSpeed().soulFireBase(),
         SuCraftBlockLoot::dropSelf
     );
 
     public static final Block SANDSTONE_BRICKS = registerBricks("sandstone", Blocks.SANDSTONE, MaterialColor.SAND);
     public static final Block RED_SANDSTONE_BRICKS = registerBricks("red_sandstone", Blocks.RED_SANDSTONE, MaterialColor.COLOR_ORANGE);
-    public static final Block SOUL_SANDSTONE_BRICKS = registerBricks("soul_sandstone", Blocks.SOUL_SAND, MaterialColor.COLOR_BROWN);
+    public static final Block SOUL_SANDSTONE_BRICKS = registerBricks("soul_sandstone", Blocks.SOUL_SAND, MaterialColor.COLOR_BROWN).soulSpeed().soulFireBase();
     public static final Block ANDESITE_COBBLESTONE = registerCobblestone("andesite", Blocks.ANDESITE, MaterialColor.STONE);
     public static final Block DIORITE_COBBLESTONE = registerCobblestone("diorite", Blocks.DIORITE, MaterialColor.QUARTZ);
     public static final Block GRANITE_COBBLESTONE = registerCobblestone("granite", Blocks.GRANITE, MaterialColor.DIRT);
@@ -129,7 +128,7 @@ public class SuCraftBlocks {
             .withFallback(Blocks.SOUL_SAND)
             .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())).withNoParameters())
             .withFullBlockBoundingBoxItem(),
-        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)).mineableWithPickaxe().soulSpeed().soulFireBase(),
         SuCraftBlockLoot::dropSelf
     );
 
@@ -143,7 +142,7 @@ public class SuCraftBlocks {
             .withFallback(Blocks.SOUL_SAND)
             .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance())).withNoParameters())
             .withFullBlockBoundingBoxItem(),
-        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)).mineableWithPickaxe().soulSpeed().soulFireBase(),
         SuCraftBlockLoot::dropSelf
     );
     public static final Block CHISELED_PRISMARINE_BRICKS = registerChiseledBricks("prismarine", Blocks.PRISMARINE_BRICKS, MaterialColor.DIAMOND);
@@ -160,7 +159,8 @@ public class SuCraftBlocks {
     public static final Block RED_MAPLE_LEAVES = registerLeaves("red_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_RED);
     public static final Block ORANGE_MAPLE_LEAVES = registerLeaves("orange_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_ORANGE);
     public static final Block YELLOW_MAPLE_LEAVES = registerLeaves("yellow_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_YELLOW);
-    public static final Block DIRT_SLAB = registerRealSlab("dirt", null, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.MUD_BRICK_SLAB, BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F).sound(SoundType.GRAVEL));
+    public static final Block DIRT_SLAB = registerRealSlab("dirt", null, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.MUD_BRICK_SLAB, BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F).sound(SoundType.GRAVEL)).breakBeforeClientKnowsToBreak().mineableWithShovel().dirt();
+    public static final Block SNOWY_STONE_BRICK_SLAB = registerFakeSlab(SNOWY_STONE_BRICKS, "snowy_stone_brick", null, Blocks.STONE_BRICK_SLAB, Blocks.STONE_BRICK_SLAB);
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
@@ -191,7 +191,7 @@ public class SuCraftBlocks {
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem()
                 .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
+            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)).mineableWithPickaxe().stoneBricks(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -208,7 +208,7 @@ public class SuCraftBlocks {
             throw new IllegalStateException("registerInfestedStoneBricks was called with an uninfested custom block for which replacementRule was not initialized yet");
         }
         if (replacementRule instanceof SingleStateRealBlockReplacementRule singleStateReplacementRule) {
-            Block infestedBlock = new InfestedBlock(uninfested, BlockBehaviour.Properties.of(Material.CLAY), false);
+            Block infestedBlock = new InfestedBlock(uninfested, BlockBehaviour.Properties.of(Material.CLAY), false).withAddedTagsLike(uninfested);
             return register(
                 "infested_" + uninfested.customKey.getPath(),
                 new SingleMultiStateRealBlockReplacementRuleBuilder()
@@ -237,7 +237,7 @@ public class SuCraftBlocks {
                 .withFallback(Blocks.BOOKSHELF)
                 .withModelCreation(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft(idWoodType + "_planks"), TextureContent.Existing.getInstance())).withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.WOOD)),
+            new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(1.5F).sound(SoundType.WOOD)).mineableWithAxe(),
             block -> SuCraftBlockLoot.dropSingleItemAndSingleItemWhenSilkTouch(Items.BOOK, ConstantValue.exactly(3.0F), block)
         );
     }
@@ -253,7 +253,7 @@ public class SuCraftBlocks {
                 .withFallback(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new Block(BlockBehaviour.Properties.of(Material.WOOD, materialColor).strength(2.0F, 3.0F).sound(SoundType.WOOD)),
+            new Block(BlockBehaviour.Properties.of(Material.WOOD, materialColor).strength(2.0F, 3.0F).sound(SoundType.WOOD)).mineableWithAxe().planks(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -269,7 +269,7 @@ public class SuCraftBlocks {
                 .withFallback(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)).mineableWithPickaxe(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -285,7 +285,7 @@ public class SuCraftBlocks {
                 .withFallback(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)).mineableWithPickaxe(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -301,7 +301,7 @@ public class SuCraftBlocks {
                 .withFallback(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)).mineableWithPickaxe(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -317,7 +317,7 @@ public class SuCraftBlocks {
                 .withFallback(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(2.0F, 6.0F)),
+            new Block(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(2.0F, 6.0F)).mineableWithPickaxe(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -333,7 +333,7 @@ public class SuCraftBlocks {
                 .withFallback(fallback)
                 .withDefaultModelCreationsForRotatedPillarBlock()
                 .withFullBlockBoundingBoxItem(),
-            new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)),
+            new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, materialColor).strength(1.5F, 6.0F)).mineableWithPickaxe(),
             SuCraftBlockLoot::dropSelf
         );
     }
@@ -349,14 +349,14 @@ public class SuCraftBlocks {
                 .withAnalogousFallbacks(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
-            new LeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES, materialColor).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(Blocks::ocelotOrParrot).isSuffocating(Blocks::never).isViewBlocking(Blocks::never)),
+            new LeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES, materialColor).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(Blocks::ocelotOrParrot).isSuffocating(Blocks::never).isViewBlocking(Blocks::never)).mineableWithHoe().leaves(),
             block -> SuCraftBlockLoot.dropLeaves(block, saplingBlock)
         );
     }
 
     /**
      * Based on {@link Blocks#OAK_SLAB}
-     * @param textureBlock If null, will be the same as the given type
+     * @param textureBlock If null, will be the same as the given type, else it will be assumed to be a default Minecraft model as well as texture namespaced key path (for example 'dirt' will mean the model used as double slab is 'minecraft:block/dirt' and the texture used is 'minecraft:block/dirt')
      */
     private static @NotNull Block registerRealSlab(@NotNull String type, @Nullable String textureBlock, @NotNull Block host, @NotNull Block hostReplacement, @NotNull Block fallback, @NotNull BlockBehaviour.Properties properties) {
         if (textureBlock == null) {
@@ -370,8 +370,26 @@ public class SuCraftBlocks {
                 .withDefaultModelCreationsForSlabReplacedBySlab(NamespacedKeyWithoutIntention.minecraft(textureBlock))
                 .withRealItemRuleFromHostBlock()
                 .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
-            new SlabBlock(properties),
-            SuCraftBlockLoot::dropSelf
+            new SlabBlock(properties).slab(),
+            SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
+        );
+    }
+
+    /**
+     * Based on {@link Blocks#OAK_SLAB}
+     * @param textureBlock If null, will be the based on the model of the full block, else it will be assumed to be a default Minecraft model as well as texture namespaced key path (for example 'dirt' will mean the model used as double slab is 'minecraft:block/dirt' and the texture used is 'minecraft:block/dirt')
+     */
+    private static @NotNull Block registerFakeSlab(@NotNull Block fullBlock, @NotNull String type, @Nullable String textureBlock, @NotNull Block host, @NotNull Block fallback) {
+        return register(
+            type + "_slab",
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
+                .rendersAsEntity()
+                .withAnalogousHosts(host)
+                .withAnalogousFallbacks(fallback)
+                .withDefaultModelCreationsForSlabReplacedBySlab(textureBlock != null ? NamespacedKeyWithoutIntention.minecraft(textureBlock) : fullBlock.replacementRule.getModel(fullBlock.defaultBlockState()).model().getKey())
+                .withRealItemRuleFromHostBlock(),
+            new SlabBlock(fullBlock.properties).withAddedTagsLike(fullBlock).slab(),
+            SuCraftBlockLoot::dropSingleOrDoubleSlabSelf
         );
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
index b2d641eb697be26eebcc3eb5d3765994a7436f39..c37cb4e4f2a922b822e4901e1115383e3ab74bba 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
@@ -32,16 +32,29 @@ public class SuCraftObservableBlockTagsSpreader extends SuCraftTagsProvider<Bloc
 
     @Override
     protected void addTags(Map<TagKey<Block>, List<Holder<Block>>> existingRegistryTagEntries) {
-        final List<TagKey<Block>> tagsToSpread = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL, BlockTags.LEAVES /* To allow custom leaves to inherit being broken by shears fast */);
         MinecraftServer.LOGGER.info("Inheriting mineable with tool tags for custom blocks...");
-        for (Block block : Registry.BLOCK) {
-            BlockReplacementRule blockReplacementRule = block.replacementRule;
-            if (blockReplacementRule != null) {
-                for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialBlockReplacementPairs()) {
-                    for (TagKey<Block> tag : tagsToSpread) {
-                        var holder = this.registry.getHolderOrThrow(this.registry.getResourceKey(observationReplacement.second()).get());
-                        if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(holder)) {
-                            this.tag(tag).add(this.registry.getResourceKey(observationReplacement.first()).get());
+        final List<TagKey<Block>> tagsToSpread = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL, BlockTags.LEAVES /* To allow custom leaves to inherit being broken by shears fast */);
+        for (boolean observationReplacementToOriginal : new boolean[] {false, true}) {
+            for (Block block : Registry.BLOCK) {
+                BlockReplacementRule blockReplacementRule = block.replacementRule;
+                if (blockReplacementRule != null) {
+                    for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialBlockReplacementPairs()) {
+                        var observationOriginalKey = this.registry.getResourceKey(observationReplacement.first()).get();
+                        var observationOriginalHolder = this.registry.getHolderOrThrow(observationOriginalKey);
+                        var observationReplacementKey = this.registry.getResourceKey(observationReplacement.second()).get();
+                        var observationReplacementHolder = this.registry.getHolderOrThrow(observationReplacementKey);
+                        for (TagKey<Block> tag : tagsToSpread) {
+                            if (observationReplacementToOriginal) {
+                                // From observation replacement block to original block
+                                if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(observationReplacementHolder)) {
+                                    this.tag(tag).add(observationOriginalKey);
+                                }
+                            } else {
+                                // From original block to observation replacement block
+                                if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(observationOriginalHolder)) {
+                                    this.tag(tag).add(observationReplacementKey);
+                                }
+                            }
                         }
                     }
                 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
index a7043113114708d26525592b2fce49d03215f4b7..81370d9e13d7071187659eb2dee3f4d6b570a340 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -45,6 +45,8 @@ public interface BlockReplacementRule {
 
     boolean hasAsReal(@NotNull Block potentialReal);
 
+    boolean rendersAsEntity();
+
     /**
      * Contains no duplicates
      */
@@ -59,8 +61,10 @@ public interface BlockReplacementRule {
 
     /**
      * This method will assume (not verify) that the given state is in fact a host of this rule
+     * <br>
+     * Returns null if @{link #rendersAsEntity} is true
      */
-    @NotNull BlockState getHostReplacement(@NotNull BlockState host);
+    @Nullable BlockState getHostReplacement(@NotNull BlockState host);
 
     /**
      * Contains no duplicates
@@ -95,7 +99,9 @@ public interface BlockReplacementRule {
         if (state.is(this.getReal())) {
             return hasResourcePack ? this.getHost(state) : this.getFallback(state);
         } else if (hasResourcePack && this.hasAsHost(state)) {
-            return this.getHostReplacement(state);
+            if (!this.rendersAsEntity()) {
+                return this.getHostReplacement(state);
+            }
         }
         return null;
     }
@@ -110,11 +116,13 @@ public interface BlockReplacementRule {
             Block.addRealStateToPlayerObservableStates(realStateId, hostId);
             Block.addRealStateToPlayerObservableStates(realStateId, fallbackId);
         }
-        for (@NotNull BlockState host : this.getHosts()) {
-            int hostId = Block.BLOCK_STATE_REGISTRY.getId(host);
-            int hostReplacementId = Block.BLOCK_STATE_REGISTRY.getId(this.getHostReplacement(host));
-            Block.stateIdReplacementArrayWithResourcePack[hostId] = hostReplacementId;
-            Block.addRealStateToPlayerObservableStates(hostId, hostReplacementId);
+        if (!this.rendersAsEntity()) {
+            for (@NotNull BlockState host : this.getHosts()) {
+                int hostId = Block.BLOCK_STATE_REGISTRY.getId(host);
+                int hostReplacementId = Block.BLOCK_STATE_REGISTRY.getId(this.getHostReplacement(host));
+                Block.stateIdReplacementArrayWithResourcePack[hostId] = hostReplacementId;
+                Block.addRealStateToPlayerObservableStates(hostId, hostReplacementId);
+            }
         }
     }
 
@@ -131,8 +139,10 @@ public interface BlockReplacementRule {
     }
 
     default void updateMinDestroyTimeOfHosts() {
-        for (@NotNull BlockState host : this.getHosts()) {
-            host.getBlock().updateDestroyTime(this.getMinDestroyTimeOfHostAndHostReplacement(host));
+        if (!this.rendersAsEntity()) {
+            for (@NotNull BlockState host : this.getHosts()) {
+                host.getBlock().updateDestroyTime(this.getMinDestroyTimeOfHostAndHostReplacement(host));
+            }
         }
     }
 
@@ -144,6 +154,9 @@ public interface BlockReplacementRule {
      * This method will assume (not verify) that the given state is in fact a host of this rule
      */
     default float getMinDestroyTimeOfHostAndHostReplacement(@NotNull BlockState host) {
+        if (this.rendersAsEntity()) {
+            return host.getBlock().properties.destroyTime;
+        }
         return Math.min(
             host.getBlock().properties.destroyTime,
             this.getHostReplacement(host).getBlock().properties.destroyTime
@@ -154,6 +167,8 @@ public interface BlockReplacementRule {
      * This method will assume (not verify) that the given state is in fact a host of this rule
      * <br>
      * This method will be called multiple times, so it should never compute anything twice
+     * <br>
+     * May or may not return null if {@link #rendersAsEntity} is true and the given {@param host} is not the host for the default state of the real block
      */
     @NotNull ModelWithParameters getModel(@NotNull BlockState host);
 
@@ -207,7 +222,7 @@ public interface BlockReplacementRule {
                 hostBlocks.get(0).getStateDefinition().getPossibleStates().size() == 1 // The host block has only one state
                     || (
                     hostBlocks.get(0).getStateDefinition().getPossibleStates().size() == hosts.size() // All host block states are hosts of this rule
-                        && hosts.stream().map(this::getModel).distinct().count() == 1 // All hosts of this rule have the same model
+                        && hosts.stream().map(this::getModel).distinct().count() == 1 && hosts.stream().map(this::getModel).distinct().toList().get(0) != null // All hosts of this rule have the same model
                 )
             );
         forEachHostBlock: for (@NotNull Block hostBlock : hostBlocks) {
@@ -225,11 +240,15 @@ public interface BlockReplacementRule {
         for (@NotNull BlockState host : hosts) {
             @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(host.getBlock())).withEmptyIntention();
             @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
-            @NotNull ModelWithParameters model = this.getModel(host);
-            if (everyStateOfTheHostBlockHasTheSameModel) {
-                minecraftBlockStates.setNoVariantModel(model, resourcePack, false);
-            } else {
-                minecraftBlockStates.setModel(host, model, resourcePack, false);
+            @Nullable ModelWithParameters model = this.getModel(host);
+            if (!this.rendersAsEntity()) {
+                if (everyStateOfTheHostBlockHasTheSameModel) {
+                    minecraftBlockStates.setNoVariantModel(model, resourcePack, false);
+                } else {
+                    minecraftBlockStates.setModel(host, model, resourcePack, false);
+                }
+            } else if (model != null) {
+                model.model().addToResourcePack(resourcePack, false);
             }
         }
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
index a933f636ecc217f8f124d0eef586a44eff27121c..c1f59f6d129e841d53418ad8079f947a759bcbba 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
@@ -2,7 +2,6 @@
 
 package nl.martijnmuijsers.paper.block.replacementrule;
 
-import com.google.common.collect.Lists;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import org.jetbrains.annotations.NotNull;
@@ -12,7 +11,6 @@ import java.util.Collections;
 import java.util.IdentityHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.stream.Collectors;
 
 /**
@@ -22,6 +20,7 @@ public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
 
     protected final @NotNull Block real;
     protected final @Nullable RealItemReplacementRule realItemRule;
+    protected final boolean rendersAsEntity;
     protected final @NotNull List<@NotNull HostItemReplacementRule> hostItemRules;
 
     /**
@@ -40,9 +39,10 @@ public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
      */
     protected @Nullable Map<@NotNull Item, @NotNull Item> replacementByHostPlacingItem;
 
-    protected BlockReplacementRuleBase(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
+    protected BlockReplacementRuleBase(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
         this.real = real;
         this.realItemRule = realItemRule;
+        this.rendersAsEntity = rendersAsEntity;
         this.hostItemRules = Collections.unmodifiableList(hostItemRules);
     }
 
@@ -61,6 +61,11 @@ public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
         return this.realItemRule;
     }
 
+    @Override
+    public boolean rendersAsEntity() {
+        return this.rendersAsEntity;
+    }
+
     @Override
     public @NotNull List<@NotNull HostItemReplacementRule> getHostItemRules() {
         return this.hostItemRules;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
index 85a61a37d5b67da2c22dbe698bd01232673abd29..c444447b61ffe3b80fb711c0abc2ac623355602a 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
@@ -34,6 +34,8 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
 
     @NotNull B withReal(@NotNull Block real);
 
+    @NotNull B rendersAsEntity();
+
     /**
      * One host for all real block states
      */
@@ -61,6 +63,13 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
         return this.withHost(singleStateReplacementRule.getHost());
     }
 
+    /**
+     * Sets the hosts based automatically on the real state's properties, assuming the properties of the real block and the host block are exactly the same (for example, both are slabs, or both are leaves)
+     */
+    default @NotNull B withAnalogousHosts(@NotNull Block hostBlock) {
+        return this.withHostForRealState(hostBlock::withPropertiesOf);
+    }
+
     /**
      * One host replacement for all hosts
      */
@@ -92,9 +101,7 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
      * Sets the hosts and their host replacements based automatically on the real state's properties, assuming the properties of the real block, the host block and the host replacement block are exactly the same (for example, all three are slabs)
      */
     default @NotNull B withAnalogousHosts(@NotNull Block hostBlock, @NotNull Block hostReplacementBlock) {
-        return this
-            .withHostForRealState(hostBlock::withPropertiesOf)
-            .withHostReplacementForHost(hostReplacementBlock::withPropertiesOf);
+        return this.withAnalogousHosts(hostBlock).withHostReplacementForHost(hostReplacementBlock::withPropertiesOf);
     }
 
     /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
index e7a9890230a90705656c474e31e9b9594645b64c..8c6023d457b82a17099104d16df6bf720ac32472 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
@@ -46,8 +46,8 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
 
     private final @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost;
 
-    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull List<@NotNull BlockState> hosts, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull List<@NotNull BlockState> fallbacks, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules) {
-        super(real, realItemRule, hostItemRules);
+    public MultiStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull List<@NotNull BlockState> hosts, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostPerRealState, @NotNull Map<@NotNull BlockState, @NotNull BlockState> hostReplacementPerHost, @NotNull List<@NotNull BlockState> fallbacks, @NotNull Map<@NotNull BlockState, @NotNull BlockState> fallbackPerRealState, @NotNull Map<@NotNull BlockState, @NotNull ModelWithParameters> modelPerHost, List<@NotNull HostItemReplacementRule> hostItemRules) {
+        super(real, realItemRule, rendersAsEntity, hostItemRules);
         this.hostSet = Collections.newSetFromMap(new IdentityHashMap<>());
         this.hostSet.addAll(hosts);
         this.hostList = List.copyOf(hosts);
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
index e98876d48ff53e894cc559447a56d80b29f4e3a0..32a31c7f7621b2647aaf13b89d3a1ae0641b0296 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
@@ -31,6 +31,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
 
     protected @Nullable Block real = null;
     protected @NotNull Supplier<@Nullable RealItemReplacementRule> justInTimeRealItemRuleSupplier = () -> null;
+    private boolean rendersAsEntity = false;
     private @NotNull Function<@NotNull BlockState, @Nullable BlockState> hostForRealState = $ -> null;
     private @NotNull Function<@NotNull BlockState, @Nullable BlockState> hostReplacementForHost = $ -> null;
     private @NotNull Function<@NotNull BlockState, @Nullable BlockState> fallbackForRealState = $ -> null;
@@ -45,6 +46,12 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
         return this;
     }
 
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder rendersAsEntity() {
+        this.rendersAsEntity = true;
+        return this;
+    }
+
     @Override
     public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHost(@NotNull BlockState host) {
         this.hostForRealState = $ -> host;
@@ -194,6 +201,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
             return new SingleStateRealBlockReplacementRule(
                 this.real,
                 realItemRule,
+                this.rendersAsEntity,
                 host,
                 hostReplacement,
                 fallback,
@@ -219,17 +227,25 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
             }
             fallbackPerRealState.put(realState, fallback);
             if (!modelPerHost.containsKey(host)) {
-                @NotNull ModelWithParameters model = Validate.notNull(this.modelForRealState.apply(realState));
-                modelPerHost.put(host, model);
+                @Nullable ModelWithParameters model = this.modelForRealState.apply(realState);
+                if (!this.rendersAsEntity) {
+                    Validate.notNull(model);
+                }
+                if (model != null) {
+                    modelPerHost.put(host, model);
+                }
             }
         }
-        for (@NotNull BlockState host : hosts) {
-            @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
-            hostReplacementPerHost.put(host, hostReplacement);
+        if (!this.rendersAsEntity) {
+            for (@NotNull BlockState host : hosts) {
+                @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
+                hostReplacementPerHost.put(host, hostReplacement);
+            }
         }
         return new MultiStateRealBlockReplacementRule(
             this.real,
             realItemRule,
+            this.rendersAsEntity,
             hosts,
             hostPerRealState,
             hostReplacementPerHost,
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
index 3ceff3edfb756654a1e5135ac018c02e2ddb9653..eaf1e534cd9050c17fd4c91d6e241a75b793b271 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
@@ -53,8 +53,8 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
 
     private final @NotNull ModelWithParameters model;
 
-    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
-        super(real, realItemRule, hostItemRules);
+    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
+        super(real, realItemRule, rendersAsEntity, hostItemRules);
         this.host = host;
         this.hosts = Collections.singletonList(this.host);
         this.hostReplacement = hostReplacement;
diff --git a/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java b/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java
index cab6ae5e7350638faf1537cc7f60cdfea7133d4f..85bd1d479eee6afcadff7f905548e43ecfdcb649 100644
--- a/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java
+++ b/src/main/java/nl/martijnmuijsers/paper/data/SuCraftTagsProvider.java
@@ -5,6 +5,7 @@ package nl.martijnmuijsers.paper.data;
 import com.google.common.collect.Maps;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
+import net.minecraft.data.tags.TagsProvider;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -18,6 +19,7 @@ import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Stream;
 
 /**
  * Based on {@link net.minecraft.data.tags.TagsProvider}
@@ -102,7 +104,7 @@ public abstract class SuCraftTagsProvider<T> {
 
     protected TagAppender<T> tag(TagKey<T> tag) {
         TagBuilder tagBuilder = this.getOrCreateRawBuilder(tag);
-        return new TagAppender<>(tagBuilder);
+        return new TagAppender<>(tagBuilder, this.registry);
     }
 
     protected TagBuilder getOrCreateRawBuilder(TagKey<T> tag) {
@@ -111,9 +113,16 @@ public abstract class SuCraftTagsProvider<T> {
 
     protected static class TagAppender<T> {
         private final TagBuilder builder;
+        private final Registry<T> registry;
 
-        TagAppender(TagBuilder builder) {
+        TagAppender(TagBuilder builder, Registry<T> registry) {
             this.builder = builder;
+            this.registry = registry;
+        }
+
+        public TagAppender<T> add(T element) {
+            this.builder.addElement(this.registry.getKey(element));
+            return this;
         }
 
         @SafeVarargs
@@ -139,6 +148,15 @@ public abstract class SuCraftTagsProvider<T> {
             this.builder.addOptionalTag(id);
             return this;
         }
+
+        @SafeVarargs
+        public final TagAppender<T> add(T... elements) {
+            Stream.<T>of(elements).map(this.registry::getKey).forEach((id) -> {
+                this.builder.addElement(id);
+            });
+            return this;
+        }
+
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 97254f7f935cc7f9bdb689a2b73dd322f2565657..042cf5fe01c2ad05d8f64278916c3c9c2502b06b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -110,6 +110,7 @@ public class SuCraftItems {
     public static final Item ORANGE_MAPLE_LEAVES = registerLeaves(SuCraftBlocks.ORANGE_MAPLE_LEAVES, "Orange Maple", () -> Items.ACACIA_LEAVES);
     public static final Item YELLOW_MAPLE_LEAVES = registerLeaves(SuCraftBlocks.YELLOW_MAPLE_LEAVES, "Yellow Maple", () -> Items.ACACIA_LEAVES);
     public static final Item DIRT_SLAB = registerSlab(SuCraftBlocks.DIRT_SLAB, "Dirt");
+    public static final Item SNOWY_STONE_BRICK_SLAB = registerSlab(SuCraftBlocks.SNOWY_STONE_BRICK_SLAB, "Snowy Stone Brick");
 
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 8e267774bf63fbc36203392f67ea7ef0ed132a2d..66f0a66074cc3278ecc082903001a5029fbb388b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 55;
+    private static final int currentResourcePackVersion = 57;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
