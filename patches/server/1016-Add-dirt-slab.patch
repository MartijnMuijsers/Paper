From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 10 Jul 2022 03:01:05 +0200
Subject: [PATCH] Add dirt slab


diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index bc5323cd678123e49f627d20a8823a87e388107a..a7d343779112038cf6a7a8d716b1aa671f30abb4 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -11,6 +11,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.InfestedBlock;
 import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.RotatedPillarBlock;
+import net.minecraft.world.level.block.SlabBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.material.Material;
@@ -22,6 +23,7 @@ import nl.martijnmuijsers.paper.block.replacementrule.SingleMultiStateRealBlockR
 import nl.martijnmuijsers.paper.block.replacementrule.SingleStateRealBlockReplacementRule;
 import nl.martijnmuijsers.paper.block.replacementrule.BlockReplacementRule;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
 import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
@@ -158,6 +160,7 @@ public class SuCraftBlocks {
     public static final Block RED_MAPLE_LEAVES = registerLeaves("red_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_RED);
     public static final Block ORANGE_MAPLE_LEAVES = registerLeaves("orange_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_ORANGE);
     public static final Block YELLOW_MAPLE_LEAVES = registerLeaves("yellow_maple", Blocks.OAK_LEAVES, Blocks.OAK_SAPLING/*TODO make drop specific sapling*/, Blocks.OAK_LEAVES, MaterialColor.COLOR_YELLOW);
+    public static final Block DIRT_SLAB = registerRealSlab("dirt", null, Blocks.WAXED_CUT_COPPER_SLAB, Blocks.CUT_COPPER_SLAB, Blocks.MUD_BRICK_SLAB, BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F).sound(SoundType.GRAVEL));
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
@@ -343,7 +346,7 @@ public class SuCraftBlocks {
             leavesType + "_leaves",
             new SingleMultiStateRealBlockReplacementRuleBuilder()
                 .withOneNonWaterLoggedAndOneWaterLoggedHost(host)
-                .withFallback(fallback) // TODO this is incorrect, it should maintain the waterloggedness (or just any state for that matter)
+                .withAnalogousFallbacks(fallback)
                 .withModelCreation(Model.OneTextureCube.defaultCreation().withNoParameters())
                 .withFullBlockBoundingBoxItem(),
             new LeavesBlock(BlockBehaviour.Properties.of(Material.LEAVES, materialColor).strength(0.2F).randomTicks().sound(SoundType.GRASS).noOcclusion().isValidSpawn(Blocks::ocelotOrParrot).isSuffocating(Blocks::never).isViewBlocking(Blocks::never)),
@@ -351,6 +354,27 @@ public class SuCraftBlocks {
         );
     }
 
+    /**
+     * Based on {@link Blocks#OAK_SLAB}
+     * @param textureBlock If null, will be the same as the given type
+     */
+    private static @NotNull Block registerRealSlab(@NotNull String type, @Nullable String textureBlock, @NotNull Block host, @NotNull Block hostReplacement, @NotNull Block fallback, @NotNull BlockBehaviour.Properties properties) {
+        if (textureBlock == null) {
+            textureBlock = type;
+        }
+        return register(
+            type + "_slab",
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
+                .withAnalogousHosts(host, hostReplacement)
+                .withAnalogousFallbacks(fallback)
+                .withDefaultModelCreationsForSlabReplacedBySlab(NamespacedKeyWithoutIntention.minecraft(textureBlock))
+                .withRealItemRuleFromHostBlock()
+                .withHostItemRuleFromHostBlockAndHostReplacementBlock(),
+            new SlabBlock(properties),
+            SuCraftBlockLoot::dropSelf
+        );
+    }
+
     public static Block bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         return SNOWY_STONE_BRICKS;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
index b5e08221a8a35104c501894a47eaed49d4b754de..a7043113114708d26525592b2fce49d03215f4b7 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -152,6 +152,8 @@ public interface BlockReplacementRule {
 
     /**
      * This method will assume (not verify) that the given state is in fact a host of this rule
+     * <br>
+     * This method will be called multiple times, so it should never compute anything twice
      */
     @NotNull ModelWithParameters getModel(@NotNull BlockState host);
 
@@ -180,6 +182,7 @@ public interface BlockReplacementRule {
      * Returns a state of the real block that is representative of the real block (by default, this is the default state of the real block, which should be appropriate in most cases, but we may wish to override it in the future)
      * <br>
      * This is currently used as the item model if this real block has a corresponding block item
+     *
      * @see #getRealItemModel
      */
     default @NotNull BlockState getRepresentativeRealState() {
@@ -196,11 +199,34 @@ public interface BlockReplacementRule {
     }
 
     default void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
-        for (@NotNull BlockState host : this.getHosts()) {
+        @NotNull List<@NotNull BlockState> hosts = this.getHosts();
+        @NotNull List<@NotNull Block> hostBlocks = hosts.stream().map(BlockState::getBlock).distinct().toList();
+        boolean everyStateOfTheHostBlockHasTheSameModel =
+            hostBlocks.size() == 1 // All host states have the same block
+                && (
+                hostBlocks.get(0).getStateDefinition().getPossibleStates().size() == 1 // The host block has only one state
+                    || (
+                    hostBlocks.get(0).getStateDefinition().getPossibleStates().size() == hosts.size() // All host block states are hosts of this rule
+                        && hosts.stream().map(this::getModel).distinct().count() == 1 // All hosts of this rule have the same model
+                )
+            );
+        forEachHostBlock: for (@NotNull Block hostBlock : hostBlocks) {
+            for (@NotNull BlockState hostBlockState : hostBlock.getStateDefinition().getPossibleStates()) {
+                if (!hosts.contains(hostBlockState)) {
+                    continue forEachHostBlock;
+                }
+            }
+            // We now know all host block states are hosts of this rule
+            // We clear any existing variant strings because we know we will be writing all new ones anyway
+            @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(hostBlock)).withEmptyIntention();
+            @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
+            minecraftBlockStates.clearVariants();
+        }
+        for (@NotNull BlockState host : hosts) {
             @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(host.getBlock())).withEmptyIntention();
             @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
             @NotNull ModelWithParameters model = this.getModel(host);
-            if (host.getBlock().getStateDefinition().getPossibleStates().size() == 1) {
+            if (everyStateOfTheHostBlockHasTheSameModel) {
                 minecraftBlockStates.setNoVariantModel(model, resourcePack, false);
             } else {
                 minecraftBlockStates.setModel(host, model, resourcePack, false);
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
index dbbfec0e26a7333afd15b519b6b6d9a619a13a99..85a61a37d5b67da2c22dbe698bd01232673abd29 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
@@ -3,17 +3,24 @@
 package nl.martijnmuijsers.paper.block.replacementrule;
 
 import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import net.minecraft.world.level.block.state.properties.SlabType;
 import nl.martijnmuijsers.paper.block.UsedHostBlockStates;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreationWithParameters;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelParameters;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.Texture;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
+import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIntention;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -81,6 +88,15 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
         return this.withHostReplacement(singleStateReplacementRule.getHostReplacement());
     }
 
+    /**
+     * Sets the hosts and their host replacements based automatically on the real state's properties, assuming the properties of the real block, the host block and the host replacement block are exactly the same (for example, all three are slabs)
+     */
+    default @NotNull B withAnalogousHosts(@NotNull Block hostBlock, @NotNull Block hostReplacementBlock) {
+        return this
+            .withHostForRealState(hostBlock::withPropertiesOf)
+            .withHostReplacementForHost(hostReplacementBlock::withPropertiesOf);
+    }
+
     /**
      * Sets the host and host replacement based automatically on the next unused state out of the given states
      */
@@ -186,6 +202,13 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
         return this.withFallback(singleStateReplacementRule.getFallback());
     }
 
+    /**
+     * Sets the fallbacks based automatically on the real state's properties, assuming the properties of the real block and the fallback block are exactly the same (for example, both are slabs, or both are leaves)
+     */
+    default @NotNull B withAnalogousFallbacks(@NotNull Block fallbackBlock) {
+        return this.withFallbackForRealState(fallbackBlock::withPropertiesOf);
+    }
+
     /**
      * One host overriding model for all real states
      */
@@ -243,6 +266,67 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
         });
     }
 
+    /**
+     * @param fullBlockTextureAndModelKey A key pointing to the full block texture (used as texture basis for the top and bottom slabs), and also pointing to the full block model (used directly as the model for the double slab)
+     * @see #withDefaultModelCreationsForSlabReplacedBySlab
+     */
+    default @NotNull B withDefaultModelCreationsForSlabReplacedBySlab(@NotNull NamespacedKeyWithoutIntention fullBlockTextureAndModelKey) {
+        return this.withDefaultModelCreationsForSlabReplacedBySlab((intention, key) -> new Model(ResourcePackAssetIntention.BLOCK, fullBlockTextureAndModelKey, ModelContent.Existing.getInstance()), new Texture(ResourcePackAssetIntention.BLOCK, fullBlockTextureAndModelKey, TextureContent.Existing.getInstance()), null, null, null, null);
+    }
+
+    /**
+     * Set a single host overriding model for the host block, that as a single model encapsulates a slab: the mechanism for this is provided by the parent model already)
+     *
+     * @param sideTexture             A texture of a block that will be used as a the texture of this slab (the mechanism for this is provided by the parent model already)
+     * @param bottomHalfBottomTexture Will be {@param sideTexture} if null
+     * @param bottomHalfTopTexture    Will be {@param bottomHalfBottomTexture} if null
+     * @param topHalfBottomTexture    Will be {@param bottomHalfTopTexture} if null
+     * @param topHalfTopTexture       Will be {@param bottomHalfBottomTexture} if null
+     */
+    default @NotNull B withDefaultModelCreationsForSlabReplacedBySlab(@NotNull ModelCreation doubleSlabModelCreation, @NotNull Texture sideTexture, @Nullable Texture bottomHalfBottomTexture, @Nullable Texture bottomHalfTopTexture, @Nullable Texture topHalfBottomTexture, @Nullable Texture topHalfTopTexture) {
+        if (bottomHalfBottomTexture == null) {
+            bottomHalfBottomTexture = sideTexture;
+        }
+        if (bottomHalfTopTexture == null) {
+            bottomHalfTopTexture = bottomHalfBottomTexture;
+        }
+        if (topHalfBottomTexture == null) {
+            topHalfBottomTexture = bottomHalfTopTexture;
+        }
+        if (topHalfTopTexture == null) {
+            topHalfTopTexture = bottomHalfBottomTexture;
+        }
+        final @NotNull Texture finalBottomHalfBottomTexture = bottomHalfBottomTexture;
+        final @NotNull Texture finalBottomHalfTopTexture = bottomHalfTopTexture;
+        final @NotNull Texture finalTopHalfBottomTexture = topHalfBottomTexture;
+        final @NotNull Texture finalTopHalfTopTexture = topHalfTopTexture;
+        return this.withModelCreationForRealState(realState -> {
+            switch (realState.getValue(BlockStateProperties.SLAB_TYPE)) {
+//                case BOTTOM, DOUBLE, TOP -> {
+//                    return ((ModelCreation) (intention, key) -> {
+//                        System.out.println("Creating model for intention and key: " + intention + " and " + key);
+//                        var toReturn = Model.creation(ModelContent.BottomSlab.creationCompanion.creation(finalBottomHalfBottomTexture, sideTexture, finalBottomHalfTopTexture)).create(intention, key);
+//                        System.out.println("Got: " + toReturn.getKeyWithIntention());
+//                        var modelCreation = (ModelContent.BottomSlab) ModelContent.BottomSlab.creationCompanion.creation(finalBottomHalfBottomTexture, sideTexture, finalBottomHalfTopTexture).create(intention, key);
+//                        System.out.println("Based on content: " + modelCreation.bottomTexture.getKeyWithIntention() + " , " + modelCreation.sideTexture.getKeyWithIntention() + " , " + modelCreation.topTexture.getKeyWithIntention());
+//                        return toReturn;
+//                    }).withNoParameters();
+//                }
+                case BOTTOM -> {
+                    return Model.creation(ModelContent.BottomSlab.creationCompanion.creation(finalTopHalfBottomTexture, sideTexture, finalTopHalfTopTexture)).withNoParameters();
+                }
+                case DOUBLE -> {
+                    return doubleSlabModelCreation.withNoParameters();
+                }
+                case TOP -> {
+                    return ((ModelCreation) (intention, key) -> Model.creation(ModelContent.TopSlab.creationCompanion.creation(finalTopHalfBottomTexture, sideTexture, finalTopHalfTopTexture)).create(intention, new ResourceLocation(key.getNamespace(), key.getPath() + "_top"))).withNoParameters();
+                }
+                default ->
+                    throw new IllegalStateException("Unknown slab type: " + realState.getValue(BlockStateProperties.SLAB_TYPE));
+            }
+        });
+    }
+
     /**
      * Sets the given real item rule as the real item rule of this builder
      */
@@ -267,6 +351,12 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
      */
     @NotNull B withFullBlockBoundingBoxItem();
 
+    /**
+     * Sets the given real item rule of this builder to a rule with the fallback being the item form of the fallback's block for the real block's default state,
+     * and with the low and high ping host being the item form of the host's block for the real block's default state
+     */
+    @NotNull B withRealItemRuleFromHostBlock();
+
     /**
      * Adds the given host item rule to the host item rules in this builder
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
index 97561597abab4e314360922fe4e183281539e079..e98876d48ff53e894cc559447a56d80b29f4e3a0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
@@ -147,6 +147,14 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
         return this;
     }
 
+    @Override
+    public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withRealItemRuleFromHostBlock() {
+        @NotNull Supplier<@NotNull Item> hostSupplier = () -> this.hostForRealState.apply(this.real.defaultBlockState()).getBlock().asItem();
+        @NotNull Supplier<@NotNull Item> fallbackSupplier = () -> this.fallbackForRealState.apply(this.real.defaultBlockState()).getBlock().asItem();
+        this.justInTimeRealItemRuleSupplier = () -> new RealItemReplacementRule(hostSupplier, hostSupplier, fallbackSupplier);
+        return this;
+    }
+
     @Override
     public @NotNull SingleMultiStateRealBlockReplacementRuleBuilder withHostItemRule(@NotNull HostItemReplacementRule hostItemRule) {
         this.justInTimeHostItemRuleSuppliers.add(() -> hostItemRule);
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
index e5ac8db1a3969c0c58438d18a02ffae9e1dfc484..013807b1ba51a2e02824e4cfc62a129acd6e79ff 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/Model.java
@@ -135,18 +135,64 @@ public class Model extends ResourcePackIntentionedAssetDataByContent<ModelConten
 
         private BottomTopPillarCube() {}
 
-        private static final @NotNull ModelCreation DEFAULT_CREATION = creation(ModelContent.BottomTopPillarCube.defaultCreation());
+        private static final @NotNull ModelCreation DEFAULT_CREATION = creation(ModelContent.BottomTopPillarCube.creationCompanion.defaultCreation());
 
         public static @NotNull ModelCreation defaultCreation() {
             return DEFAULT_CREATION;
         }
 
         public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
-            return creation(ModelContent.BottomTopPillarCube.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+            return creation(ModelContent.BottomTopPillarCube.creationCompanion.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
         }
 
         public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
-            return creation(ModelContent.BottomTopPillarCube.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+            return creation(ModelContent.BottomTopPillarCube.creationCompanion.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+        }
+
+    }
+
+    /**
+     * @see ModelContent.BottomSlab
+     */
+    public static final class BottomSlab {
+
+        private BottomSlab() {}
+
+        private static final @NotNull ModelCreation DEFAULT_CREATION = creation(ModelContent.BottomSlab.creationCompanion.defaultCreation());
+
+        public static @NotNull ModelCreation defaultCreation() {
+            return DEFAULT_CREATION;
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
+            return creation(ModelContent.BottomSlab.creationCompanion.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
+            return creation(ModelContent.BottomSlab.creationCompanion.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+        }
+
+    }
+
+    /**
+     * @see ModelContent.TopSlab
+     */
+    public static final class TopSlab {
+
+        private TopSlab() {}
+
+        private static final @NotNull ModelCreation DEFAULT_CREATION = creation(ModelContent.TopSlab.creationCompanion.defaultCreation());
+
+        public static @NotNull ModelCreation defaultCreation() {
+            return DEFAULT_CREATION;
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
+            return creation(ModelContent.TopSlab.creationCompanion.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
+        }
+
+        public static @NotNull ModelCreation defaultCreationWithAlternativeTopBottom(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
+            return creation(ModelContent.TopSlab.creationCompanion.defaultCreationWithAlternativeBottomTop(bottomTexture, topTexture));
         }
 
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index b8649f2d45979d2810caa233b23d23b675c618c6..7422bebadc44ce98f14f58fa2e9f09dd69f07afe 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -183,58 +183,145 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
     }
 
     /**
-     * A form of {@link ModelContent}: a full cube with one texture for the bottom, one textures for the x- and z-oriented sides, and one texture for the top
+     * An abstract form of {@link ModelContent}: with one texture for the bottom, one textures for the x- and z-oriented sides, and one texture for the top
      */
-    public static final class BottomTopPillarCube extends ModelContent {
-
-        private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("cube_bottom_top"), Existing.getInstance());
+    public static abstract class AbstractBottomTopPillarCube extends ModelContent {
 
-        private final @NotNull Texture bottomTexture;
-        private final @NotNull Texture sideTexture;
-        private final @NotNull Texture topTexture;
+        public final @NotNull Texture bottomTexture;
+        public final @NotNull Texture sideTexture;
+        public final @NotNull Texture topTexture;
 
-        public BottomTopPillarCube(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+        public AbstractBottomTopPillarCube(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
             super();
             this.bottomTexture = bottomTexture;
             this.sideTexture = sideTexture;
             this.topTexture = topTexture;
         }
 
+        protected abstract @NotNull Model getParent();
+
         @Override
         void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
-            resourcePackModel.setParent(parent);
+            resourcePackModel.setParent(getParent());
             resourcePackModel.setBottomTopTextures(this.bottomTexture, this.sideTexture, this.topTexture);
             this.bottomTexture.addToResourcePack(resourcePack, false);
             this.sideTexture.addToResourcePack(resourcePack, false);
             this.topTexture.addToResourcePack(resourcePack, false);
         }
 
-        public static @NotNull BottomTopPillarCube create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key, @NotNull TextureCreation bottomTexture, @NotNull TextureCreation sideTexture, @NotNull TextureCreation topTexture) {
-            return new BottomTopPillarCube(bottomTexture.create(intention, key), sideTexture.create(intention, key), topTexture.create(intention, key));
+        public static abstract class CreationCompanion<M extends AbstractBottomTopPillarCube> {
+
+            protected abstract @NotNull M construct(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture);
+
+            public @NotNull M create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key, @NotNull TextureCreation bottomTexture, @NotNull TextureCreation sideTexture, @NotNull TextureCreation topTexture) {
+                return this.construct(bottomTexture.create(intention, key), sideTexture.create(intention, key), topTexture.create(intention, key));
+            }
+
+            public @NotNull ModelContentCreation creation(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+                return (intention, key) -> this.construct(bottomTexture, sideTexture, topTexture);
+            }
+
+            public @NotNull ModelContentCreation creation(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation sideTexture, @NotNull TextureCreation topTexture) {
+                return (intention, key) -> this.create(intention, key, bottomTexture, sideTexture, topTexture);
+            }
+
+            private final @NotNull ModelContentCreation DEFAULT_CREATION = creation(Texture.defaultBottomCreation(), Texture.defaultCreation(), Texture.defaultTopCreation());
+
+            public @NotNull ModelContentCreation defaultCreation() {
+                return this.DEFAULT_CREATION;
+            }
+
+            public @NotNull ModelContentCreation defaultCreationWithAlternativeBottomTop(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
+                return this.defaultCreationWithAlternativeBottomTop((intention, key) -> bottomTexture, (intention, key) -> topTexture);
+            }
+
+            public @NotNull ModelContentCreation defaultCreationWithAlternativeBottomTop(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
+                return (intention, key) -> this.create(intention, key, bottomTexture, Texture.defaultCreation(), topTexture);
+            }
+
         }
 
-        public static @NotNull ModelContentCreation creation(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
-            return (intention, key) -> new BottomTopPillarCube(bottomTexture, sideTexture, topTexture);
+    }
+
+    /**
+     * A form of {@link ModelContent}: a full cube with one texture for the bottom, one textures for the x- and z-oriented sides, and one texture for the top
+     */
+    public static final class BottomTopPillarCube extends AbstractBottomTopPillarCube {
+
+        private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("cube_bottom_top"), Existing.getInstance());
+
+        public BottomTopPillarCube(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+            super(bottomTexture, sideTexture, topTexture);
         }
 
-        public static @NotNull ModelContentCreation creation(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation sideTexture, @NotNull TextureCreation topTexture) {
-            return (intention, key) -> create(intention, key, bottomTexture, sideTexture, topTexture);
+        @Override
+        protected @NotNull Model getParent() {
+            return parent;
         }
 
-        private static final @NotNull ModelContentCreation DEFAULT_CREATION = creation(Texture.defaultBottomCreation(), Texture.defaultCreation(), Texture.defaultTopCreation());
+        public static final @NotNull CreationCompanion<BottomTopPillarCube> creationCompanion = new CreationCompanion<>() {
 
-        public static @NotNull ModelContentCreation defaultCreation() {
-            return DEFAULT_CREATION;
+            @Override
+            protected @NotNull BottomTopPillarCube construct(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+                return new BottomTopPillarCube(bottomTexture, sideTexture, topTexture);
+            }
+
+        };
+
+    }
+
+    /**
+     * A form of {@link ModelContent}: a bottom half slab with one texture for the bottom, one textures for the x- and z-oriented sides (representing the texture along the entire face, of which the bottom half will be used), and one texture for the top
+     */
+    public static final class BottomSlab extends AbstractBottomTopPillarCube {
+
+        private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("slab"), Existing.getInstance());
+
+        public BottomSlab(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+            super(bottomTexture, sideTexture, topTexture);
+        }
+
+        @Override
+        protected @NotNull Model getParent() {
+            return parent;
         }
 
-        public static @NotNull ModelContentCreation defaultCreationWithAlternativeBottomTop(@NotNull Texture bottomTexture, @NotNull Texture topTexture) {
-            return defaultCreationWithAlternativeBottomTop((intention, key) -> bottomTexture, (intention, key) -> topTexture);
+        public static final @NotNull CreationCompanion<BottomSlab> creationCompanion = new CreationCompanion<>() {
+
+            @Override
+            protected @NotNull BottomSlab construct(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+                return new BottomSlab(bottomTexture, sideTexture, topTexture);
+            }
+
+        };
+
+    }
+
+    /**
+     * A form of {@link ModelContent}: a top half slab with one texture for the bottom, one textures for the x- and z-oriented sides (representing the texture along the entire face, of which the top half will be used), and one texture for the top
+     */
+    public static final class TopSlab extends AbstractBottomTopPillarCube {
+
+        private static final @NotNull Model parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("slab_top"), Existing.getInstance());
+
+        public TopSlab(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+            super(bottomTexture, sideTexture, topTexture);
         }
 
-        public static @NotNull ModelContentCreation defaultCreationWithAlternativeBottomTop(@NotNull TextureCreation bottomTexture, @NotNull TextureCreation topTexture) {
-            return (intention, key) -> create(intention, key, bottomTexture, Texture.defaultCreation(), topTexture);
+        @Override
+        protected @NotNull Model getParent() {
+            return parent;
         }
 
+        public static final @NotNull CreationCompanion<TopSlab> creationCompanion = new CreationCompanion<>() {
+
+            @Override
+            protected @NotNull TopSlab construct(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture) {
+                return new TopSlab(bottomTexture, sideTexture, topTexture);
+            }
+
+        };
+
     }
 
     /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 9f6e78726ba2a02ed112083aedafed4efe53d439..97254f7f935cc7f9bdb689a2b73dd322f2565657 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -109,6 +109,7 @@ public class SuCraftItems {
     public static final Item RED_MAPLE_LEAVES = registerLeaves(SuCraftBlocks.RED_MAPLE_LEAVES, "Red Maple", () -> Items.ACACIA_LEAVES);
     public static final Item ORANGE_MAPLE_LEAVES = registerLeaves(SuCraftBlocks.ORANGE_MAPLE_LEAVES, "Orange Maple", () -> Items.ACACIA_LEAVES);
     public static final Item YELLOW_MAPLE_LEAVES = registerLeaves(SuCraftBlocks.YELLOW_MAPLE_LEAVES, "Yellow Maple", () -> Items.ACACIA_LEAVES);
+    public static final Item DIRT_SLAB = registerSlab(SuCraftBlocks.DIRT_SLAB, "Dirt");
 
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
@@ -201,6 +202,13 @@ public class SuCraftItems {
         return registerBlock(block, typeDisplayName + " Leaves", CreativeModeTab.TAB_DECORATIONS, rule -> rule.withHighPingHost(highPingHostSupplier));
     }
 
+    /**
+     * Based on {@link Items#OAK_SLAB}
+     */
+    private static @NotNull Item registerSlab(@NotNull Block block, @NotNull String typeDisplayName) {
+        return registerBlock(block, typeDisplayName + " Slab", CreativeModeTab.TAB_BUILDING_BLOCKS);
+    }
+
     public static Item bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         // Make sure that the item replacement rule for block items for which the block has some hosts that are potentially placed by vanilla items is registered with those vanilla items
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
index 75a8c56d0c68f05b964491e270a8b371ba51037a..e086aa8aa6b0099b8d5619e9caf4c1eef4d940d2 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
@@ -14,6 +14,7 @@ import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
 import java.util.Map;
 
 /**
@@ -52,6 +53,12 @@ public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset
     @Override
     public void setModel(@NotNull String variant, @NotNull ModelWithParameters model) {
         @NotNull JsonObject variantsJson = this.getOrCreateVariantsJson();
+        for (String alreadyExistingVariant : new ArrayList<>(variantsJson.keySet())) {
+            // This check is not perfect because variant properties may be in a different order, may need to improve later
+            if (alreadyExistingVariant.contains(variant)) {
+                variantsJson.remove(alreadyExistingVariant);
+            }
+        }
         @NotNull JsonObject variantJson;
         if (variantsJson.has(variant)) {
             variantJson = variantsJson.getAsJsonObject(variant);
@@ -71,4 +78,9 @@ public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset
         this.setDirty();
     }
 
+    @Override
+    public void clearVariants() {
+        this.json.add(KeyConstants.variants, new JsonObject());
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
index 0033be49aa1e07438a50b1c062283b9a1dee5389..db3828b4eb8488add15137f6b82f11f3e3c3d45b 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
@@ -51,4 +51,9 @@ public interface MutableResourcePackBlockStates extends MutableJsonResourcePackA
         this.setModel(KeyConstants.noVariant, model);
     }
 
+    /**
+     * Removes all entries in the variants JSON object (it will be an empty object afterwards - which is not valid for a variants JSON object, so variant entries must be added afterwards)
+     */
+    void clearVariants();
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 6b628ff76a3a0105fa2037cf0e98f68189a3997d..8e267774bf63fbc36203392f67ea7ef0ed132a2d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 52;
+    private static final int currentResourcePackVersion = 55;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
