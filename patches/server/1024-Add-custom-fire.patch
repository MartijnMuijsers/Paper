From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 14 Jul 2022 20:11:02 +0200
Subject: [PATCH] Add custom fire


diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index c72ded1195839bac41d72554a8685a514f48dca4..3ac78947299f8c88ea8aeaf0afd07f16e355fcfc 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -172,6 +172,8 @@ public class Block extends BlockBehaviour implements ItemLike {
      */
     public @Nullable BlockReplacementRule replacementRule = null;
 
+    public @Nullable String customFireType;
+
     public @Nullable Supplier<@org.jetbrains.annotations.Nullable LootTable> customLootTableSupplier = null;
 
     public @Nullable LootTable createCustomLootTable() {
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 8efa8580cc0c153f838efd122c4e496dee64aba8..fab6eb7cd42906303980bff81be7b4db86499d0a 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -1223,6 +1223,13 @@ public class Blocks {
                 block.replacementRule.writeToStateIdReplacementArrays();
             }
         }
+        // Special case: we want to make sure we replace (for players with the resource pack) all fire states with age greater than 0 to age 0 (due to the way we write the fire blockstates asset)
+        for (BlockState fireBlockState : Blocks.FIRE.getStateDefinition().getPossibleStates()) {
+            int id = Block.BLOCK_STATE_REGISTRY.getId(fireBlockState);
+            if (Block.stateIdReplacementArrayWithResourcePack[id] == id && fireBlockState.getValue(BlockStateProperties.AGE_15) > 0) { // If not replaced yet before and with age greater than 0
+                Block.stateIdReplacementArrayWithResourcePack[id] = Block.BLOCK_STATE_REGISTRY.getId(Blocks.FIRE.withPropertiesOf(fireBlockState).setValue(BlockStateProperties.AGE_15, 0));
+            }
+        }
         // TEMP TODO REMOVE
 //        for (BlockState state : Blocks.NOTE_BLOCK.getStateDefinition().getPossibleStates()) {
 //            if (!state.equals(Blocks.NOTE_BLOCK.defaultBlockState())) {
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index 21d3632bd5e264f3fa11ff59f34a5ffe78467118..4523ea1483936c615c99a8850355a4a11c98c526 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -6,12 +6,15 @@ import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.FireBlock;
 import net.minecraft.world.level.block.InfestedBlock;
 import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.RotatedPillarBlock;
 import net.minecraft.world.level.block.SlabBlock;
+import net.minecraft.world.level.block.SoulFireBlock;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.material.Material;
@@ -402,6 +405,11 @@ public class SuCraftBlocks {
     public static final Block QUARTZ_PILLAR_SLAB = registerFakeVanillaStonePillarSlab(Blocks.QUARTZ_PILLAR, "quartz", Blocks.QUARTZ_SLAB);
     public static final Block QUARTZ_BRICK_SLAB = registerFakeVanillaBrickSlab(Blocks.QUARTZ_BRICKS, "quartz", Blocks.QUARTZ_SLAB);
     public static final Block DRIED_KELP_SLAB = registerFakeSlab(Blocks.DRIED_KELP_BLOCK, null, "dried_kelp", NamespacedKeyWithoutIntention.minecraft("dried_kelp_block"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_side"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_bottom"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_top"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_bottom"), NamespacedKeyWithoutIntention.minecraft("dried_kelp_top"), Blocks.DARK_PRISMARINE_SLAB, null).mineableWithHoe();
+    public static final Block RED_FIRE = registerFire("red", Blocks.FIRE, DyeColor.RED.getMaterialColor());
+    public static final Block ORANGE_FIRE = registerFire("orange", Blocks.FIRE, DyeColor.ORANGE.getMaterialColor());
+    public static final Block YELLOW_FIRE = registerFire("yellow", Blocks.FIRE, DyeColor.YELLOW.getMaterialColor());
+    public static final Block LIME_FIRE = registerFire("lime", Blocks.SOUL_FIRE, DyeColor.LIME.getMaterialColor());
+    public static final Block GREEN_FIRE = registerFire("green", Blocks.SOUL_FIRE, DyeColor.GREEN.getMaterialColor());
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRuleBuilder<?, ?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
@@ -846,6 +854,22 @@ public class SuCraftBlocks {
         );
     }
 
+    /**
+     * Based on {@link Blocks#FIRE}
+     */
+    private static @NotNull Block registerFire(@NotNull String fireType, @NotNull Block fallback, @NotNull MaterialColor materialColor) {
+        @NotNull Block block = register(
+            fireType + "_fire",
+            new SingleMultiStateRealBlockReplacementRuleBuilder()
+                .withFireHost()
+                .withFallback(fallback),
+            new SoulFireBlock(BlockBehaviour.Properties.of(Material.FIRE, materialColor).noCollission().instabreak().sound(SoundType.WOOL).lightLevel(state -> 10)),
+            () -> null
+        );
+        block.customFireType = fireType;
+        return block;
+    }
+
     public static Block bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         return SNOWY_STONE_BRICKS;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java
index 22ff7d33bd62ccd41dcbd686c6b6a645ffd2d4f6..34357c237d9a45e91c9de0b5731fcccae3b27447 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java
@@ -6,11 +6,14 @@ import it.unimi.dsi.fastutil.Pair;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.FireBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -76,4 +79,38 @@ public final class UsedHostBlockStates {
         throw new IllegalStateException("Tried to generate unused host block state, but all possible block states (" + possibleBlockStates + ") are already in use");
     }
 
+    public static @NotNull BlockState generateUnusedFireState() {
+        @NotNull List<@NotNull BlockState> unusedStates = Blocks.FIRE
+            .getStateDefinition()
+            .getPossibleStates().stream()
+            .filter(state -> !usedBlockStates.contains(state) // Must not be in use yet
+                && state.getValue(BlockStateProperties.AGE_15) != 0) // Must not have an age of 0 (this is the host replacement for all fire hosts)
+            .toList();
+        if (unusedStates.isEmpty()) {
+            throw new IllegalStateException("Tried to generated unused fire host block state, but all possible acceptable block states are already in use");
+        }
+        @Nullable BlockState stateToUse = unusedStates.stream()
+            .filter(state -> !state.getValue(BlockStateProperties.UP) && !state.getValue(BlockStateProperties.EAST) && !state.getValue(BlockStateProperties.WEST) && !state.getValue(BlockStateProperties.NORTH) && !state.getValue(BlockStateProperties.SOUTH)) // This has a nice hitbox of the bottom
+            .findAny().orElse(
+                unusedStates.stream()
+                    .filter(state -> state.getValue(BlockStateProperties.EAST) && state.getValue(BlockStateProperties.WEST) && state.getValue(BlockStateProperties.NORTH) && state.getValue(BlockStateProperties.SOUTH)) // This has an acceptable hitbox of all 4 sides (both including and excluding the top)
+                    .findAny().get()
+            );
+        usedBlockStates.add(stateToUse);
+        return stateToUse;
+//        int hostAge = 1;
+//        while (usedBlockStates.contains(block.defaultBlockState().setValue(BlockStateProperties.AGE_15, hostAge))) {
+//            hostAge++;
+//            if (hostAge > 15) {
+//                throw new IllegalStateException("Tried to generate unused fire host age for block " + block + ", but all possible ages are already in use");
+//            }
+//        }
+//        for (BlockState fireState : block.getStateDefinition().getPossibleStates()) {
+//            if (fireState.getValue(BlockStateProperties.AGE_15) == hostAge) {
+//                usedBlockStates.add(fireState);
+//            }
+//        }
+//        return hostAge;
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
index 76f4fc6492b9fc1b3704792af215525b8a0c98f2..eb069f2015ce2b9dedf1c692565624f7fc9d1c6e 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRule.java
@@ -18,7 +18,9 @@ import nl.martijnmuijsers.paper.blockanditemdata.model.ModelContent;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelParameters;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
+import nl.martijnmuijsers.paper.blockanditemdata.texture.TextureContent;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
+import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
@@ -52,6 +54,8 @@ public interface BlockReplacementRule {
 
     boolean hasAsReal(@NotNull Block potentialReal);
 
+    boolean isFire();
+
     boolean rendersAsEntity();
 
     /**
@@ -176,8 +180,9 @@ public interface BlockReplacementRule {
      * This method will be called multiple times, so it should never compute anything twice
      * <br>
      * May or may not return null if {@link #rendersAsEntity} is true and the given {@param host} is not the host for the default state of the real block
+     * @throw IllegalStateException If this rule is for fire
      */
-    @NotNull ModelWithParameters getModel(@NotNull BlockState host);
+    @Nullable ModelWithParameters getModel(@NotNull BlockState host);
 
     @Nullable RealItemReplacementRule getRealItemRule();
 
@@ -342,6 +347,25 @@ public interface BlockReplacementRule {
     }
 
     default void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        if (this.isFire()) {
+            @NotNull BlockState host = this.getHost(this.getReal().defaultBlockState());
+            // Add the fire blockstates override
+            resourcePack.getAsset(ResourcePackAssetType.BLOCK_STATES, NamespacedKeyWithoutIntention.minecraft("fire").withEmptyIntention(), MutableResourcePackBlockStates.class).addFireModels(host, this.getReal().customFireType);
+            // Add the block models
+            for (int textureVariant = 0; textureVariant <= 1; textureVariant++) {
+                for (@NotNull String modelLocation : new String[] {"floor", "side", "side_alt"}) {
+                    new Model(
+                        ResourcePackAssetIntention.BLOCK,
+                        NamespacedKeyWithoutIntention.sucraft(this.getReal().customFireType + "_fire_" + modelLocation + textureVariant),
+                        ModelContent.Fire.defaultCreation(modelLocation).create(
+                            ResourcePackAssetIntention.BLOCK,
+                            ResourceLocation.sucraft(this.getReal().customFireType + "_fire_" + textureVariant)
+                        )
+                    ).addToResourcePack(resourcePack, false);
+                }
+            }
+            return;
+        }
         this.addBlockEntityItemToResourcePack(resourcePack);
         @NotNull List<@NotNull BlockState> hosts = this.getHosts();
         @NotNull List<@NotNull Block> hostBlocks = hosts.stream().map(BlockState::getBlock).distinct().toList();
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
index 0646a6d092902dd2fd1982bb858e8047cba7f2c0..f49ca0f313f34743a2e449c591d7437073a55582 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBase.java
@@ -3,7 +3,9 @@
 package nl.martijnmuijsers.paper.block.replacementrule;
 
 import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.FireBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import org.apache.commons.lang3.Validate;
 import org.jetbrains.annotations.NotNull;
@@ -21,6 +23,7 @@ import java.util.stream.Collectors;
 public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
 
     protected final @NotNull Block real;
+    protected final boolean isFire;
     protected final @Nullable RealItemReplacementRule realItemRule;
     protected final boolean rendersAsEntity;
     protected final @NotNull List<@NotNull HostItemReplacementRule> hostItemRules;
@@ -43,6 +46,7 @@ public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
 
     protected BlockReplacementRuleBase(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules) {
         this.real = real;
+        this.isFire = this.real instanceof BaseFireBlock;
         this.realItemRule = realItemRule;
         this.rendersAsEntity = rendersAsEntity;
         this.hostItemRules = Collections.unmodifiableList(hostItemRules);
@@ -58,6 +62,11 @@ public abstract class BlockReplacementRuleBase implements BlockReplacementRule {
         return this.real.equals(potentialReal);
     }
 
+    @Override
+    public boolean isFire() {
+        return this.isFire;
+    }
+
     @Override
     public @Nullable RealItemReplacementRule getRealItemRule() {
         return this.realItemRule;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
index f39a72dd4ea3d472d788924be8b58714213dba47..2cf1dd0c3f3bf8996ad4fe4f3ec27b4e81852e4f 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/BlockReplacementRuleBuilder.java
@@ -5,8 +5,10 @@ package nl.martijnmuijsers.paper.block.replacementrule;
 import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.FireBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.SlabType;
@@ -182,6 +184,22 @@ public interface BlockReplacementRuleBuilder<R extends BlockReplacementRule, B e
             });
     }
 
+    /**
+     * Takes an unused state of the host block for every combination of east, north, south, up and west (only disregarding age),
+     * and sets the host replacements to remove the age information of the host
+     */
+    default @NotNull B withFireHost() {
+        BlockState hostToUse = UsedHostBlockStates.generateUnusedFireState();
+        return this
+            .withHostForRealState(realState -> hostToUse)
+            .withHostReplacementForHost(host -> {
+                if (host.getValue(BlockStateProperties.AGE_15) > 0) {
+                    return Blocks.FIRE.withPropertiesOf(host).setValue(BlockStateProperties.AGE_15, 0);
+                }
+                return null;
+            });
+    }
+
     /**
      * One fallback for all real block states
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
index 7e5a96ebc359971305e6b146052d3029e75accb3..461675bc134a1704d541ac110f996d60ea6093c3 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/MultiStateRealBlockReplacementRule.java
@@ -133,7 +133,10 @@ public class MultiStateRealBlockReplacementRule extends BlockReplacementRuleBase
     }
 
     @Override
-    public @NotNull ModelWithParameters getModel(@NotNull BlockState host) {
+    public @Nullable ModelWithParameters getModel(@NotNull BlockState host) {
+        if (this.isFire) {
+            throw new IllegalStateException("Cannot call BlockReplacementRule.getModel for fire");
+        }
         return this.modelPerHost.get(host);
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
index a68d7ac81aa7b56fe488e05231fc13f63b09b929..23a7be7f2206ebf9749d1b47bde0ccf61baede78 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleMultiStateRealBlockReplacementRuleBuilder.java
@@ -5,7 +5,9 @@ package nl.martijnmuijsers.paper.block.replacementrule;
 import net.minecraft.core.Registry;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.FireBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
@@ -192,6 +194,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
     @Override
     public @NotNull BlockReplacementRuleBase build() {
         Validate.notNull(this.real);
+        boolean isFire = this.real instanceof BaseFireBlock;
         @Nullable RealItemReplacementRule realItemRule = this.justInTimeRealItemRuleSupplier.get();
         @NotNull List<@NotNull HostItemReplacementRule> hostItemRules = this.justInTimeHostItemRuleSuppliers.stream().map(Supplier::get).toList();
         var realStates = this.real.getStateDefinition().getPossibleStates();
@@ -200,7 +203,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
             @NotNull BlockState host = Validate.notNull(this.hostForRealState.apply(realState));
             @NotNull BlockState hostReplacement = Validate.notNull(this.hostReplacementForHost.apply(host));
             @NotNull BlockState fallback = Validate.notNull(this.fallbackForRealState.apply(realState));
-            @NotNull ModelWithParameters model = Validate.notNull(this.modelForRealState.apply(realState));
+            @Nullable ModelWithParameters model = isFire ? null : Validate.notNull(this.modelForRealState.apply(realState));
             @Nullable Model blockEntityItemModelBase = !this.rendersAsEntity ? null : model.model();
             return new SingleStateRealBlockReplacementRule(
                 this.real,
@@ -232,7 +235,7 @@ public class SingleMultiStateRealBlockReplacementRuleBuilder implements BlockRep
                 fallbacks.add(fallback);
             }
             fallbackPerRealState.put(realState, fallback);
-            if (!modelPerHost.containsKey(host)) {
+            if (!isFire && !modelPerHost.containsKey(host)) {
                 @Nullable ModelWithParameters model = this.modelForRealState.apply(realState);
                 if (!this.rendersAsEntity) {
                     Validate.notNull(model);
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
index a166a464b73fb6c2143c7519320450ef33d708f2..d3901bbddfe98d597e4357543cf3d397c93727d8 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/replacementrule/SingleStateRealBlockReplacementRule.java
@@ -59,7 +59,10 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
      */
     private final @NotNull List<@NotNull Pair<@NotNull Block, @NotNull Block>> potentialBlockReplacementPairs;
 
-    private final @NotNull ModelWithParameters model;
+    /**
+     * Nullable only if {@link isFire} is true
+     */
+    private final @Nullable ModelWithParameters model;
 
     private final @Nullable Model blockEntityItemModelBase;
 
@@ -81,7 +84,7 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
      */
     private @Nullable BlockEntityItemStack blockEntityItemStack;
 
-    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @NotNull ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules, @Nullable Model blockEntityItemModelBase) {
+    public SingleStateRealBlockReplacementRule(@NotNull Block real, @Nullable RealItemReplacementRule realItemRule, boolean rendersAsEntity, @NotNull BlockState host, @NotNull BlockState hostReplacement, @NotNull BlockState fallback, @Nullable ModelWithParameters model, @NotNull List<@NotNull HostItemReplacementRule> hostItemRules, @Nullable Model blockEntityItemModelBase) {
         super(real, realItemRule, rendersAsEntity, hostItemRules);
         this.host = host;
         this.hosts = Collections.singletonList(this.host);
@@ -151,11 +154,14 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
     }
 
     @Override
-    public @NotNull ModelWithParameters getModel(@NotNull BlockState host) {
-        return this.model;
+    public @Nullable ModelWithParameters getModel(@NotNull BlockState host) {
+        return this.getModel();
     }
 
-    public @NotNull ModelWithParameters getModel() {
+    public @Nullable ModelWithParameters getModel() {
+        if (this.isFire) {
+            throw new IllegalStateException("Cannot call BlockReplacementRule.getModel for fire");
+        }
         return this.model;
     }
 
@@ -204,6 +210,10 @@ public class SingleStateRealBlockReplacementRule extends BlockReplacementRuleBas
 
     @Override
     public void addToResourcePack(@NotNull MutableResourcePack resourcePack) {
+        if (this.isFire) {
+            super.addToResourcePack(resourcePack);
+            return;
+        }
         this.addBlockEntityItemToResourcePack(resourcePack);
         @NotNull NamespacedKeyWithIntention hostKey = NamespacedKeyWithoutIntention.forMinecraft(Registry.BLOCK.getKey(this.host.getBlock())).withEmptyIntention();
         @NotNull MutableResourcePackBlockStates minecraftBlockStates = resourcePack.getBlockStates(hostKey);
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index 7399e1f7bb64b8ddf0f5a6ab57dfe27970d9249a..1b0a53d5db5b9c63f6fa83462b47578994c123f5 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -61,8 +61,8 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
             float to = 16 + outwardDistance;
             return JsonParser.parseString("""
                 [
-                    {   "from": [ %f, %f, %f ],
-                        "to": [ %f, %f, %f ],
+                    {   "from": [ %1$f, %1$f, %1$f ],
+                        "to": [ %2$f, %2$f, %2$f ],
                         "faces": {
                             "down":  { "texture": "#down", "cullface": "down" },
                             "up":    { "texture": "#up", "cullface": "up" },
@@ -72,7 +72,7 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
                             "east":  { "texture": "#east", "cullface": "east" }
                         }
                     }
-                ]""".formatted(from, from, from, to, to, to)
+                ]""".formatted(from, to)
             ).getAsJsonArray();
         }
 
@@ -185,8 +185,8 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
             float to = 16 + outwardDistance;
             return JsonParser.parseString("""
                 [
-                    {   "from": [ %f, %f, %f ],
-                        "to": [ %f, %f, %f ],
+                    {   "from": [ %1$f, %1$f, %1$f ],
+                        "to": [ %2$f, %2$f, %2$f ],
                         "faces": {
                             "down":  { "texture": "#down", "cullface": "down" },
                             "up":    { "texture": "#up", "rotation": 180, "cullface": "up" },
@@ -196,7 +196,7 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
                             "east":  { "texture": "#east", "cullface": "east" }
                         }
                     }
-                ]""".formatted(from, from, from, to, to, to)
+                ]""".formatted(from, to)
             ).getAsJsonArray();
         }
 
@@ -357,8 +357,8 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
             float toMiddleY = 8 + outwardDistance;
             return JsonParser.parseString("""
                 [
-                    {   "from": [ %f, %f, %f ],
-                        "to": [ %f, %f, %f ],
+                    {   "from": [ %1$f, %1$f, %1$f ],
+                        "to": [ %2$f, %3$f, %2$f ],
                         "faces": {
                             "down":  { "uv": [ 0, 0, 16, 16 ], "texture": "#bottom", "cullface": "down" },
                             "up":    { "uv": [ 0, 0, 16, 16 ], "texture": "#top" },
@@ -368,7 +368,7 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
                             "east":  { "uv": [ 0, 8, 16, 16 ], "texture": "#side", "cullface": "east" }
                         }
                     }
-                ]""".formatted(from, from, from, to, toMiddleY, to)
+                ]""".formatted(from, to, toMiddleY)
             ).getAsJsonArray();
         }
 
@@ -411,8 +411,8 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
             float to = 16 + outwardDistance;
             return JsonParser.parseString("""
                 [
-                    {   "from": [ %f, %f, %f ],
-                        "to": [ %f, %f, %f ],
+                    {   "from": [ %1$f, %2$f, %1$f ],
+                        "to": [ %3$f, %3$f, %3$f ],
                         "faces": {
                             "down":  { "uv": [ 0, 0, 16, 16 ], "texture": "#bottom" },
                             "up":    { "uv": [ 0, 0, 16, 16 ], "texture": "#top", "cullface": "up" },
@@ -422,7 +422,7 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
                             "east":  { "uv": [ 0, 0, 16,  8 ], "texture": "#side", "cullface": "east" }
                         }
                     }
-                ]""".formatted(from, fromMiddleY, from, to, to, to)
+                ]""".formatted(from, fromMiddleY, to)
             ).getAsJsonArray();
         }
 
@@ -451,6 +451,50 @@ public abstract class ModelContent implements ResourcePackAssetDataContent {
 
     }
 
+    /**
+     * A basic form of {@link ModelContent}: a fire model (which is one of several models displayed simultaneously in a fire block: see the fire blockstates)
+     */
+    public static final class Fire extends ModelContent {
+
+        private final @NotNull Model parent;
+        private final @NotNull Texture texture;
+
+        public Fire(@NotNull String modelLocation, @NotNull Texture texture) {
+            super();
+            this.parent = new Model(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.minecraft("template_fire_" + modelLocation), Existing.getInstance());
+            this.texture = texture;
+        }
+
+        @Override
+        void writeToClearResourcePackModel(@NotNull MutableResourcePackModel resourcePackModel, @NotNull MutableResourcePack resourcePack) {
+            resourcePackModel.setParent(parent);
+            resourcePackModel.setFireTexture(this.texture);
+            this.texture.addToResourcePack(resourcePack, false);
+        }
+
+        @Override
+        @NotNull JsonArray getOutwardExpandedElements(float outwardDistance) {
+            throw new UnsupportedOperationException("Cannot call getOutwardExpandedElements on ModelContent instance of type Fire");
+        }
+
+        public static @NotNull Fire create(@NotNull ResourcePackAssetIntention intention, @NotNull ResourceLocation key, @NotNull String modelLocation, @NotNull TextureCreation texture) {
+            return new Fire(modelLocation, texture.create(intention, key));
+        }
+
+        public static @NotNull ModelContentCreation creation(@NotNull String modelLocation, @NotNull Texture texture) {
+            return (intention, key) -> new Fire(modelLocation, texture);
+        }
+
+        public static @NotNull ModelContentCreation creation(@NotNull String modelLocation, @NotNull TextureCreation texture) {
+            return (intention, key) -> create(intention, key, modelLocation, texture);
+        }
+
+        public static @NotNull ModelContentCreation defaultCreation(@NotNull String modelLocation) {
+            return creation(modelLocation, Texture.defaultCreation());
+        }
+
+    }
+
     /**
      * A reference to some model that is outside the scope of our own resource pack (for example a model already existing, for use as a parent)
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
index 0617d826ed9b7072b3fa6c66f4abda3b3485d0f2..87af6516cb683d10753a6d1accfdb9afd9f011fe 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/KeyConstants.java
@@ -56,6 +56,11 @@ public final class KeyConstants {
      */
     public static final @NotNull String modelTexturesAll = "all";
 
+    /**
+     * The inner key of textures of a model representing setting the fire texture
+     */
+    public static final @NotNull String modelTexturesFire = "fire";
+
     /**
      * The inner key of textures of a model representing setting the textures on a column's ends
      */
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
index e086aa8aa6b0099b8d5619e9caf4c1eef4d940d2..94ab98d296c78e95fc942e69815aedf8af2313c0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/ConcreteResourcePackBlockStates.java
@@ -2,8 +2,12 @@
 
 package nl.martijnmuijsers.paper.resourcepack.asset.blockstates;
 
+import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelParameters;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelWithParameters;
 import nl.martijnmuijsers.paper.resourcepack.KeyConstants;
@@ -11,6 +15,7 @@ import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.asset.json.SimpleJsonResourcePackAsset;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithIntention;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
+import org.checkerframework.checker.units.qual.N;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -22,6 +27,8 @@ import java.util.Map;
  */
 public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset<ConcreteResourcePackBlockStates> implements MutableResourcePackBlockStates {
 
+    private boolean setUpFire = false;
+
     public ConcreteResourcePackBlockStates(@NotNull JsonObject json, @NotNull NamespacedKeyWithIntention key, boolean dirty) {
         super(ConcreteResourcePackBlockStates::new, json, key, dirty);
     }
@@ -83,4 +90,339 @@ public class ConcreteResourcePackBlockStates extends SimpleJsonResourcePackAsset
         this.json.add(KeyConstants.variants, new JsonObject());
     }
 
+    @Override
+    public void addFireModels(@NotNull BlockState hostState, @NotNull String fireType) {
+        if (!setUpFire) {
+            setUpFire = true;
+            // Based on vanilla Minecraft resource file /assets/minecraft/blockstates/fire.json
+            // All parts have an age 0 requirement added (spread over every when condition)
+            this.json = JsonParser.parseString("""
+                {
+                  "multipart": [
+                    {
+                      "apply": [
+                        {
+                          "model": "minecraft:block/fire_floor0"
+                        },
+                        {
+                          "model": "minecraft:block/fire_floor1"
+                        }
+                      ],
+                      "when": {
+                        "east": "false",
+                        "north": "false",
+                        "south": "false",
+                        "up": "false",
+                        "west": "false",
+                        "age": 0
+                      }
+                    },
+                    {
+                      "apply": [
+                        {
+                          "model": "minecraft:block/fire_side0"
+                        },
+                        {
+                          "model": "minecraft:block/fire_side1"
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt0"
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt1"
+                        }
+                      ],
+                      "when": {
+                        "OR": [
+                          {
+                            "north": "true",
+                            "age": 0
+                          },
+                          {
+                            "east": "false",
+                            "north": "false",
+                            "south": "false",
+                            "up": "false",
+                            "west": "false",
+                            "age": 0
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      "apply": [
+                        {
+                          "model": "minecraft:block/fire_side0",
+                          "y": 90
+                        },
+                        {
+                          "model": "minecraft:block/fire_side1",
+                          "y": 90
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt0",
+                          "y": 90
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt1",
+                          "y": 90
+                        }
+                      ],
+                      "when": {
+                        "OR": [
+                          {
+                            "east": "true",
+                            "age": 0
+                          },
+                          {
+                            "east": "false",
+                            "north": "false",
+                            "south": "false",
+                            "up": "false",
+                            "west": "false",
+                            "age": 0
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      "apply": [
+                        {
+                          "model": "minecraft:block/fire_side0",
+                          "y": 180
+                        },
+                        {
+                          "model": "minecraft:block/fire_side1",
+                          "y": 180
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt0",
+                          "y": 180
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt1",
+                          "y": 180
+                        }
+                      ],
+                      "when": {
+                        "OR": [
+                          {
+                            "south": "true",
+                            "age": 0
+                          },
+                          {
+                            "east": "false",
+                            "north": "false",
+                            "south": "false",
+                            "up": "false",
+                            "west": "false",
+                            "age": 0
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      "apply": [
+                        {
+                          "model": "minecraft:block/fire_side0",
+                          "y": 270
+                        },
+                        {
+                          "model": "minecraft:block/fire_side1",
+                          "y": 270
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt0",
+                          "y": 270
+                        },
+                        {
+                          "model": "minecraft:block/fire_side_alt1",
+                          "y": 270
+                        }
+                      ],
+                      "when": {
+                        "OR": [
+                          {
+                            "west": "true",
+                            "age": 0
+                          },
+                          {
+                            "east": "false",
+                            "north": "false",
+                            "south": "false",
+                            "up": "false",
+                            "west": "false",
+                            "age": 0
+                          }
+                        ]
+                      }
+                    },
+                    {
+                      "apply": [
+                        {
+                          "model": "minecraft:block/fire_up0"
+                        },
+                        {
+                          "model": "minecraft:block/fire_up1"
+                        },
+                        {
+                          "model": "minecraft:block/fire_up_alt0"
+                        },
+                        {
+                          "model": "minecraft:block/fire_up_alt1"
+                        }
+                      ],
+                      "when": {
+                        "up": "true",
+                        "age": 0
+                      }
+                    }
+                  ]
+                }""").getAsJsonObject();
+        }
+        @NotNull JsonArray multipart = this.json.getAsJsonArray("multipart");
+        // Based on vanilla Minecraft resource file /assets/minecraft/blockstates/soul_fire.json
+        // All parts have an added when condition for the right block state
+        multipart.addAll(JsonParser.parseString("""
+            [
+                {
+                  "apply": [
+                    {
+                      "model": "sucraft:block/%1$s_fire_floor0"
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_floor1"
+                    }
+                  ],
+                  "when": {
+                    "east": "%2$b",
+                    "north": "%3$b",
+                    "south": "%4$b",
+                    "up": "%5$b",
+                    "west": "%6$b",
+                    "age": %7$d
+                  }
+                },
+                {
+                  "apply": [
+                    {
+                      "model": "sucraft:block/%1$s_fire_side0"
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side1"
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt0"
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt1"
+                    }
+                  ],
+                  "when": {
+                    "east": "%2$b",
+                    "north": "%3$b",
+                    "south": "%4$b",
+                    "up": "%5$b",
+                    "west": "%6$b",
+                    "age": %7$d
+                  }
+                },
+                {
+                  "apply": [
+                    {
+                      "model": "sucraft:block/%1$s_fire_side0",
+                      "y": 90
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side1",
+                      "y": 90
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt0",
+                      "y": 90
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt1",
+                      "y": 90
+                    }
+                  ],
+                  "when": {
+                    "east": "%2$b",
+                    "north": "%3$b",
+                    "south": "%4$b",
+                    "up": "%5$b",
+                    "west": "%6$b",
+                    "age": %7$d
+                  }
+                },
+                {
+                  "apply": [
+                    {
+                      "model": "sucraft:block/%1$s_fire_side0",
+                      "y": 180
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side1",
+                      "y": 180
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt0",
+                      "y": 180
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt1",
+                      "y": 180
+                    }
+                  ],
+                  "when": {
+                    "east": "%2$b",
+                    "north": "%3$b",
+                    "south": "%4$b",
+                    "up": "%5$b",
+                    "west": "%6$b",
+                    "age": %7$d
+                  }
+                },
+                {
+                  "apply": [
+                    {
+                      "model": "sucraft:block/%1$s_fire_side0",
+                      "y": 270
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side1",
+                      "y": 270
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt0",
+                      "y": 270
+                    },
+                    {
+                      "model": "sucraft:block/%1$s_fire_side_alt1",
+                      "y": 270
+                    }
+                  ],
+                  "when": {
+                    "east": "%2$b",
+                    "north": "%3$b",
+                    "south": "%4$b",
+                    "up": "%5$b",
+                    "west": "%6$b",
+                    "age": %7$d
+                  }
+                }
+            ]"""
+            .formatted(
+                fireType,
+                hostState.getValue(BlockStateProperties.EAST),
+                hostState.getValue(BlockStateProperties.NORTH),
+                hostState.getValue(BlockStateProperties.SOUTH),
+                hostState.getValue(BlockStateProperties.UP),
+                hostState.getValue(BlockStateProperties.WEST),
+                hostState.getValue(BlockStateProperties.AGE_15)
+            )).getAsJsonArray()
+        );
+        this.setDirty();
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
index db3828b4eb8488add15137f6b82f11f3e3c3d45b..9aba47d2b287033aece4b2f27c4c9dc761547cd0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/blockstates/MutableResourcePackBlockStates.java
@@ -56,4 +56,6 @@ public interface MutableResourcePackBlockStates extends MutableJsonResourcePackA
      */
     void clearVariants();
 
+    void addFireModels(@NotNull BlockState hostState, @NotNull String fireType);
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
index 5712c6ae89be40899e77e2c750ad27f6ecf1d1c2..224eb6840fef0888fa12d80cdba5f5aebc7ef69d 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/ConcreteResourcePackModel.java
@@ -114,6 +114,14 @@ public class ConcreteResourcePackModel extends SimpleJsonResourcePackAsset<Concr
         this.setDirty();
     }
 
+    @Override
+    public void setFireTexture(@NotNull Texture texture) {
+        @NotNull JsonObject texturesJson = new JsonObject();
+        texturesJson.addProperty(KeyConstants.modelTexturesFire, texture.getKeyWithIntention().toString());
+        this.json.add(KeyConstants.modelTextures, texturesJson);
+        this.setDirty();
+    }
+
     @Override
     public void setColumnTextures(@NotNull Texture endTexture, @NotNull Texture sideTexture) {
         @NotNull JsonObject texturesJson = new JsonObject();
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
index 17326d55c72bf6e98b8e9068ffd92588c5e5a928..473deb9d81e52767397c4a45df9313a52391c0fc 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/model/MutableResourcePackModel.java
@@ -28,6 +28,8 @@ public interface MutableResourcePackModel extends MutableJsonResourcePackAsset,
 
     void setAllTextures(@NotNull Texture texture);
 
+    void setFireTexture(@NotNull Texture texture);
+
     void setColumnTextures(@NotNull Texture endTexture, @NotNull Texture sideTexture);
 
     void setBottomTopTextures(@NotNull Texture bottomTexture, @NotNull Texture sideTexture, @NotNull Texture topTexture);
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index e1bd6cbe70e2fd063aea9078cd3374a50e68bd55..08d7e3bc034fee3a0560cf10a17e40dd36f5f8ea 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 134;
+    private static final int currentResourcePackVersion = 143;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
