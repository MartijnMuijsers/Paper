From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 6 Jul 2022 11:06:12 +0200
Subject: [PATCH] Add more brick type blocks


diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index f066d1fb63c89127badef69c59e978b5a8316a39..4fb86e6b70d2b8d8474879d67fbe3efd80f8c351 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -40,6 +40,7 @@ import net.minecraft.world.level.levelgen.structure.Structure;
 import nl.martijnmuijsers.paper.biome.SuCraftBiomeTags;
 import nl.martijnmuijsers.paper.biome.SuCraftBiomeTagsProvider;
 import nl.martijnmuijsers.paper.block.SuCraftBlockTagsProvider;
+import nl.martijnmuijsers.paper.block.SuCraftObservableBlockTagsSpreader;
 import nl.martijnmuijsers.paper.data.SuCraftTagsProvider;
 import nl.martijnmuijsers.paper.structure.SuCraftBuiltinStructures;
 import nl.martijnmuijsers.paper.structure.SuCraftStructureTagsProvider;
@@ -398,6 +399,7 @@ public class MappedRegistry<T> extends WritableRegistry<T> {
             tagEntries = ((SuCraftTagsProvider<T>) new SuCraftBiomeTagsProvider((Registry<Biome>) this)).run(tagEntries);
         } else if (this.key().equals(BLOCK_REGISTRY)) {
             tagEntries = ((SuCraftTagsProvider<T>) new SuCraftBlockTagsProvider((Registry<Block>) this)).run(tagEntries);
+            tagEntries = ((SuCraftTagsProvider<T>) new SuCraftObservableBlockTagsSpreader((Registry<Block>) this)).run(tagEntries);
         }
         // Martijn end - custom resource
         tagEntries.forEach((tag, entries) -> {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1d452417c83f4a4053faf3bb6b86d357a6403203..b75a9bd5c2ed262867fee95bb83aec5d5d35f28d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -96,6 +96,7 @@ import net.minecraft.server.players.GameProfileCache;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.ServerOpListEntry;
 import net.minecraft.server.players.UserWhiteList;
+import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.FrameTimer;
@@ -136,6 +137,7 @@ import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.biome.BiomeManager;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
@@ -153,7 +155,9 @@ import net.minecraft.world.level.storage.loot.LootTables;
 import net.minecraft.world.level.storage.loot.PredicateManager;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import nl.martijnmuijsers.paper.block.SuCraftBlocks;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.Material;
 import org.slf4j.Logger;
 
 // CraftBukkit start
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
index a4fe861de390e8e5eb1b943195809acd946fd785..315030684c60bd0bc4781bc9baa419a9051cf674 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
@@ -8,9 +8,9 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import nl.martijnmuijsers.paper.blockanditemdata.model.ModelCreation;
-import nl.martijnmuijsers.paper.item.UsedHostCustomModelData;
 import nl.martijnmuijsers.paper.resourcepack.MutableResourcePack;
 import nl.martijnmuijsers.paper.resourcepack.asset.blockstates.MutableResourcePackBlockStates;
 import nl.martijnmuijsers.paper.blockanditemdata.model.Model;
@@ -23,12 +23,15 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.Collections;
+import java.util.List;
 import java.util.Set;
-import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
+/**
+ * A replacement rule that is fully responsible for exactly 1 real block
+ */
 public interface BlockReplacementRule {
 
     interface Builder<B extends Builder<B>> {
@@ -144,8 +147,19 @@ public interface BlockReplacementRule {
             }
 
             public @NotNull StatelessBlockReplacementRule.Builder withNoteBlockHost() {
-                return this.withHost(UsedNoteBlockStateData.generateUnusedNoteBlockHost())
-                    .withHostReplacement(UsedNoteBlockStateData.getNoteBlockHostReplacement());
+                return this.withGeneratedBlockStateHost(Blocks.NOTE_BLOCK);
+            }
+
+            public @NotNull StatelessBlockReplacementRule.Builder withGeneratedBlockStateHost(@NotNull Block block) {
+                @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(block);
+                return this.withHost(hostAndHostReplacement.left())
+                    .withHostReplacement(hostAndHostReplacement.right());
+            }
+
+            public @NotNull StatelessBlockReplacementRule.Builder withGeneratedBlockStateHost(@NotNull List<@NotNull BlockState> possibleBlockStates) {
+                @NotNull Pair<@NotNull BlockState, @NotNull BlockState> hostAndHostReplacement = UsedHostBlockStates.generateUnusedHostAndReplacement(possibleBlockStates);
+                return this.withHost(hostAndHostReplacement.left())
+                    .withHostReplacement(hostAndHostReplacement.right());
             }
 
             public @NotNull StatelessBlockReplacementRule.Builder withHostDefaultAsHostReplacement() {
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
index 72de22c8f266ab20108f91bf558232220f5c4f89..d1ea9c840389e8b05c174c082f85062d7d22413c 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlockTagsProvider.java
@@ -9,12 +9,16 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
 import nl.martijnmuijsers.paper.data.SuCraftTagsProvider;
 import org.jetbrains.annotations.NotNull;
 
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.HashMap;
+import java.util.HashSet;
 
 /**
  * Based on {@link net.minecraft.data.tags.BlockTagsProvider}
@@ -29,19 +33,9 @@ public class SuCraftBlockTagsProvider extends SuCraftTagsProvider<Block> {
     protected void addTags(Map<TagKey<Block>, List<Holder<Block>>> existingRegistryTagEntries) {
         MinecraftServer.LOGGER.info("Adding onto existing block tags...");
         // Martijn start - custom blocks and items
-        MinecraftServer.LOGGER.info("Inheriting mineable with tool tags for custom blocks...");
         final List<TagKey<Block>> mineableTags = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL);
-        for (Block block : Registry.BLOCK) {
-            BlockReplacementRule blockReplacementRule = block.replacementRule;
-            if (blockReplacementRule != null) {
-                for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialObservationReplacements()) {
-                    for (TagKey<Block> tag : mineableTags) {
-                        if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(this.registry.getHolderOrThrow(this.registry.getResourceKey(observationReplacement.second()).get()))) {
-                            this.tag(tag).add(this.registry.getResourceKey(observationReplacement.first()).get());
-                        }
-                    }
-                }
-            }
+        for (TagKey<Block> tag : mineableTags) {
+            this.tag(tag).add(this.registry.getResourceKey(Blocks.NOTE_BLOCK).get());
         }
         // Martijn end - custom blocks and items
     }
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index c0e29842ca05ac14e2cb674a4a1c049e97222b42..2419ce435b89d628043da420e592ccd8a204c9b0 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -61,7 +61,7 @@ public class SuCraftBlocks {
     public static final Block YELLOW_PLANKS = registerPlanks("yellow", Blocks.BIRCH_PLANKS);
 
     /**
-     * Based on {@link Blocks#DIRT}
+     * Based on {@link Blocks#0.RT}
      */
     public static final Block DIRT_BRICKS = register(
         "dirt_bricks",
@@ -73,7 +73,7 @@ public class SuCraftBlocks {
             .withHostReplacingItemFromHostBlock()
             .withHostReplacingItemReplacementFromHostReplacementBlock()
             .withModel(Model.OneTextureCube.defaultCreation()),
-        new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(1.0F).sound(SoundType.GRAVEL)),
+        new Block(BlockBehaviour.Properties.of(Material.DIRT).strength(0.5F, 1.0F).sound(SoundType.GRAVEL)),
         SuCraftBlockLoot::dropSelf
     );
 
@@ -93,6 +93,65 @@ public class SuCraftBlocks {
     public static final Block CHISELED_GRANITE_BRICKS = registerChiseledBricks("granite", Blocks.POLISHED_GRANITE);
     public static final Block CHISELED_TUFF_BRICKS = registerChiseledBricks("tuff", Blocks.TUFF);
 
+    /**
+     * Based on {@link Blocks#SANDSTONE} and {@link Blocks#SOUL_SAND}
+     */
+    public static final Block SOUL_SANDSTONE = register(
+        "soul_sandstone",
+        BlockReplacementRule.stateless()
+            .withNoteBlockHost()
+            .withFullBlockBoundingBoxHostItem()
+            .withFallback(Blocks.SOUL_SAND)
+            .withFallbackBlockAsFallbackItem()
+            .withHostReplacingItemFromHostBlock()
+            .withHostReplacingItemReplacementFromHostReplacementBlock()
+            .withModel(Model.BottomTopPillarCube.defaultCreation()),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F, 0.8F)),
+        SuCraftBlockLoot::dropSelf
+    );
+
+    public static final Block SANDSTONE_BRICKS = registerBricks("sandstone", Blocks.SANDSTONE);
+    public static final Block RED_SANDSTONE_BRICKS = registerBricks("red_sandstone", Blocks.RED_SANDSTONE);
+    public static final Block SOUL_SANDSTONE_BRICKS = registerBricks("soul_sandstone", Blocks.SOUL_SAND);
+    public static final Block ANDESITE_COBBLESTONE = registerCobblestone("andesite", Blocks.ANDESITE);
+    public static final Block DIORITE_COBBLESTONE = registerCobblestone("diorite", Blocks.DIORITE);
+    public static final Block GRANITE_COBBLESTONE = registerCobblestone("granite", Blocks.GRANITE);
+
+    /**
+     * Based on {@link Blocks#CHISELED_SANDSTONE} and {@link Blocks#SOUL_SAND}
+     */
+    public static final Block CHISELED_SOUL_SANDSTONE = register(
+        "chiseled_soul_sandstone",
+        BlockReplacementRule.stateless()
+            .withNoteBlockHost()
+            .withFullBlockBoundingBoxHostItem()
+            .withFallback(Blocks.SOUL_SAND)
+            .withFallbackBlockAsFallbackItem()
+            .withHostReplacingItemFromHostBlock()
+            .withHostReplacingItemReplacementFromHostReplacementBlock()
+            .withModel(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance()))),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
+        SuCraftBlockLoot::dropSelf
+    );
+
+    /**
+     * Based on {@link Blocks#CUT_SANDSTONE} and {@link Blocks#SOUL_SAND}
+     */
+    public static final Block CUT_SOUL_SANDSTONE = register(
+        "cut_soul_sandstone",
+        BlockReplacementRule.stateless()
+            .withNoteBlockHost()
+            .withFullBlockBoundingBoxHostItem()
+            .withFallback(Blocks.SOUL_SAND)
+            .withFallbackBlockAsFallbackItem()
+            .withHostReplacingItemFromHostBlock()
+            .withHostReplacingItemReplacementFromHostReplacementBlock()
+            .withModel(Model.YPillarCube.defaultCreationWithAlternativeEnd(new Texture(ResourcePackAssetIntention.BLOCK, NamespacedKeyWithoutIntention.sucraft("soul_sandstone_top"), TextureContent.Existing.getInstance()))),
+        new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(0.8F)),
+        SuCraftBlockLoot::dropSelf
+    );
+    public static final Block CHISELED_PRISMARINE_BRICKS = registerChiseledBricks("prismarine", Blocks.PRISMARINE_BRICKS);
+
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRule.Builder<?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
     }
@@ -141,6 +200,7 @@ public class SuCraftBlocks {
             throw new IllegalStateException("registerInfestedStoneBricks was called with an uninfested custom block for which replacementRule was not initialized yet");
         }
         if (replacementRule instanceof BlockReplacementRule.StatelessBlockReplacementRule statelessBlockReplacementRule) {
+            Block infestedBlock = new InfestedBlock(uninfested, BlockBehaviour.Properties.of(Material.CLAY), false);
             return register(
                 "infested_" + uninfested.customKey.getPath(),
                 BlockReplacementRule.stateless()
@@ -152,7 +212,7 @@ public class SuCraftBlocks {
                     .withHostReplacingItemFromHostBlock()
                     .withHostReplacingItemReplacementFromHostReplacementBlock()
                     .withModelSameAsStatelessBlock(uninfested),
-                new InfestedBlock(uninfested, BlockBehaviour.Properties.of(Material.CLAY), false),
+                infestedBlock,
                 block -> SuCraftBlockLoot.dropSingleItemWhenSilkTouch(uninfested)
             );
         } else {
@@ -255,6 +315,25 @@ public class SuCraftBlocks {
         );
     }
 
+    /**
+     * Based on {@link Blocks#COBBLESTONE}
+     */
+    private static @NotNull Block registerCobblestone(@NotNull String type, @NotNull Block fallback) {
+        return register(
+            type + "_cobblestone",
+            BlockReplacementRule.stateless()
+                .withNoteBlockHost()
+                .withFullBlockBoundingBoxHostItem()
+                .withFallback(fallback)
+                .withFallbackBlockAsFallbackItem()
+                .withHostReplacingItemFromHostBlock()
+                .withHostReplacingItemReplacementFromHostReplacementBlock()
+                .withModel(Model.OneTextureCube.defaultCreation()),
+            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(2.0F, 6.0F)),
+            SuCraftBlockLoot::dropSelf
+        );
+    }
+
     public static Block bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         return SNOWY_STONE_BRICKS;
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
new file mode 100644
index 0000000000000000000000000000000000000000..f142dee7fc2d5b4444c677e2125f291215193ab0
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftObservableBlockTagsSpreader.java
@@ -0,0 +1,51 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block;
+
+import it.unimi.dsi.fastutil.Pair;
+import net.minecraft.core.Holder;
+import net.minecraft.core.Registry;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.tags.BlockTags;
+import net.minecraft.tags.TagKey;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import nl.martijnmuijsers.paper.data.SuCraftTagsProvider;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Based on {@link net.minecraft.data.tags.BlockTagsProvider}
+ */
+public class SuCraftObservableBlockTagsSpreader extends SuCraftTagsProvider<Block> {
+
+    public SuCraftObservableBlockTagsSpreader(Registry<Block> registry) {
+        super(registry);
+    }
+
+    @Override
+    protected void addTags(Map<TagKey<Block>, List<Holder<Block>>> existingRegistryTagEntries) {
+        final List<TagKey<Block>> mineableTags = List.of(BlockTags.MINEABLE_WITH_AXE, BlockTags.MINEABLE_WITH_HOE, BlockTags.MINEABLE_WITH_PICKAXE, BlockTags.MINEABLE_WITH_SHOVEL);
+        MinecraftServer.LOGGER.info("Inheriting mineable with tool tags for custom blocks...");
+        for (Block block : Registry.BLOCK) {
+            BlockReplacementRule blockReplacementRule = block.replacementRule;
+            if (blockReplacementRule != null) {
+                for (@NotNull Pair<@NotNull Block, @NotNull Block> observationReplacement : blockReplacementRule.getPotentialObservationReplacements()) {
+                    for (TagKey<Block> tag : mineableTags) {
+                        var holder = this.registry.getHolderOrThrow(this.registry.getResourceKey(observationReplacement.second()).get());
+                        if (existingRegistryTagEntries.getOrDefault(tag, Collections.emptyList()).contains(holder)) {
+                            this.tag(tag).add(this.registry.getResourceKey(observationReplacement.first()).get());
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java b/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java
new file mode 100644
index 0000000000000000000000000000000000000000..a38b830ea76cf1441f6044485c2727947110c794
--- /dev/null
+++ b/src/main/java/nl/martijnmuijsers/paper/block/UsedHostBlockStates.java
@@ -0,0 +1,77 @@
+// Martijn - custom blocks and items
+
+package nl.martijnmuijsers.paper.block;
+
+import it.unimi.dsi.fastutil.Pair;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
+import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+/**
+ * A utility class that keeps track of used block states in block replacement hosts
+ */
+public final class UsedHostBlockStates {
+
+    private UsedHostBlockStates() {}
+
+    private static final @NotNull Set<@NotNull BlockState> usedBlockStates = new HashSet<>(0);
+
+    private static @NotNull BlockState getHostReplacement(@NotNull BlockState host) {
+        // Block tags cannot be used in this method yet since it will be called before they are assigned
+        Block block = host.getBlock();
+        if (block.equals(Blocks.NOTE_BLOCK)) {
+            return block.getStateDefinition().getPossibleStates().get(0);
+        } else if (
+            block.equals(Blocks.OAK_LEAVES) ||
+                block.equals(Blocks.SPRUCE_LEAVES) ||
+                block.equals(Blocks.BIRCH_LEAVES) ||
+                block.equals(Blocks.JUNGLE_LEAVES) ||
+                block.equals(Blocks.ACACIA_LEAVES) ||
+                block.equals(Blocks.DARK_OAK_LEAVES) ||
+                block.equals(Blocks.AZALEA_LEAVES) ||
+                block.equals(Blocks.FLOWERING_AZALEA_LEAVES) ||
+                block.equals(Blocks.MANGROVE_LEAVES)
+        ) {
+            return host.getBlock().withPropertiesOf(host).setValue(BlockStateProperties.DISTANCE, 1).setValue(BlockStateProperties.PERSISTENT, true);
+        }
+        throw new IllegalArgumentException("Called UsedHostBlockStates.getHostReplacement with a host for which host replacements were not defined yet: " + host);
+    }
+
+    private static final @NotNull Map<@NotNull Block, @NotNull List<@NotNull BlockState>> defaultPossibleBlockStatesByBlock = new HashMap<>(0);
+
+    private static @NotNull List<@NotNull BlockState> getDefaultPossibleBlockStatesForBlock(@NotNull Block block) {
+        return defaultPossibleBlockStatesByBlock.computeIfAbsent(block, $ -> {
+            @NotNull List<@NotNull BlockState> allBlockStates = new ArrayList<>(block.getStateDefinition().getPossibleStates());
+            @NotNull Set<@NotNull BlockState> hostReplacements = allBlockStates.stream().map(it -> getHostReplacement(it)).collect(Collectors.toSet());
+            allBlockStates.removeAll(hostReplacements);
+            return allBlockStates;
+        });
+    }
+
+    public static @NotNull Pair<@NotNull BlockState, @NotNull BlockState> generateUnusedHostAndReplacement(@NotNull Block block) {
+        return generateUnusedHostAndReplacement(getDefaultPossibleBlockStatesForBlock(block));
+    }
+
+    public static @NotNull Pair<@NotNull BlockState, @NotNull BlockState> generateUnusedHostAndReplacement(@NotNull List<@NotNull BlockState> possibleBlockStates) {
+        for (@NotNull BlockState possibleBlockState : possibleBlockStates) {
+            if (usedBlockStates.add(possibleBlockState)) {
+                return Pair.of(possibleBlockState, getHostReplacement(possibleBlockState));
+            }
+        }
+        throw new IllegalStateException("Tried to generate unused host block state, but all possible block states (" + possibleBlockStates + ") are already in use");
+    }
+
+}
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/UsedNoteBlockStateData.java b/src/main/java/nl/martijnmuijsers/paper/block/UsedNoteBlockStateData.java
deleted file mode 100644
index 1aafdb655f191e33cb97dc4b222cf5f3b7f7234e..0000000000000000000000000000000000000000
--- a/src/main/java/nl/martijnmuijsers/paper/block/UsedNoteBlockStateData.java
+++ /dev/null
@@ -1,39 +0,0 @@
-// Martijn - custom blocks and items
-
-package nl.martijnmuijsers.paper.block;
-
-import it.unimi.dsi.fastutil.objects.Object2IntMap;
-import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import net.minecraft.world.item.Item;
-import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.block.state.BlockState;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.IdentityHashMap;
-import java.util.Set;
-
-/**
- * A utility class that keeps track of used block states in block replacement hosts
- */
-public final class UsedNoteBlockStateData {
-
-    private UsedNoteBlockStateData() {}
-
-    private static int lastUsedStateIndex = 0;
-
-    public static @NotNull BlockState getNoteBlockHostReplacement() {
-        return Blocks.NOTE_BLOCK.getStateDefinition().getPossibleStates().get(0);
-    }
-
-    public static @NotNull BlockState generateUnusedNoteBlockHost() {
-        lastUsedStateIndex++;
-        try {
-            return Blocks.NOTE_BLOCK.getStateDefinition().getPossibleStates().get(lastUsedStateIndex);
-        } catch (IndexOutOfBoundsException e) {
-            throw new IllegalStateException("Tried to generate unused note block host block state, but all block states are already in use", e);
-        }
-    }
-
-}
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
index d5e6458ef004aba44dfe7b167f6f18782f5fe1c9..975ac03b3b6925ad66b4ee6def2ee47e45ea1a3c 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/model/ModelContent.java
@@ -15,7 +15,9 @@ import nl.martijnmuijsers.paper.resourcepack.asset.intention.ResourcePackAssetIn
 import nl.martijnmuijsers.paper.resourcepack.asset.texture.MutableResourcePackTexture;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Arrays;
 import java.util.function.Function;
+import java.util.function.Supplier;
 
 /**
  * The immutable content of a model: a {@link Model} without any information about its appropriate location in a resource pack
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
index 19d232fd4422f78e742497a5232167a20ab6dc67..f5a4becb7485702bcea41ed1abfb8cb4a8e9acf8 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/Texture.java
@@ -20,6 +20,10 @@ import java.util.function.Function;
  */
 public class Texture extends ResourcePackIntentionedAssetDataByContent<TextureContent> {
 
+    public static final @NotNull String TOP_SUFFIX = "_top";
+    public static final @NotNull String END_SUFFIX = TOP_SUFFIX;
+    public static final @NotNull String BOTTOM_SUFFIX = "_bottom";
+
     public Texture(@NotNull ResourcePackAssetIntention intention, @NotNull NamespacedKeyWithoutIntention key, @NotNull TextureContent content) {
         super(intention, key, content);
     }
@@ -50,10 +54,22 @@ public class Texture extends ResourcePackIntentionedAssetDataByContent<TextureCo
         return (intention, key) -> create(intention, key, content);
     }
 
+    public static @NotNull TextureCreation endCreation(@NotNull TextureContentCreation content) {
+        return (intention, key) -> create(intention, new ResourceLocation(key.getNamespace(), key.getPath() + END_SUFFIX), content);
+    }
+
+    public static @NotNull TextureCreation bottomCreation(@NotNull TextureContentCreation content) {
+        return (intention, key) -> create(intention, new ResourceLocation(key.getNamespace(), key.getPath() + BOTTOM_SUFFIX), content);
+    }
+
+    public static @NotNull TextureCreation topCreation(@NotNull TextureContentCreation content) {
+        return (intention, key) -> create(intention, new ResourceLocation(key.getNamespace(), key.getPath() + TOP_SUFFIX), content);
+    }
+
     private static final @NotNull TextureCreation DEFAULT_CREATION = creation(TextureContent.ByFileToImportPath.defaultCreation());
-    private static final @NotNull TextureCreation DEFAULT_END_CREATION = creation(TextureContent.ByFileToImportPath.defaultEndCreation());
-    private static final @NotNull TextureCreation DEFAULT_BOTTOM_CREATION = creation(TextureContent.ByFileToImportPath.defaultBottomCreation());
-    private static final @NotNull TextureCreation DEFAULT_TOP_CREATION = creation(TextureContent.ByFileToImportPath.defaultTopCreation());
+    private static final @NotNull TextureCreation DEFAULT_END_CREATION = endCreation(TextureContent.ByFileToImportPath.defaultCreation());
+    private static final @NotNull TextureCreation DEFAULT_BOTTOM_CREATION = bottomCreation(TextureContent.ByFileToImportPath.defaultCreation());
+    private static final @NotNull TextureCreation DEFAULT_TOP_CREATION = topCreation(TextureContent.ByFileToImportPath.defaultCreation());
 
     public static @NotNull TextureCreation defaultCreation() {
         return DEFAULT_CREATION;
diff --git a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
index 434432b6211a3513efad52eda69ff6f1eefe2420..f03a6387667a06bedfb33b7a0512e599d9b85d27 100644
--- a/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
+++ b/src/main/java/nl/martijnmuijsers/paper/blockanditemdata/texture/TextureContent.java
@@ -2,6 +2,7 @@
 
 package nl.martijnmuijsers.paper.blockanditemdata.texture;
 
+import net.minecraft.resources.ResourceLocation;
 import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetDataContent;
 import nl.martijnmuijsers.paper.resourcepack.asset.ResourcePackAssetType;
 import nl.martijnmuijsers.paper.resourcepack.asset.intention.NamespacedKeyWithoutIntention;
@@ -76,30 +77,12 @@ public abstract class TextureContent implements ResourcePackAssetDataContent {
         }
 
         private static final @NotNull TextureFilenameCreation DEFAULT_FILENAME = (intention, key) -> NamespacedKeyWithoutIntention.forMinecraft(key).withIntention(intention).keyWithIntention() + ResourcePackAssetType.TEXTURE.getDefaultFileExtension();
-        private static final @NotNull TextureFilenameCreation DEFAULT_TOP_FILENAME = (intention, key) -> NamespacedKeyWithoutIntention.forMinecraft(key).withIntention(intention).keyWithIntention() + "_top" + ResourcePackAssetType.TEXTURE.getDefaultFileExtension();
-        private static final @NotNull TextureFilenameCreation DEFAULT_END_FILENAME = DEFAULT_TOP_FILENAME;
-        private static final @NotNull TextureFilenameCreation DEFAULT_BOTTOM_FILENAME = (intention, key) -> NamespacedKeyWithoutIntention.forMinecraft(key).withIntention(intention).keyWithIntention() + "_bottom" + ResourcePackAssetType.TEXTURE.getDefaultFileExtension();
         private static final @NotNull TextureContentCreation DEFAULT_CREATION = creationInDefaultFolder(DEFAULT_FILENAME);
-        private static final @NotNull TextureContentCreation DEFAULT_END_CREATION = creationInDefaultFolder(DEFAULT_END_FILENAME);
-        private static final @NotNull TextureContentCreation DEFAULT_BOTTOM_CREATION = creationInDefaultFolder(DEFAULT_BOTTOM_FILENAME);
-        private static final @NotNull TextureContentCreation DEFAULT_TOP_CREATION = creationInDefaultFolder(DEFAULT_TOP_FILENAME);
 
         public static @NotNull TextureContentCreation defaultCreation() {
             return DEFAULT_CREATION;
         }
 
-        public static @NotNull TextureContentCreation defaultEndCreation() {
-            return DEFAULT_END_CREATION;
-        }
-
-        public static @NotNull TextureContentCreation defaultBottomCreation() {
-            return DEFAULT_BOTTOM_CREATION;
-        }
-
-        public static @NotNull TextureContentCreation defaultTopCreation() {
-            return DEFAULT_TOP_CREATION;
-        }
-
     }
 
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index 3b2b8a9234cc7fddddea0976f9c194d2154b09ad..444adf5ed8b7fd0fd1c957e97034b1e4881a9627 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -73,6 +73,30 @@ public class SuCraftItems {
     public static final Item CHISELED_GRANITE_BRICKS = registerChiseledBricks(SuCraftBlocks.CHISELED_GRANITE_BRICKS, "Granite", () -> Items.POLISHED_GRANITE);
     public static final Item CHISELED_TUFF_BRICKS = registerChiseledBricks(SuCraftBlocks.CHISELED_TUFF_BRICKS, "Tuff", () -> Items.TUFF);
 
+    /**
+     * Based on {@link Items#SANDSTONE}
+     */
+    public static final Item SOUL_SANDSTONE = registerBlock(SuCraftBlocks.SOUL_SANDSTONE, "Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SOUL_SAND));
+
+    public static final Item SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.SANDSTONE_BRICKS, "Sandstone", () -> Items.SANDSTONE);
+    public static final Item RED_SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.RED_SANDSTONE_BRICKS, "Red Sandstone", () -> Items.RED_SANDSTONE);
+    public static final Item SOUL_SANDSTONE_BRICKS = registerBricks(SuCraftBlocks.SOUL_SANDSTONE_BRICKS, "Soul Sandstone", () -> Items.SOUL_SAND);
+
+    /**
+     * Based on {@link Items#CHISELED_SANDSTONE}
+     */
+    public static final Item CHISELED_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CHISELED_SOUL_SANDSTONE, "Chiseled Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SOUL_SAND));
+
+    /**
+     * Based on {@link Items#CUT_SANDSTONE}
+     */
+    public static final Item CUT_SOUL_SANDSTONE = registerBlock(SuCraftBlocks.CUT_SOUL_SANDSTONE, "Cut Soul Sandstone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SOUL_SAND));
+
+    public static final Item ANDESITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.ANDESITE_COBBLESTONE, "Andesite", () -> Items.ANDESITE);
+    public static final Item DIORITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.DIORITE_COBBLESTONE, "Diorite", () -> Items.DIORITE);
+    public static final Item GRANITE_COBBLESTONE = registerCobblestone(SuCraftBlocks.GRANITE_COBBLESTONE, "Granite", () -> Items.GRANITE);
+    public static final Item CHISELED_PRISMARINE_BRICKS = registerChiseledBricks(SuCraftBlocks.CHISELED_PRISMARINE_BRICKS, "Prismarine", () -> Items.PRISMARINE_BRICKS);
+
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
     }
@@ -143,6 +167,13 @@ public class SuCraftItems {
         return registerBlock(block, "Chiseled " + typeDisplayName + " Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
     }
 
+    /**
+     * Based on {@link Items#COBBLESTONE}
+     */
+    private static @NotNull Item registerCobblestone(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
+        return registerBlock(block, typeDisplayName + " Cobblestone", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    }
+
     public static Item bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         // Make sure that the item replacement rule for block items for which the block has some hosts that are potentially placed by vanilla items is registered with those vanilla items
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
index 51d105dd82f08e41a12502d7a5642605a1a45b90..2099cee212fcc73c6446dc58c79fc0ce18f00f23 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/asset/intention/NamespacedKeyWithoutIntention.java
@@ -36,4 +36,8 @@ public record NamespacedKeyWithoutIntention(@NotNull String namespace, @NotNull
         return new NamespacedKeyWithoutIntention(ResourceLocation.DEFAULT_NAMESPACE, keyWithoutIntention);
     }
 
+    public static @NotNull NamespacedKeyWithoutIntention sucraft(@NotNull String keyWithoutIntention) {
+        return new NamespacedKeyWithoutIntention(ResourceLocation.SUCRAFT_NAMESPACE, keyWithoutIntention);
+    }
+
 }
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index 8436e2bb3feea061873be6caa71ef5b10fe0efc4..85499d462cbb6e9502fd089ed383cb40a64194a4 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 24;
+    private static final int currentResourcePackVersion = 36;
 
     private static final String RESOURCE_PACK_FOLDER_PATH = "resourcepack";
     private static final String OUTPUT_FOLDER_PATH = RESOURCE_PACK_FOLDER_PATH + "/output";
