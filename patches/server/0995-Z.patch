From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 19 Jul 2022 20:05:30 +0200
Subject: [PATCH] Z


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 8c57dc6c5848e51a97fc0cc1683e88f1bdc1d4b9..0bf7f6b72f5b0e1beb534104cc9f16771a7dbeb5 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -9,6 +9,7 @@ import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 
 import java.util.ArrayDeque;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.Iterator;
@@ -16,7 +17,9 @@ import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
+import java.util.Set;
 import java.util.UUID;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
@@ -2950,24 +2953,27 @@ public class ServerPlayer extends Player {
         this.getBukkitEntity().updateInventory();
     }
 
-    public void resendCraftingRecipes(@Nullable ItemStack stonecutterInput, boolean first, boolean sendEvenIfOnlyAlwaysSend) {
+    private @Nullable Set<ResourceLocation> lastSentSpecificRecipeIds = null;
+
+    public void resendCraftingRecipes(@Nullable ItemStack stonecutterInput, boolean first) {
         if (stonecutterInput == null) {
             if (this.containerMenu instanceof StonecutterMenu stonecutterMenu) {
                 stonecutterInput = stonecutterMenu.container.getItem(StonecutterMenu.INPUT_SLOT);
             }
         }
         final @Nullable ItemStack finalStonecutterInput = stonecutterInput;
-        if (sendEvenIfOnlyAlwaysSend || finalStonecutterInput != null) {
-            List<Recipe<?>> alwaysSendRecipes = this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldAlwaysSend()).toList();
-            List<Recipe<?>> specificSendRecipes = this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldSendToPlayerRightNow(this, finalStonecutterInput)).toList();
-            if (sendEvenIfOnlyAlwaysSend || alwaysSendRecipes.size() != specificSendRecipes.size()) {
-                this.connection.send(new ClientboundUpdateRecipesPacket(specificSendRecipes));
-                this.getRecipeBook().sendInitialRecipeBook(this);
-            }
-        }
-        if (first && !sendEvenIfOnlyAlwaysSend) {
+        List<Recipe<?>> recipesToSend = this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldSpecificallySend(this, finalStonecutterInput)).toList();
+        Set<ResourceLocation> willSendSpecificRecipeIds = recipesToSend.stream().map(recipe -> recipe.getId()).collect(Collectors.toSet());
+        if (this.lastSentSpecificRecipeIds == null || !this.lastSentSpecificRecipeIds.equals(willSendSpecificRecipeIds)) {
+            this.lastSentSpecificRecipeIds = willSendSpecificRecipeIds;
+            recipesToSend = new ArrayList<>(recipesToSend);
+            recipesToSend.addAll(this.server.getRecipeManager().getRecipes().stream().filter(recipe -> recipe.shouldAlwaysSend()).toList());
+            this.connection.send(new ClientboundUpdateRecipesPacket(recipesToSend));
+            this.getRecipeBook().sendInitialRecipeBook(this);
+        }
+        if (first) {
             this.resendInventory();
-            Bukkit.getScheduler().runTaskLater(Bukkit.getPluginManager().getPlugins()[0], () -> this.resendCraftingRecipes(null, false, false), 1);
+            Bukkit.getScheduler().runTaskLater(Bukkit.getPluginManager().getPlugins()[0], () -> this.resendCraftingRecipes(null, false), 1);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 718547c6cfa7ef300da3a41c4468a6959002c54d..d0e83339acb184e8c1bb98a5208b5a5efb47a23a 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2005,12 +2005,12 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             // Resend most of the potentially already sent data if we previously thought the player had accepted the resource pack, but now they no longer do
             this.player.resendInventory();
             this.player.resendAllSentChunks();
-            this.player.resendCraftingRecipes(null, true, true);
+            this.player.resendCraftingRecipes(null, false);
             this.player.resendAdvancements();
         } else if (oldPackStatus == null && (packStatus == PlayerResourcePackStatusEvent.Status.ACCEPTED || packStatus == PlayerResourcePackStatusEvent.Status.SUCCESSFULLY_LOADED)) {
             // Resend their inventory (we have not sent any chunks yet if this is true, so we do not need to resend any)
             this.player.resendInventory();
-            this.player.resendCraftingRecipes(null, true, true);
+            this.player.resendCraftingRecipes(null, false);
             this.player.resendAdvancements();
         }
         // Martijn end - custom blocks and items
@@ -3093,7 +3093,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
                         if (this.player.containerMenu instanceof StonecutterMenu stonecutterMenu) {
                             ItemStack intoInputStack = ItemReplacementRule.reverseReplacement(packet.getChangedSlots().get(StonecutterMenu.INPUT_SLOT));
                             if (intoInputStack != null) {
-                                this.player.resendCraftingRecipes(intoInputStack, true, false);
+                                this.player.resendCraftingRecipes(intoInputStack, true);
                             }
                         }
 
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index bb1713274b4822383b54210cf7e141ca6477d665..4c9d8322633a1a8a51594c7194146ad170a557a1 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -78,7 +78,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
                 StonecutterMenu.this.slotsChanged(this);
                 StonecutterMenu.this.slotUpdateListener.run();
                 // Martijn start - custom blocks and items
-                ((CraftPlayer) StonecutterMenu.this.player).getHandle().resendCraftingRecipes(null, true, false);
+                ((CraftPlayer) StonecutterMenu.this.player).getHandle().resendCraftingRecipes(null, true);
 //                Bukkit.getScheduler().runTaskLater(Bukkit.getPluginManager().getPlugins()[0], () ->
 //                    ((CraftPlayer) StonecutterMenu.this.player).getHandle().resendCraftingRecipes(), 1
 //                );
diff --git a/src/main/java/net/minecraft/world/item/crafting/Recipe.java b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
index fafe5f42903f569b536d85709f564111a8fc3644..8f5d7ade5663f489ce3ffa425cd0aa64eb9e3683 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Recipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Recipe.java
@@ -27,8 +27,12 @@ public interface Recipe<C extends Container> {
         return true;
     }
 
-    default boolean shouldSendToPlayerRightNow(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
-        return true;
+    default boolean shouldSpecificallySend(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
+        return false;
+    }
+
+    default boolean shouldSendRightNow(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
+        return this.shouldAlwaysSend() || this.shouldSpecificallySend(player, stonecutterInput);
     }
 
     // Martijn end - custom blocks and items
diff --git a/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java b/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
index f20706b47195460088270fc14e75c49e3bfeeb0e..d37a02e754110e64024a204dcb4ab109326c98d6 100644
--- a/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/StonecutterRecipe.java
@@ -64,9 +64,9 @@ public class StonecutterRecipe extends SingleItemRecipe {
     }
 
     @Override
-    public boolean shouldSendToPlayerRightNow(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
+    public boolean shouldSpecificallySend(@NotNull ServerPlayer player, @Nullable ItemStack stonecutterInput) {
         if (!isCustom) {
-            return super.shouldSendToPlayerRightNow(player, stonecutterInput);
+            return super.shouldSpecificallySend(player, stonecutterInput);
         }
         if (stonecutterInput == null) {
             return false;
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 2d889e85f1da7843d8e0ebf43c201644218804d9..2ef7f2430af0aa1ddb1ebc00f040feabb4aaf820 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -285,7 +285,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     public @NotNull Block withCustomSlabStonecutterRecipe(@NotNull Block ingredient, @Nullable String group) {
         @NotNull String uniqueRecipeDescription = id.getPath() + "_from_" +  ingredient.id.getPath() + "_stonecutting";
-        System.out.println("Custom slab stonecutter recipe: " + uniqueRecipeDescription + " = " + ingredient.id + " -> " + this.id);
+//        System.out.println("TEMP DEBUG - Custom slab stonecutter recipe: " + uniqueRecipeDescription + " = " + ingredient.id + " -> " + this.id);
         return this.withCustomStonecutterRecipe(new CustomStonecutterRecipe(ResourceLocation.sucraft(uniqueRecipeDescription), group, ingredient, 2));
     }
 
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index f7bff66a7ab3c5cce2b2401665fca5bcf6ce08d3..2e37b3fb79c53a4432f997c95047d1e71173909f 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -319,6 +319,7 @@ public class SuCraftItems {
     public static final Item PAPER_SLAB = registerSlab(SuCraftBlocks.PAPER_SLAB, "Paper");
     public static final Item QUARTZ_SPIRAL_MEANDER = registerBlock(SuCraftBlocks.QUARTZ_SPIRAL_MEANDER, "Quartz Meander", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.CHISELED_QUARTZ_BLOCK));
     public static final Item QUARTZ_SPIRAL_MEANDER_SLAB = registerSlab(SuCraftBlocks.QUARTZ_SPIRAL_MEANDER_SLAB, "Quartz Meander");
+    public static final Item ENDER_PEARL_BLOCK = registerBlock(SuCraftBlocks.ENDER_PEARL_BLOCK, "Ender Pearl Block", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHighPingHost(() -> Items.DARK_PRISMARINE));
 
     private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
