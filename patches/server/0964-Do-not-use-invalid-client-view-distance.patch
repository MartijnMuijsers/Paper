From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 7 Jun 2022 12:14:35 +0200
Subject: [PATCH] Do not use invalid client view distance


diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
index 177306cc9c6092a9da9c4889ff9e7ca620a5ec8f..974896bfddb8dbb9be2459deb6e4303f562a48f0 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundClientInformationPacket.java
@@ -6,10 +6,21 @@ import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.player.ChatVisiblity;
 
 public record ServerboundClientInformationPacket(String language, int viewDistance, ChatVisiblity chatVisibility, boolean chatColors, int modelCustomisation, HumanoidArm mainHand, boolean textFilteringEnabled, boolean allowsListing) implements Packet<ServerGamePacketListener> {
-    public final String language;
-    public final int viewDistance;
+
     public static final int MAX_LANGUAGE_LENGTH = 16;
 
+    // Martijn start - do not use invalid client view distance
+    public static final int MAX_USED_VIEW_DISTANCE = 127;
+
+    public int getAcceptableViewDistance() {
+        if (viewDistance < 0) {
+            // While the type of the field is a 32-bit int here, the type used in the packet is a signed 8-bit byte, so any values below 0 likely represent values above 127 in the client (some mods allow view distances of 128 or higher)
+            return MAX_USED_VIEW_DISTANCE;
+        }
+        return Math.min(viewDistance, MAX_USED_VIEW_DISTANCE);
+    }
+    // Martijn end - do not use invalid client view distance
+
     public ServerboundClientInformationPacket(FriendlyByteBuf buf) {
         this(buf.readUtf(16), buf.readByte(), buf.readEnum(ChatVisiblity.class), buf.readBoolean(), buf.readUnsignedByte(), buf.readEnum(HumanoidArm.class), buf.readBoolean(), buf.readBoolean());
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 5b3602ae99715b728d9b22f116b70973cec8254b..b04dc93bfa7a0e824908148b34302ece7136ec7d 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2289,23 +2289,23 @@ public class ServerPlayer extends Player {
     public String locale = null; // CraftBukkit - add, lowercase // Paper - default to null
     public java.util.Locale adventure$locale = java.util.Locale.US; // Paper
     public void updateOptions(ServerboundClientInformationPacket packet) {
-        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(getBukkitEntity(), packet.language, packet.viewDistance, com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(packet.chatVisibility().name()), packet.chatColors(), new com.destroystokyo.paper.PaperSkinParts(packet.modelCustomisation()), packet.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT).callEvent(); // Paper - settings event
+        new com.destroystokyo.paper.event.player.PlayerClientOptionsChangeEvent(getBukkitEntity(), packet.language(), packet.getAcceptableViewDistance(), com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(packet.chatVisibility().name()), packet.chatColors(), new com.destroystokyo.paper.PaperSkinParts(packet.modelCustomisation()), packet.mainHand() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT).callEvent(); // Paper - settings event // Martijn - do not use invalid client view distance
         // CraftBukkit start
         if (getMainArm() != packet.mainHand()) {
             PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(this.getBukkitEntity(), getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT);
             this.server.server.getPluginManager().callEvent(event);
         }
-        if (this.locale == null || !this.locale.equals(packet.language)) { // Paper - check for null
-            PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(this.getBukkitEntity(), packet.language);
+        if (this.locale == null || !this.locale.equals(packet.language())) { // Paper - check for null // Martijn - do not use invalid client view distance
+            PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(this.getBukkitEntity(), packet.language()); // Martijn - do not use invalid client view distance
             this.server.server.getPluginManager().callEvent(event);
-            this.server.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerLocaleChangeEvent(this.getBukkitEntity(), this.locale, packet.language)); // Paper
+            this.server.server.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerLocaleChangeEvent(this.getBukkitEntity(), this.locale, packet.language())); // Paper // Martijn - do not use invalid client view distance
         }
-        this.locale = packet.language;
+        this.locale = packet.language(); // Martijn - do not use invalid client view distance
         // Paper start
         this.adventure$locale = net.kyori.adventure.translation.Translator.parseLocale(this.locale);
         this.connection.connection.channel.attr(PaperAdventure.LOCALE_ATTRIBUTE).set(this.adventure$locale);
         // Paper end
-        this.clientViewDistance = packet.viewDistance;
+        this.clientViewDistance = packet.getAcceptableViewDistance(); // Martijn - do not use invalid client view distance
         // Martijn start - per-player view distance
         this.trackViewDistanceMayHaveChanged();
         this.seeViewDistanceMayHaveChanged();
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 1b2d261444b31c2da9a4b87e4385356ef671deb6..e63513b20a0afbb599724be6301b18fc51c25d82 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -3217,9 +3217,9 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
         // Paper start - do not accept invalid information
         if (packet.viewDistance() < 0) {
-            LOGGER.warn("Disconnecting " + this.player.getScoreboardName() + " for invalid view distance: " + packet.viewDistance());
-            this.disconnect("Invalid client settings", PlayerKickEvent.Cause.ILLEGAL_ACTION);
-            return;
+            // Martijn start - do not use invalid client view distance
+            LOGGER.warn(this.player.getScoreboardName() + " sent an invalid view distance: " + packet.viewDistance());
+            // Martijn end - do not use invalid client view distance
         }
         // Paper end - do not accept invalid information
         this.player.updateOptions(packet);
