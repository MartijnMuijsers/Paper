From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Tue, 18 Jan 2022 14:33:49 +0100
Subject: [PATCH] Configurable keepalive mechanics


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 4a14eb59541347aa8e9504ac156e9b63d1bdfd69..a663f7fc11b75d5ed3127f8144fc65f5cba68e41 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -91,6 +91,33 @@ public class PaperConfig {
         }
     }
 
+    // Martijn start - configurable keepalive
+
+    /**
+     * In milliseconds
+     */
+    public static int keepaliveSendInterval = 15000; // 15 seconds
+    private static void keepaliveSendInterval() {
+        keepaliveSendInterval = getInt("settings.keepalive.send-interval", keepaliveSendInterval);
+    }
+
+    public static boolean kickForLateKeepaliveResponse = true;
+    private static void kickForLateKeepaliveResponse() {
+        kickForLateKeepaliveResponse = getBoolean("settings.keepalive.kick.late-response", kickForLateKeepaliveResponse);
+    }
+
+    public static boolean kickForWrongKeepaliveResponseId = true;
+    private static void kickForWrongKeepaliveResponseId() {
+        kickForWrongKeepaliveResponseId = getBoolean("settings.keepalive.kick.wrong-response-id", kickForWrongKeepaliveResponseId);
+    }
+
+    public static boolean kickForUnexpectedKeepaliveResponse = true;
+    private static void kickForUnexpectedKeepaliveResponse() {
+        kickForUnexpectedKeepaliveResponse = getBoolean("settings.keepalive.kick.unexpected-response", kickForUnexpectedKeepaliveResponse);
+    }
+
+    // Martijn end - configurable keepalive
+
     public static boolean logPlayerIpAddresses = true;
     private static void playerIpAddresses() {
         logPlayerIpAddresses = getBoolean("settings.log-player-ip-addresses", logPlayerIpAddresses);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 5c9310fe424943a7256f6f77c414147384bad0aa..2b1c0e420bcf665c6d58d8690cb91c885f3268ec 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.network;
 
+import com.destroystokyo.paper.PaperConfig;
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Floats;
 import com.mojang.brigadier.ParseResults;
@@ -360,12 +361,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         long elapsedTime = currentTime - this.keepAliveTime;
 
         if (this.keepAlivePending) {
-            if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
-                ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
-                this.disconnect(new TranslatableComponent("disconnect.timeout", new Object[0]), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+            // Martijn start - no disconnect on late or wrong keepalive
+            if (PaperConfig.kickForLateKeepaliveResponse) {
+                if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
+                    ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked due to keepalive timeout!", this.player.getScoreboardName()); // more info
+                    this.disconnect(new TranslatableComponent("disconnect.timeout", new Object[0]), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                }
             }
+            // Martijn end - no disconnect on late or wrong keepalive
         } else {
-            if (elapsedTime >= 15000L) { // 15 seconds
+            if (elapsedTime >= PaperConfig.keepaliveSendInterval) { // Martijn - configurable keepalive
                 this.keepAlivePending = true;
                 this.keepAliveTime = currentTime;
                 this.keepAliveChallenge = currentTime;
@@ -3108,11 +3113,16 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             this.player.latency = (this.player.latency * 3 + i) / 4;
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
-            // Paper start - This needs to be handled on the main thread for plugins
-            server.submit(() -> {
-            this.disconnect(new TranslatableComponent("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
-            });
-            // Paper end
+            // Martijn start - no disconnect on late or wrong keepalive
+            // Do not disconnect when keepalive challenge is wrong
+            if (!((packet.getId() == this.keepAliveChallenge || !PaperConfig.kickForWrongKeepaliveResponseId) && (this.keepAlivePending || !PaperConfig.kickForUnexpectedKeepaliveResponse))) {
+                // Paper start - This needs to be handled on the main thread for plugins
+                server.submit(() -> {
+                    this.disconnect(new TranslatableComponent("disconnect.timeout"), org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
+                });
+                // Paper end
+            }
+            // Martijn end - no disconnect on late or wrong keepalive
         }
 
     }
