From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Mon, 4 Jul 2022 23:55:12 +0200
Subject: [PATCH] Add colored planks


diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 7d16c59dd196e24d313d3146fb74a201c9063ae0..0497da6ca4b0c0d144936f59d5c9c582d02da2a5 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -17,6 +17,7 @@ import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.util.Mth;
@@ -75,6 +76,13 @@ public class Item implements ItemLike {
 
     public boolean isVanilla = true;
 
+    /**
+     * This is the {@link ResourceLocation} for this item
+     * <br>
+     * Must be non-null for SuCraft items
+     */
+    public @Nullable ResourceLocation customKey;
+
     /**
      * Must be non-null for SuCraft items
      */
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 705f1f0743d9895753a3d7bd292e0bab969a8b2e..6aafd634ee28cd149548d8d0dc64a341900bb6a7 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -21,6 +21,7 @@ import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.stats.Stats;
 import net.minecraft.tags.BlockTags;
@@ -152,6 +153,13 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     public boolean isVanilla = true;
 
+    /**
+     * This is the {@link ResourceLocation} for this block
+     * <br>
+     * Must be non-null for SuCraft blocks
+     */
+    public @Nullable ResourceLocation customKey;
+
     public @Nullable Item customItemForBlock = null;
 
     /**
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
index 69c2072a151edb0b056f26dc6dfae40489f95906..a4fe861de390e8e5eb1b943195809acd946fd785 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/BlockReplacementRule.java
@@ -244,8 +244,8 @@ public interface BlockReplacementRule {
         }
 
         private final @NotNull Block real;
-        private final @NotNull BlockState host;
-        private final @NotNull BlockState hostReplacement;
+        public final @NotNull BlockState host;
+        public final @NotNull BlockState hostReplacement;
 
         /**
          * May be null if this block has no item form, must be non-null if this block has an item form
@@ -263,7 +263,7 @@ public interface BlockReplacementRule {
          */
         private @Nullable Supplier<@NotNull Item> hostItemSupplier;
 
-        private final @NotNull BlockState fallback;
+        public final @NotNull BlockState fallback;
 
         /**
          * May be null if this block has no item form, must be non-null if this block has an item form
diff --git a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
index ba3f8d933e091a265ac616d7fc436b80d491ce81..ba4a7ed5848f659356e6b98b191a9f4f2cfeb7b6 100644
--- a/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
+++ b/src/main/java/nl/martijnmuijsers/paper/block/SuCraftBlocks.java
@@ -30,78 +30,10 @@ import java.util.function.Supplier;
  */
 public class SuCraftBlocks {
 
-    /**
-     * Based on {@link Blocks#STONE_BRICKS}
-     */
-    public static final Block SNOWY_STONE_BRICKS = register(
-        "snowy_stone_bricks",
-        BlockReplacementRule.stateless()
-            .withHost(Blocks.INFESTED_STONE_BRICKS)
-            .withHostReplacement(Blocks.STONE_BRICKS)
-            .withFullBlockBoundingBoxHostItem()
-            .withFallback(Blocks.STONE_BRICKS)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModel(Model.OneTextureCube.defaultCreation()),
-        new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
-        SuCraftBlockLoot::dropSelf
-    );
-
-    /**
-     * Based on {@link #SNOWY_STONE_BRICKS}
-     */
-    public static final Block DIRTY_STONE_BRICKS = register(
-        "dirty_stone_bricks",
-        BlockReplacementRule.stateless()
-            .withHost(Blocks.INFESTED_CRACKED_STONE_BRICKS)
-            .withHostReplacement(Blocks.CRACKED_STONE_BRICKS)
-            .withFullBlockBoundingBoxHostItem()
-            .withFallback(Blocks.STONE_BRICKS)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModel(Model.OneTextureCube.defaultCreation()),
-        new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
-        SuCraftBlockLoot::dropSelf
-    );
-
-    /**
-     * Based on {@link Blocks#INFESTED_STONE_BRICKS} and {@link #SNOWY_STONE_BRICKS}
-     */
-    public static final Block INFESTED_SNOWY_STONE_BRICKS = register(
-        "infested_snowy_stone_bricks",
-        BlockReplacementRule.stateless()
-            .withHost(Blocks.INFESTED_STONE_BRICKS)
-            .withHostReplacement(Blocks.STONE_BRICKS)
-            .withFullBlockBoundingBoxHostItem()
-            .withFallback(Blocks.STONE_BRICKS)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModelSameAsStatelessBlock(SNOWY_STONE_BRICKS),
-        new InfestedBlock(SNOWY_STONE_BRICKS, BlockBehaviour.Properties.of(Material.CLAY), false),
-        block -> SuCraftBlockLoot.dropSingleItemWhenSilkTouch(SNOWY_STONE_BRICKS)
-    );
-
-    /**
-     * Based on {@link #INFESTED_SNOWY_STONE_BRICKS} and {@link #DIRTY_STONE_BRICKS}
-     */
-    public static final Block INFESTED_DIRTY_STONE_BRICKS = register(
-        "infested_dirty_stone_bricks",
-        BlockReplacementRule.stateless()
-            .withHost(Blocks.INFESTED_CRACKED_STONE_BRICKS)
-            .withHostReplacement(Blocks.CRACKED_STONE_BRICKS)
-            .withFullBlockBoundingBoxHostItem()
-            .withFallback(Blocks.STONE_BRICKS)
-            .withFallbackBlockAsFallbackItem()
-            .withHostReplacingItemFromHostBlock()
-            .withHostReplacingItemReplacementFromHostReplacementBlock()
-            .withModelSameAsStatelessBlock(DIRTY_STONE_BRICKS),
-        new InfestedBlock(DIRTY_STONE_BRICKS, BlockBehaviour.Properties.of(Material.CLAY), false),
-        block -> SuCraftBlockLoot.dropSingleItemWhenSilkTouch(DIRTY_STONE_BRICKS)
-    );
-
+    public static final Block SNOWY_STONE_BRICKS = registerStoneBricks("snowy", Blocks.INFESTED_STONE_BRICKS, Blocks.STONE_BRICKS, Blocks.STONE_BRICKS);
+    public static final Block DIRTY_STONE_BRICKS = registerStoneBricks("dirty", Blocks.INFESTED_CRACKED_STONE_BRICKS, Blocks.CRACKED_STONE_BRICKS, Blocks.STONE_BRICKS);
+    public static final Block INFESTED_SNOWY_STONE_BRICKS = registerInfested(SNOWY_STONE_BRICKS);
+    public static final Block INFESTED_DIRTY_STONE_BRICKS = registerInfested(DIRTY_STONE_BRICKS);
     public static final Block SPRUCE_BOOKSHELF = registerBookshelf("spruce");
     public static final Block BIRCH_BOOKSHELF = registerBookshelf("birch");
     public static final Block JUNGLE_BOOKSHELF = registerBookshelf("jungle");
@@ -110,14 +42,32 @@ public class SuCraftBlocks {
     public static final Block WARPED_BOOKSHELF = registerBookshelf("warped");
     public static final Block CRIMSON_BOOKSHELF = registerBookshelf("crimson");
 //    public static final Block MANGROVE_BOOKSHELF = registerBookshelf("mangrove");
+    public static final Block BLACK_PLANKS = registerPlanks("black", Blocks.DARK_OAK_PLANKS);
+    public static final Block BLUE_PLANKS = registerPlanks("blue", Blocks.WARPED_PLANKS);
+    public static final Block BROWN_PLANKS = registerPlanks("brown", Blocks.SPRUCE_PLANKS);
+    public static final Block CYAN_PLANKS = registerPlanks("cyan", Blocks.WARPED_PLANKS);
+    public static final Block GRAY_PLANKS = registerPlanks("gray", Blocks.OAK_PLANKS);
+    public static final Block GREEN_PLANKS = registerPlanks("green", Blocks.WARPED_PLANKS);
+    public static final Block LIGHT_BLUE_PLANKS = registerPlanks("light_blue", Blocks.WARPED_PLANKS);
+    public static final Block LIGHT_GRAY_PLANKS = registerPlanks("light_gray", Blocks.SPRUCE_PLANKS);
+    public static final Block LIME_PLANKS = registerPlanks("lime", Blocks.WARPED_PLANKS);
+    public static final Block MAGENTA_PLANKS = registerPlanks("magenta", Blocks.CRIMSON_PLANKS);
+    public static final Block ORANGE_PLANKS = registerPlanks("orange", Blocks.ACACIA_PLANKS);
+    public static final Block PINK_PLANKS = registerPlanks("pink", Blocks.JUNGLE_PLANKS);
+    public static final Block PURPLE_PLANKS = registerPlanks("purple", Blocks.CRIMSON_PLANKS);
+    public static final Block RED_PLANKS = registerPlanks("red", Blocks.MANGROVE_PLANKS);
+    public static final Block WHITE_PLANKS = registerPlanks("white", Blocks.BIRCH_PLANKS);
+    public static final Block YELLOW_PLANKS = registerPlanks("yellow", Blocks.BIRCH_PLANKS);
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRule.Builder<?> replacementRuleBuilder, @NotNull Block block, @Nullable Supplier<@Nullable LootTable> lootTableSupplier) {
         return register(id, replacementRuleBuilder, block, lootTableSupplier == null ? null : ($ -> lootTableSupplier.get()));
     }
 
     private static @NotNull Block register(@NotNull String id, @NotNull BlockReplacementRule.Builder<?> replacementRuleBuilder, @NotNull Block block, @Nullable Function<@NotNull Block, @Nullable LootTable> lootTableFunction) {
-        @NotNull Block registeredBlock = Registry.register(Registry.BLOCK, ResourceLocation.sucraft(id), block);
+        ResourceLocation key = ResourceLocation.sucraft(id);
+        @NotNull Block registeredBlock = Registry.register(Registry.BLOCK, key, block);
         registeredBlock.isVanilla = false;
+        registeredBlock.customKey = key;
         registeredBlock.replacementRule = replacementRuleBuilder.withReal(registeredBlock).build();
         // Patch the break time, because the vanilla client will assume its own breaking time and if we do not allow for it, we get desync in whether the block is finished being broken
         registeredBlock.replacementRule.updateMinDestroyTimes();
@@ -125,6 +75,57 @@ public class SuCraftBlocks {
         return registeredBlock;
     }
 
+    /**
+     * Based on {@link Blocks#STONE_BRICKS}
+     */
+    private static @NotNull Block registerStoneBricks(@NotNull String type, @NotNull Block host, @NotNull Block hostReplacement, @NotNull Block fallback) {
+        return register(
+            type + "_stone_bricks",
+            BlockReplacementRule.stateless()
+                .withHost(host)
+                .withHostReplacement(hostReplacement)
+                .withFullBlockBoundingBoxHostItem()
+                .withFallback(fallback)
+                .withFallbackBlockAsFallbackItem()
+                .withHostReplacingItemFromHostBlock()
+                .withHostReplacingItemReplacementFromHostReplacementBlock()
+                .withModel(Model.OneTextureCube.defaultCreation()),
+            new Block(BlockBehaviour.Properties.of(Material.STONE).strength(1.5F, 6.0F)),
+            SuCraftBlockLoot::dropSelf
+        );
+    }
+
+    /**
+     * Based on {@link Blocks#INFESTED_STONE_BRICKS} and {@link #registerStoneBricks}
+     */
+    public static @NotNull Block registerInfested(@NotNull Block uninfested) {
+        if (uninfested.isVanilla) {
+            throw new IllegalArgumentException("registerInfestedStoneBricks works only on uninfested custom blocks");
+        }
+        BlockReplacementRule replacementRule = uninfested.replacementRule;
+        if (replacementRule == null) {
+            throw new IllegalStateException("registerInfestedStoneBricks was called with an uninfested custom block for which replacementRule was not initialized yet");
+        }
+        if (replacementRule instanceof BlockReplacementRule.StatelessBlockReplacementRule statelessBlockReplacementRule) {
+            return register(
+                "infested_" + uninfested.customKey.getPath(),
+                BlockReplacementRule.stateless()
+                    .withHost(statelessBlockReplacementRule.host)
+                    .withHostReplacement(statelessBlockReplacementRule.hostReplacement)
+                    .withFullBlockBoundingBoxHostItem()
+                    .withFallback(statelessBlockReplacementRule.fallback)
+                    .withFallbackBlockAsFallbackItem()
+                    .withHostReplacingItemFromHostBlock()
+                    .withHostReplacingItemReplacementFromHostReplacementBlock()
+                    .withModelSameAsStatelessBlock(uninfested),
+                new InfestedBlock(uninfested, BlockBehaviour.Properties.of(Material.CLAY), false),
+                block -> SuCraftBlockLoot.dropSingleItemWhenSilkTouch(uninfested)
+            );
+        } else {
+            throw new IllegalArgumentException("registerInfestedStoneBricks works only on uninfested custom blocks with a replacement rule of type StatelessBlockReplacementRule");
+        }
+    }
+
     /**
      * Based on {@link Blocks#BOOKSHELF}
      */
@@ -144,6 +145,25 @@ public class SuCraftBlocks {
         );
     }
 
+    /**
+     * Based on {@link Blocks#OAK_PLANKS}
+     */
+    private static @NotNull Block registerPlanks(@NotNull String description, @NotNull Block fallback) {
+        return register(
+            description + "_planks",
+            BlockReplacementRule.stateless()
+                .withNoteBlockHost()
+                .withFullBlockBoundingBoxHostItem()
+                .withFallback(fallback)
+                .withFallbackBlockAsFallbackItem()
+                .withHostReplacingItemFromHostBlock()
+                .withHostReplacingItemReplacementFromHostReplacementBlock()
+                .withModel(Model.OneTextureCube.defaultCreation()),
+            new Block(BlockBehaviour.Properties.of(Material.WOOD).strength(2.0F, 3.0F).sound(SoundType.WOOD)),
+            SuCraftBlockLoot::dropSelf
+        );
+    }
+
     public static Block bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         return SNOWY_STONE_BRICKS;
diff --git a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
index df401ab97834696d873b8a8fcc52512e391cf8c2..5a1c57856532435d79499803a37aa2a5e8547ccd 100644
--- a/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
+++ b/src/main/java/nl/martijnmuijsers/paper/item/SuCraftItems.java
@@ -19,6 +19,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 import java.util.function.Function;
+import java.util.function.Supplier;
 
 /**
  * Based on {@link net.minecraft.world.item.Items}
@@ -27,74 +28,44 @@ public class SuCraftItems {
 
     public static final @NotNull ChatFormatting CUSTOM_DISPLAY_NAME_IN_LORE_DEFAULT_COLOR = ChatFormatting.DARK_GRAY;
 
-    /**
-     * Based on {@link Items#STONE_BRICKS}
-     */
-    public static final Item SNOWY_STONE_BRICKS = registerBlock(SuCraftBlocks.SNOWY_STONE_BRICKS, "Snowy Stone Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.STONE_BRICKS));
-
-    /**
-     * Based on {@link #SNOWY_STONE_BRICKS}
-     */
-    public static final Item DIRTY_STONE_BRICKS = registerBlock(SuCraftBlocks.DIRTY_STONE_BRICKS, "Dirty Stone Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.STONE_BRICKS));
-
-    /**
-     * Based on {@link Items#INFESTED_STONE_BRICKS} and {@link #SNOWY_STONE_BRICKS}
-     */
-    public static final Item INFESTED_SNOWY_STONE_BRICKS = registerBlock(SuCraftBlocks.INFESTED_SNOWY_STONE_BRICKS, "Infested Snowy Stone Bricks", CreativeModeTab.TAB_DECORATIONS, rule -> rule.withHost(() -> Items.STONE_BRICKS));
-
-    /**
-     * Based on {@link #INFESTED_SNOWY_STONE_BRICKS} and {@link #DIRTY_STONE_BRICKS}
-     */
-    public static final Item INFESTED_DIRTY_STONE_BRICKS = registerBlock(SuCraftBlocks.INFESTED_DIRTY_STONE_BRICKS, "Infested Dirty Stone Bricks", CreativeModeTab.TAB_DECORATIONS, rule -> rule.withHost(() -> Items.STONE_BRICKS));
-
-    /**
-     * Based on {@link Items#BOOKSHELF}
-     */
-    public static final Item SPRUCE_BOOKSHELF = registerBlock(SuCraftBlocks.SPRUCE_BOOKSHELF, "Spruce Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.SPRUCE_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-    public static final Item BIRCH_BOOKSHELF = registerBlock(SuCraftBlocks.BIRCH_BOOKSHELF, "Birch Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.BIRCH_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-    public static final Item JUNGLE_BOOKSHELF = registerBlock(SuCraftBlocks.JUNGLE_BOOKSHELF, "Jungle Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.JUNGLE_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-    public static final Item ACACIA_BOOKSHELF = registerBlock(SuCraftBlocks.ACACIA_BOOKSHELF, "Acacia Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.ACACIA_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-    public static final Item DARK_OAK_BOOKSHELF = registerBlock(SuCraftBlocks.DARK_OAK_BOOKSHELF, "Dark Oak Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.DARK_OAK_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-    public static final Item WARPED_BOOKSHELF = registerBlock(SuCraftBlocks.WARPED_BOOKSHELF, "Warped Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.WARPED_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-    public static final Item CRIMSON_BOOKSHELF = registerBlock(SuCraftBlocks.CRIMSON_BOOKSHELF, "Crimson Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.CRIMSON_PLANKS));
-
-    /**
-     * Based on {@link #SPRUCE_BOOKSHELF}
-     */
-//    public static final Item MANGROVE_BOOKSHELF = registerBlock(SuCraftBlocks.MANGROVE_BOOKSHELF, "Mangrove Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(() -> Items.MANGROVE_PLANKS));
-
-    public static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
+    public static final Item SNOWY_STONE_BRICKS = registerStoneBricks(SuCraftBlocks.SNOWY_STONE_BRICKS, "Snowy", () -> Items.STONE_BRICKS);
+    public static final Item DIRTY_STONE_BRICKS = registerStoneBricks(SuCraftBlocks.DIRTY_STONE_BRICKS, "Dirty", () -> Items.STONE_BRICKS);
+    public static final Item INFESTED_SNOWY_STONE_BRICKS = registerInfested(SuCraftBlocks.INFESTED_SNOWY_STONE_BRICKS, "Snowy Stone Bricks", () -> Items.STONE_BRICKS);
+    public static final Item INFESTED_DIRTY_STONE_BRICKS = registerInfested(SuCraftBlocks.INFESTED_DIRTY_STONE_BRICKS, "Dirty Stone Bricks", () -> Items.STONE_BRICKS);
+    public static final Item SPRUCE_BOOKSHELF = registerBookshelf(SuCraftBlocks.SPRUCE_BOOKSHELF, "Spruce", () -> Items.SPRUCE_PLANKS);
+    public static final Item BIRCH_BOOKSHELF = registerBookshelf(SuCraftBlocks.BIRCH_BOOKSHELF, "Birch", () -> Items.BIRCH_PLANKS);
+    public static final Item JUNGLE_BOOKSHELF = registerBookshelf(SuCraftBlocks.JUNGLE_BOOKSHELF, "Jungle", () -> Items.JUNGLE_PLANKS);
+    public static final Item ACACIA_BOOKSHELF = registerBookshelf(SuCraftBlocks.ACACIA_BOOKSHELF, "Acacia", () -> Items.ACACIA_PLANKS);
+    public static final Item DARK_OAK_BOOKSHELF = registerBookshelf(SuCraftBlocks.DARK_OAK_BOOKSHELF, "Dark Oak", () -> Items.DARK_OAK_PLANKS);
+    public static final Item WARPED_BOOKSHELF = registerBookshelf(SuCraftBlocks.WARPED_BOOKSHELF, "Warped", () -> Items.WARPED_PLANKS);
+    public static final Item CRIMSON_BOOKSHELF = registerBookshelf(SuCraftBlocks.CRIMSON_BOOKSHELF, "Crimson", () -> Items.CRIMSON_PLANKS);
+//    public static final Item MANGROVE_BOOKSHELF = registerBookshelf(SuCraftBlocks.MANGROVE_BOOKSHELF, "Mangrove", () -> Items.MANGROVE_PLANKS);
+    public static final Item BLACK_PLANKS = registerPlanks(SuCraftBlocks.BLACK_PLANKS, "Black", () -> Items.BLACK_CONCRETE);;
+    public static final Item BLUE_PLANKS = registerPlanks(SuCraftBlocks.BLUE_PLANKS, "Blue", () -> Items.BLUE_CONCRETE);;
+    public static final Item BROWN_PLANKS = registerPlanks(SuCraftBlocks.BROWN_PLANKS, "Brown", () -> Items.BROWN_CONCRETE);;
+    public static final Item CYAN_PLANKS = registerPlanks(SuCraftBlocks.CYAN_PLANKS, "Cyan", () -> Items.CYAN_CONCRETE);;
+    public static final Item GRAY_PLANKS = registerPlanks(SuCraftBlocks.GRAY_PLANKS, "Gray", () -> Items.GRAY_CONCRETE);;
+    public static final Item GREEN_PLANKS = registerPlanks(SuCraftBlocks.GREEN_PLANKS, "Green", () -> Items.GREEN_CONCRETE);;
+    public static final Item LIGHT_BLUE_PLANKS = registerPlanks(SuCraftBlocks.LIGHT_BLUE_PLANKS, "Light Blue", () -> Items.LIGHT_BLUE_CONCRETE);;
+    public static final Item LIGHT_GRAY_PLANKS = registerPlanks(SuCraftBlocks.LIGHT_GRAY_PLANKS, "Light Gray", () -> Items.LIGHT_GRAY_CONCRETE);;
+    public static final Item LIME_PLANKS = registerPlanks(SuCraftBlocks.LIME_PLANKS, "Lime", () -> Items.LIME_CONCRETE);;
+    public static final Item MAGENTA_PLANKS = registerPlanks(SuCraftBlocks.MAGENTA_PLANKS, "Magenta", () -> Items.MAGENTA_CONCRETE);;
+    public static final Item ORANGE_PLANKS = registerPlanks(SuCraftBlocks.ORANGE_PLANKS, "Orange", () -> Items.ORANGE_CONCRETE);;
+    public static final Item PINK_PLANKS = registerPlanks(SuCraftBlocks.PINK_PLANKS, "Pink", () -> Items.PINK_CONCRETE);;
+    public static final Item PURPLE_PLANKS = registerPlanks(SuCraftBlocks.PURPLE_PLANKS, "Purple", () -> Items.PURPLE_CONCRETE);;
+    public static final Item RED_PLANKS = registerPlanks(SuCraftBlocks.RED_PLANKS, "Red", () -> Items.RED_CONCRETE);;
+    public static final Item WHITE_PLANKS = registerPlanks(SuCraftBlocks.WHITE_PLANKS, "White", () -> Items.WHITE_CONCRETE);;
+    public static final Item YELLOW_PLANKS = registerPlanks(SuCraftBlocks.YELLOW_PLANKS, "Yellow", () -> Items.YELLOW_CONCRETE);;
+
+    private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group) {
         return registerBlock(block, displayName, group, null);
     }
 
-    public static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group, @Nullable Function<ItemReplacementRule.SimpleItemReplacementRule.Builder, ItemReplacementRule.SimpleItemReplacementRule.Builder> replacementRuleFunction) {
+    private static @NotNull Item registerBlock(@NotNull Block block, @NotNull String displayName, CreativeModeTab group, @Nullable Function<ItemReplacementRule.SimpleItemReplacementRule.Builder, ItemReplacementRule.SimpleItemReplacementRule.Builder> replacementRuleFunction) {
         Item registeredItem = Items.registerBlock(block, group);
         block.customItemForBlock = registeredItem;
         registeredItem.isVanilla = false;
+        registeredItem.customKey = block.customKey;
         var replacementRuleBuilder = ItemReplacementRule.simple().withReal(registeredItem).forBlock(block);
         if (replacementRuleFunction != null) {
             replacementRuleBuilder = replacementRuleFunction.apply(replacementRuleBuilder);
@@ -107,6 +78,34 @@ public class SuCraftItems {
         return registeredItem;
     }
 
+    /**
+     * Based on {@link Items#STONE_BRICKS}
+     */
+    private static @NotNull Item registerStoneBricks(@NotNull Block block, @NotNull String typeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
+        return registerBlock(block, typeDisplayName + " Stone Bricks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    }
+
+    /**
+     * Based on {@link Items#INFESTED_STONE_BRICKS}
+     */
+    private static @NotNull Item registerInfested(@NotNull Block block, @NotNull String uninfestedDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
+        return registerBlock(block, "Infested " + uninfestedDisplayName, CreativeModeTab.TAB_DECORATIONS, rule -> rule.withHost(hostSupplier));
+    }
+
+    /**
+     * Based on {@link Items#BOOKSHELF}
+     */
+    private static @NotNull Item registerBookshelf(@NotNull Block block, @NotNull String woodTypeDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
+        return registerBlock(block, woodTypeDisplayName + " Bookshelf", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    }
+
+    /**
+     * Based on {@link Items#OAK_PLANKS}
+     */
+    private static @NotNull Item registerPlanks(@NotNull Block block, @NotNull String descriptionDisplayName, @NotNull Supplier<@NotNull Item> hostSupplier) {
+        return registerBlock(block, descriptionDisplayName + " Planks", CreativeModeTab.TAB_BUILDING_BLOCKS, rule -> rule.withHost(hostSupplier));
+    }
+
     public static Item bootstrap() {
         SNOWY_STONE_BRICKS.toString();
         // Make sure that the item replacement rule for block items for which the block has some hosts that are potentially placed by vanilla items is registered with those vanilla items
diff --git a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
index eb582c8b01cbc86110c663fe4dab6c9a60f92242..d5f7951e5d568efadfdc025b96e2b6ec9bd119be 100644
--- a/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
+++ b/src/main/java/nl/martijnmuijsers/paper/resourcepack/sucraft/CreateSuCraftResourcePack.java
@@ -36,7 +36,7 @@ public final class CreateSuCraftResourcePack {
 
     private CreateSuCraftResourcePack() {}
 
-    private static final int currentResourcePackVersion = 13;
+    private static final int currentResourcePackVersion = 14;
 
     public static final int RESOURCE_PACK_FORMAT = 9;
 
